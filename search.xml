<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C调用另一个.c文件的函数</title>
    <url>/e9a0e41a.html</url>
    <content><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>c语音的模块开发，首先定义一个c代码的头文件，如function.h,在里面声明将要实现的函数，如int add（int a，int b）; ，然后新建一个源文件为function.c,在function.c的开头#include “function.h”,然后下面写头文件中已声明的函数的实现。这样写完了之后，main函数如果要调用这个源文件中的函数，只需要在main函数的开头部分加入#include&lt;function.h&gt;，如此这般，main函数调用相应函数的时候就会自动找到程序的实现部分代码了。</p>
<h2 id="function-h"><a href="#function-h" class="headerlink" title="function.h"></a>function.h</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="function-c"><a href="#function-c" class="headerlink" title="function.c"></a>function.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;function.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;function.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">1</span>,b =<span class="number">2</span>;</span><br><span class="line">   <span class="type">int</span> c = add(a,b);   <span class="comment">//这里是对function.c中的add函数的调用</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;c=%d&quot;</span>,c);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>clickhouse常用命令</title>
    <url>/49b8a20.html</url>
    <content><![CDATA[<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>语法：CREATE DATABASE [IF NOT EXISTS] db_name [ON CLUSTER cluster] [ENGINE &#x3D; engine(…)] </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> db_name;   <span class="comment">--使用默认库引擎创建库</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，<code>ClickHouse</code>使用的是原生的数据库引擎<code>Ordinary</code>(在此数据库下可以使用任意类型的<strong>表引擎</strong>，<strong>在绝大多数情况下都只需使用默认的数据库引擎</strong>)。</p>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> medical_village_clinic (</span><br><span class="line">  id UInt64,  <span class="comment">-- id  默认字段</span></span><br><span class="line">  area_code String,  <span class="comment">-- 地区code 默认字段</span></span><br><span class="line">    clinic <span class="type">Decimal</span>,	<span class="comment">--卫生室数量</span></span><br><span class="line">    standard_clinic <span class="type">Decimal</span>, <span class="comment">-- 标准卫生室	</span></span><br><span class="line">    floor_space <span class="type">Decimal</span>,	<span class="comment">-- 占地面积</span></span><br><span class="line">    area_structure String,	<span class="comment">-- 建筑面积</span></span><br><span class="line">   create_time <span class="type">Date</span>, <span class="comment">-- 创建时间 默认字段</span></span><br><span class="line">   dimension_date <span class="type">Date</span>, <span class="comment">-- 时间维度 默认字段</span></span><br><span class="line">  channel String   <span class="comment">-- 来源 默认字段</span></span><br><span class="line">) ENGINE <span class="operator">=</span> MergeTree()       <span class="comment">--引擎（不变）</span></span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span>  (id,dict_code, dimension_date) <span class="comment">-- 按id,dimension_date 排序 不能设置可以为Nullable 的字段</span></span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (id,dict_code, dimension_date) <span class="comment">-- id,dimension_date  作为唯一主键 不能设置可以为Nullable 的字段</span></span><br><span class="line">     SETTINGS index_granularity<span class="operator">=</span><span class="number">8192</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> analysis_data (</span><br><span class="line">  id UInt64,  <span class="comment">-- id  默认字段</span></span><br><span class="line">  device_id String,  <span class="comment">-- 设备id</span></span><br><span class="line">  sensor_id String,	<span class="comment">-- 传感器id</span></span><br><span class="line">  analysis_data String, <span class="comment">-- 解析数据	</span></span><br><span class="line">  receive_time <span class="type">Date</span>, <span class="comment">-- 创建时间 默认字段</span></span><br><span class="line">  dimension_date <span class="type">Date</span>, <span class="comment">-- 时间维度 默认字段</span></span><br><span class="line">  channel String   <span class="comment">-- 来源 默认字段</span></span><br><span class="line">) ENGINE <span class="operator">=</span> MergeTree()       <span class="comment">--引擎（不变）</span></span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span>  (id, dimension_date) <span class="comment">-- 按id,dimension_date 排序 不能设置可以为Nullable 的字段</span></span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (id, dimension_date) <span class="comment">-- id,dimension_date  作为唯一主键 不能设置可以为Nullable 的字段</span></span><br><span class="line">     SETTINGS index_granularity<span class="operator">=</span><span class="number">8192</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>clickhouse</category>
      </categories>
      <tags>
        <tag>clickhouse</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab更改clone地址</title>
    <url>/6faff625.html</url>
    <content><![CDATA[<p>解决方案：修改gitlab配置文件gitlab.yml</p>
<h1 id="修改gitlab配置文件gitlab-yml"><a href="#修改gitlab配置文件gitlab-yml" class="headerlink" title="修改gitlab配置文件gitlab.yml"></a>修改gitlab配置文件gitlab.yml</h1><h2 id="进入docker容器"><a href="#进入docker容器" class="headerlink" title="进入docker容器"></a>进入docker容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab bash</span><br></pre></td></tr></table></figure>

<h2 id="修改gitlab-yml"><a href="#修改gitlab-yml" class="headerlink" title="修改gitlab.yml"></a>修改gitlab.yml</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">production:</span> <span class="meta">&amp;base</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># 1. GitLab app settings</span></span><br><span class="line">  <span class="comment"># ==========================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## GitLab settings</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="comment">## Web server settings (<span class="doctag">note:</span> host is the FQDN, do not include http://)</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.66</span>  <span class="comment"># 修改为新的ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8000</span>  <span class="comment"># 修改为 gitlab 访问的端口号</span></span><br><span class="line">    <span class="attr">https:</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="重启gitlab服务"><a href="#重启gitlab服务" class="headerlink" title="重启gitlab服务"></a>重启gitlab服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>

<p>或者，退出容器后，重启容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker restart gitlab</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>gitlab</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装gitlab-Runner</title>
    <url>/6c7e127d.html</url>
    <content><![CDATA[<h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LJO <span class="string">&quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_amd64.deb&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i gitlab-runner_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="3、更新"><a href="#3、更新" class="headerlink" title="3、更新"></a>3、更新</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i gitlab-runner_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="4、注册"><a href="#4、注册" class="headerlink" title="4、注册"></a>4、注册</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure>

<blockquote>
<ol>
<li>url</li>
<li>token</li>
<li>描述</li>
<li>标签，不设置全局可用</li>
<li>执行方式：shell</li>
</ol>
</blockquote>
<h2 id="错误解决方法"><a href="#错误解决方法" class="headerlink" title="错误解决方法"></a>错误解决方法</h2><ol>
<li><h5 id="ERROR-Job-failed-system-failure-prepare-environment-exit-status-1-Check-https-docs-gitlab-com-runner-shells-index-html-shell-profile-loading-for-more-information"><a href="#ERROR-Job-failed-system-failure-prepare-environment-exit-status-1-Check-https-docs-gitlab-com-runner-shells-index-html-shell-profile-loading-for-more-information" class="headerlink" title="ERROR: Job failed (system failure): prepare environment: exit status 1. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information"></a>ERROR: Job failed (system failure): prepare environment: exit status 1. Check <a href="https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading">https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading</a> for more information</h5><p>原因：<strong>Ubuntu 20.04</strong>版本在执行<strong>ci</strong>时会出现此错误，解决方法是删除工作目录下的**.bash_logout**文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看gitlab-runner配置</span></span><br><span class="line">jack@k8smaster:~$ ps aux | grep gitlab-runner</span><br><span class="line"></span><br><span class="line">root      314163  0.2  0.3 143980 30740 ?        Ssl  08:06   0:01 /usr/bin/gitlab-runner run --working-directory /home/gitlab-runner --config /etc/gitlab-runner/config.toml --service gitlab-runner --user gitlab-runner</span><br><span class="line">jack      320030  0.0  0.0   6432  2624 pts/0    S+   08:14   0:00 grep --color=auto gitlab-runner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除.bash_logout</span></span><br><span class="line">jack@k8smaster:~$ sudo <span class="built_in">rm</span> -r /home/gitlab-runner/.bash_logout</span><br></pre></td></tr></table></figure>


</li>
<li><h5 id="Got-permission-denied-while-trying-to-connect-to-the-Docker-daemon-socket-at-unix-x2F-x2F-x2F-var-x2F-run-x2F-docker-sock-Post-http-x2F-x2F-2Fvar-2Frun-2Fdocker-sock-x2F-v1-24-x2F-auth-dial-unix-x2F-var-x2F-run-x2F-docker-sock-connect-permission-denied"><a href="#Got-permission-denied-while-trying-to-connect-to-the-Docker-daemon-socket-at-unix-x2F-x2F-x2F-var-x2F-run-x2F-docker-sock-Post-http-x2F-x2F-2Fvar-2Frun-2Fdocker-sock-x2F-v1-24-x2F-auth-dial-unix-x2F-var-x2F-run-x2F-docker-sock-connect-permission-denied" class="headerlink" title="Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock: Post http:&#x2F;&#x2F;%2Fvar%2Frun%2Fdocker.sock&#x2F;v1.24&#x2F;auth: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: connect: permission denied"></a>Got permission denied while trying to connect to the Docker daemon socket at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock: Post http:&#x2F;&#x2F;%2Fvar%2Frun%2Fdocker.sock&#x2F;v1.24&#x2F;auth: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: connect: permission denied</h5><p>原因：gitlab-runner账号权限不足，不能访问&#x2F;var&#x2F;run&#x2F;docker.sock。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将gitlab-runner用户加入docker组</span></span><br><span class="line">[root@gitlab-runner ~]<span class="comment"># usermod -aG docker gitlab-runner</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">[root@gitlab-runner ~]<span class="comment"># groups gitlab-runner </span></span><br></pre></td></tr></table></figure>


</li>
<li><h4 id="执行kubectl命令报错：The-connection-to-the-server-localhost-8080-was-refused-did-you-specify-the-right-host-or-port"><a href="#执行kubectl命令报错：The-connection-to-the-server-localhost-8080-was-refused-did-you-specify-the-right-host-or-port" class="headerlink" title="执行kubectl命令报错：The connection to the server localhost:8080 was refused - did you specify the right host or port?"></a>执行kubectl命令报错：The connection to the server localhost:8080 was refused - did you specify the right host or port?</h4><p>原因：gitlab-runner账号没有kubeadm配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/gitlab-runner/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf /home/gitlab-runner/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> 755 /home/gitlab-runner/.kube/config</span><br></pre></td></tr></table></figure>


</li>
<li><h4 id="启用多分支报错：Error-Cannot-perform-an-interactive-login-from-a-non-TTY-device"><a href="#启用多分支报错：Error-Cannot-perform-an-interactive-login-from-a-non-TTY-device" class="headerlink" title="启用多分支报错：Error: Cannot perform an interactive login from a non TTY device"></a>启用多分支报错：Error: Cannot perform an interactive login from a non TTY device</h4><p>原因：变量受到保护，而除master分支默认被保护之外，其他分支未设置保护，无法读取被保护的变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将分支添加到受保护的分支下面；</span><br><span class="line">设置-&gt;仓库-&gt;Protected branches,选择要保护的分支。</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>devOps</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>devOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装MongoDB</title>
    <url>/895ab3f9.html</url>
    <content><![CDATA[<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mongo:latest</span><br></pre></td></tr></table></figure>

<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -d mongo --auth</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>-p 27017:27017</strong> ：映射容器服务的 27017 端口到宿主机的 27017 端口。外部可以直接通过 宿主机 ip:27017 访问到 mongo 的服务。</li>
<li><strong>–auth</strong>：需要密码才能访问容器服务。</li>
</ul>
</blockquote>
<h4 id="创建用户密码"><a href="#创建用户密码" class="headerlink" title="创建用户密码"></a>创建用户密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mongo mongo admin</span><br><span class="line"><span class="comment"># 创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class="line">db.createUser(&#123; user:<span class="string">&#x27;admin&#x27;</span>,<span class="built_in">pwd</span>:<span class="string">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class="string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span>&#125;,<span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br><span class="line"><span class="comment"># 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line">db.auth(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker修改源并安装vim</title>
    <url>/e0af6fb1.html</url>
    <content><![CDATA[<p>1、登录容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab bash </span><br></pre></td></tr></table></figure>

<p>2、修改镜像源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/apt/sources.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>3、更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<p>4、安装软件</p>
<p>5、tab自动补全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install bash-completion</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/bash_completion</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Gitlab</title>
    <url>/d7564f52.html</url>
    <content><![CDATA[<h1 id="Docker-安装Gitlab"><a href="#Docker-安装Gitlab" class="headerlink" title="Docker 安装Gitlab"></a>Docker 安装Gitlab</h1><h3 id="一、设置本地卷位置"><a href="#一、设置本地卷位置" class="headerlink" title="一、设置本地卷位置"></a>一、设置本地卷位置</h3><p>在设置其他所有内容之前，请配置一个新的环境变量<code>$GITLAB_HOME</code> ，该变量指向配置，日志和数据文件将驻留的目录。确保目录存在并且已授予适当的权限。</p>
<p>对于Linux用户，将路径设置为<code>/srv/gitlab</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GITLAB_HOME=/srv/gitlab</span><br></pre></td></tr></table></figure>

<p>对于macOS用户，请使用用户<code>$HOME/gitlab</code>目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span>/gitlab</span><br></pre></td></tr></table></figure>

<p>GitLab容器使用主机安装的卷来存储持久数据：</p>
<table>
<thead>
<tr>
<th align="left">本地位置</th>
<th align="left">docker位置</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>$GITLAB_HOME/data</code></td>
<td align="left"><code>/var/opt/gitlab</code></td>
<td align="left">用于存储应用程序数据。</td>
</tr>
<tr>
<td align="left"><code>$GITLAB_HOME/logs</code></td>
<td align="left"><code>/var/log/gitlab</code></td>
<td align="left">用于存储日志。</td>
</tr>
<tr>
<td align="left"><code>$GITLAB_HOME/config</code></td>
<td align="left"><code>/etc/gitlab</code></td>
<td align="left">用于存储GitLab配置文件。</td>
</tr>
</tbody></table>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>GitLab Docker镜像可以多种方式运行：</p>
<ul>
<li>使用Docker引擎</li>
<li>使用Docker Compose</li>
<li>使用Docker群模式</li>
</ul>
<h4 id="使用Docker-Engine安装GitLab"><a href="#使用Docker-Engine安装GitLab" class="headerlink" title="使用Docker Engine安装GitLab"></a>使用Docker Engine安装GitLab</h4><p>您可以微调这些目录以满足您的要求。设置<code>GITLAB_HOME</code>变量后，即可运行图像：</p>
<p>参考：<a href="https://segmentfault.com/a/1190000019772866">https://segmentfault.com/a/1190000019772866</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/log/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure>

<p>这将下载并启动一个GitLab容器，并发布访问SSH，HTTP和HTTPS所需的端口。所有的GitLab数据都将存储为的子目录 <code>$GITLAB_HOME</code>。<code>restart</code>系统重启后，容器将自动运行。</p>
<p>如果您使用的是SELinux，请改为运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/log/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab:Z \</span><br><span class="line">  gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure>

<p>这将确保Docker进程具有足够的权限来在已安装的卷中创建配置文件。</p>
<p>如果您使用的是<a href="https://docs.gitlab.com/ee/integration/kerberos.html">Kerberos集成</a> ，还必须发布Kerberos端口（例如，<code>--publish 8443:8443</code>）。否则，将阻止使用Kerberos进行Git操作。</p>
<p>初始化过程可能需要很长时间。您可以使用以下方法跟踪此过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker logs -f gitlab</span><br></pre></td></tr></table></figure>

<p>启动容器后，您可以访问<code>gitlab.example.com</code>（或者 <code>http://192.168.59.103</code>如果您在macOS上使用了boot2docker）。Docker容器可能需要一段时间才能开始响应查询。首次访问GitLab时，将要求您设置管理员密码。更改后，可以使用用户名<code>root</code>和设置的密码登录。</p>
<h3 id="使用Docker-Compose安装GitLab"><a href="#使用Docker-Compose安装GitLab" class="headerlink" title="使用Docker Compose安装GitLab"></a>使用Docker Compose安装GitLab</h3><p>使用<a href="https://docs.docker.com/compose/">Docker Compose，</a>您可以轻松配置，安装和升级基于Docker的GitLab安装：</p>
<ol>
<li><p><a href="https://docs.docker.com/compose/install/">安装Docker Compose</a>。</p>
</li>
<li><p>创建一个<code>docker-compose.yml</code>文件（或<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/raw/master/docker/docker-compose.yml">下载一个示例</a>）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: &#x27;gitlab/gitlab-ee:latest&#x27;</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: &#x27;gitlab.example.com&#x27;</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url &#x27;https://gitlab.example.com&#x27;</span><br><span class="line">      # Add any other gitlab.rb configuration here, each on its own line</span><br><span class="line">  ports:</span><br><span class="line">    - &#x27;80:80&#x27;</span><br><span class="line">    - &#x27;443:443&#x27;</span><br><span class="line">    - &#x27;22:22&#x27;</span><br><span class="line">  volumes:</span><br><span class="line">    - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>确保您与以下目录位于同一目录中，<code>docker-compose.yml</code>然后启动GitLab：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>提示：</strong> 阅读<a href="https://docs.gitlab.com/omnibus/docker/#pre-configure-docker-container">“预配置Docker容器”</a>部分以查看<code>GITLAB_OMNIBUS_CONFIG</code>变量的工作方式。</p>
<p>下面是<code>docker-compose.yml</code>在自定义HTTP和SSH端口上运行GitLab的另一个示例。注意<code>GITLAB_OMNIBUS_CONFIG</code>变量如何匹配该 <code>ports</code>部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: &#x27;gitlab/gitlab-ee:latest&#x27;</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: &#x27;gitlab.example.com&#x27;</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url &#x27;http://gitlab.example.com:8929&#x27;</span><br><span class="line">      gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224</span><br><span class="line">  ports:</span><br><span class="line">    - &#x27;8929:8929&#x27;</span><br><span class="line">    - &#x27;2224:22&#x27;</span><br><span class="line">  volumes:</span><br><span class="line">    - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span><br></pre></td></tr></table></figure>

<p>这与使用相同<code>--publish 8929:8929 --publish 2224:22</code>。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装NGINX</title>
    <url>/cd0ece32.html</url>
    <content><![CDATA[<h2 id="Docker安装NGINX"><a href="#Docker安装NGINX" class="headerlink" title="Docker安装NGINX"></a>Docker安装NGINX</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<h3 id="使用默认配置启动NGINX"><a href="#使用默认配置启动NGINX" class="headerlink" title="使用默认配置启动NGINX"></a>使用默认配置启动NGINX</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>

<p>如果需要开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -d nginx --restart always</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在浏览器中打开  127.0.0.1 测试是否安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="NGINX使用主机目录配置"><a href="#NGINX使用主机目录配置" class="headerlink" title="NGINX使用主机目录配置"></a>NGINX使用主机目录配置</h2><h3 id="新建配置目录"><a href="#新建配置目录" class="headerlink" title="新建配置目录"></a>新建配置目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/nginx/www /home/nginx/logs /home/nginx/conf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>   www: 目录将映射为 nginx 容器配置的虚拟目录。</p>
<p>   logs: 目录将映射为 nginx 容器的日志目录。</p>
<p>   conf: 目录里的配置文件将映射为 nginx 容器的配置文件。</p>
</blockquote>
<h3 id="复制默认配置"><a href="#复制默认配置" class="headerlink" title="复制默认配置"></a>复制默认配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf /home/jack/nginx/conf/</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/conf.d /home/jack/nginx/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>nginx：运行容器时的名称</p>
</blockquote>
<h3 id="部署新的NGINX容器"><a href="#部署新的NGINX容器" class="headerlink" title="部署新的NGINX容器"></a>部署新的NGINX容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:80 --name nginx-test-web \</span><br><span class="line">  -v /home/nginx/www:/usr/share/nginx/html \</span><br><span class="line">  -v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  -v /home/nginx/logs:/var/log/nginx \</span><br><span class="line">  -d nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx-gateway \</span><br><span class="line">  -v /home/jack/nginx/www:/usr/share/nginx/html \</span><br><span class="line">  -v /home/jack/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  -v /home/jack/nginx/conf.d:/etc/nginx/conf.d \</span><br><span class="line">  -v /home/jack/nginx/logs:/var/log/nginx \</span><br><span class="line">  -d nginx</span><br></pre></td></tr></table></figure>



<h2 id="使用本地目录"><a href="#使用本地目录" class="headerlink" title="使用本地目录"></a>使用本地目录</h2><h5 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -v /usr/share/www/html:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-v 本地目录：docker容器目录:ro</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name apilab-web-nginx -p 8000:80 -v /home/apilab/www/html:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></table></figure>

<h5 id="配置NGINX"><a href="#配置NGINX" class="headerlink" title="配置NGINX"></a>配置NGINX</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx-name /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Redis</title>
    <url>/24c94d92.html</url>
    <content><![CDATA[<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure>

<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure>

<h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -d redis --requirepass <span class="string">&quot;redis密码&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装SQLServer</title>
    <url>/ff50eba7.html</url>
    <content><![CDATA[<h1 id="Docker安装SQL-Server"><a href="#Docker安装SQL-Server" class="headerlink" title="Docker安装SQL Server"></a>Docker安装SQL Server</h1><p>官方文档：<a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&preserve-view=true&pivots=cs1-bash">Docker：为 Linux 上的 SQL Server 安装容器 - SQL Server | Microsoft Docs</a></p>
<h2 id="拉取SQL-Server镜像"><a href="#拉取SQL-Server镜像" class="headerlink" title="拉取SQL Server镜像"></a>拉取SQL Server镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/mssql/server:2019-latest</span><br></pre></td></tr></table></figure>



<h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -e <span class="string">&quot;ACCEPT_EULA=Y&quot;</span> -e <span class="string">&quot;SA_PASSWORD=&lt;YourStrong@Passw0rd&gt;&quot;</span> \</span><br><span class="line">   -p 1433:1433 --name sql1 --hostname sql1 \</span><br><span class="line">   -d mcr.microsoft.com/mssql/server:2019-latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>密码应符合 SQL Server 默认密码策略，否则容器无法设置 SQL Server，将停止工作。 默认情况下，密码的长度必须至少为 8 个字符，并且必须包含以下四种字符中的三种：大写字母、小写字母、十进制数字和符号。</p>
</blockquote>
<blockquote>
<p>登录用户名：SA </p>
<p>登录密码：&lt;YourStrong@Password&gt;</p>
</blockquote>
<p>下表对前一个 <code>docker run</code> 示例中的参数进行了说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>-e “ACCEPT_EULA&#x3D;Y”</strong></td>
<td align="left">将 ACCEPT_EULA 变量设置为任意值，以确认接受最终用户许可协议。 SQL Server 映像的必需设置。</td>
</tr>
<tr>
<td align="left">-e “SA_PASSWORD&#x3D;&lt;YourStrong@Passw0rd&gt;”</td>
<td align="left">指定至少包含 8 个字符且符合 <a href="https://docs.microsoft.com/zh-cn/sql/relational-databases/security/password-policy?view=sql-server-ver15">SQL Server 密码要求</a>的强密码。 SQL Server 映像的必需设置。</td>
</tr>
<tr>
<td align="left"><strong>-p 1433:1433</strong></td>
<td align="left">将主机环境中的 TCP 端口（第一个值）映射到容器中的 TCP 端口（第二个值）。 在此示例中，SQL Server 侦听容器中的 TCP 1433，并对主机上的端口 1433 公开。</td>
</tr>
<tr>
<td align="left"><strong>–name sql1</strong></td>
<td align="left">为容器指定一个自定义名称，而不是使用随机生成的名称。 如果运行多个容器，则无法重复使用相同的名称。</td>
</tr>
<tr>
<td align="left">–hostname sql1</td>
<td align="left">用于显式设置容器主机名。 如果未指定主机名，则主机名默认为容器 ID，这是随机生成的系统 GUID。</td>
</tr>
<tr>
<td align="left"><strong>mcr.microsoft.com&#x2F;mssql&#x2F;server:2019-latest</strong></td>
<td align="left">SQL Server 2019 Ubuntu Linux 容器映像。</td>
</tr>
</tbody></table>
<h2 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name sql1 -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=&lt;YourStrong@Password&gt;&quot; -p 1433:1433 -v /date/sqlserver2019_data:/var/opt/mssql -d mcr.microsoft.com/mssql/server:2019-latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意 存储文件的权限，可以直接赋权777</p>
</blockquote>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker stop sql1</span><br><span class="line">sudo docker <span class="built_in">rm</span> sql1</span><br></pre></td></tr></table></figure>



<h2 id="解决首次连接，Navicat连接不上的问题"><a href="#解决首次连接，Navicat连接不上的问题" class="headerlink" title="解决首次连接，Navicat连接不上的问题"></a>解决首次连接，Navicat连接不上的问题</h2><p>下载SSMS连接，连接成功后即可使用Navicat连接。</p>
<p>下载地址：	<a href="https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15">Download SQL Server Management Studio (SSMS) - SQL Server Management Studio (SSMS) | Microsoft Docs</a></p>
<p>选择<a href="https://aka.ms/ssmsfullsetup?clcid=0x804">Chinese (Simplified)</a>版本</p>
]]></content>
  </entry>
  <entry>
    <title>Docker安装emq</title>
    <url>/869ce7f.html</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name emqx -p 1883:1883 -p 8081:8081 -p 8083:8083 -p 8883:8883 -p 8084:8084 -p 18083:18083 emqx/emqx:v4.0.0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装harbor</title>
    <url>/bd1dfc4c.html</url>
    <content><![CDATA[<h2 id="下载并解压安装程序"><a href="#下载并解压安装程序" class="headerlink" title="下载并解压安装程序"></a>下载并解压安装程序</h2><ol>
<li><p>下载安装程序<a href="https://github.com/goharbor/harbor/releases%EF%BC%9B%E8%BF%99%E9%87%8C%E6%8E%A8%E8%8D%90%E4%B8%8B%E8%BD%BD%E7%A6%BB%E7%BA%BF%E7%89%88%E6%9C%AC%EF%BC%9Aharbor-offline-installer-version.tgz%E3%80%82version%E6%98%AF%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%81">https://github.com/goharbor/harbor/releases；这里推荐下载离线版本：harbor-offline-installer-version.tgz。version是版本号！</a></p>
</li>
<li><p>解压：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf harbor-offline-installer-version.tgz</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）"><a href="#配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）" class="headerlink" title="配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）"></a>配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）</h2><h4 id="生成证书颁发机构证书"><a href="#生成证书颁发机构证书" class="headerlink" title="生成证书颁发机构证书"></a>生成证书颁发机构证书</h4><p>在生产环境中，您应该从CA获得证书。在测试或开发环境中，您可以生成自己的CA。要生成CA证书，请运行以下命令。</p>
<ol>
<li><p>生成CA证书私钥。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out ca.key 4096</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成CA证书。</p>
<p>调整<code>-subj</code>选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为通用名称（<code>CN</code>）属性。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line"> -subj <span class="string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=domain.com&quot;</span> \</span><br><span class="line"> -key ca.key \</span><br><span class="line"> -out ca.crt</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="生成服务器证书"><a href="#生成服务器证书" class="headerlink" title="生成服务器证书"></a>生成服务器证书</h4><p>证书通常包含一个<code>.crt</code>文件和一个<code>.key</code>文件，例如<code>domain.com.crt</code>和<code>domain.com.key</code>。</p>
<ol>
<li><p>生成私钥。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out domain.com.key 4096</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成证书签名请求（CSR）。</p>
<p>调整<code>-subj</code>选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为公用名（<code>CN</code>）属性，并在密钥和CSR文件名中使用它。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl req -sha512 -new \</span><br><span class="line">    -subj <span class="string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=domain.com&quot;</span> \</span><br><span class="line">    -key domain.com.key \</span><br><span class="line">    -out domain.com.csr</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成一个x509 v3扩展文件。</p>
<p>无论您使用FQDN还是IP地址连接到Harbor主机，都必须创建此文件，以便可以为您的Harbor主机生成符合主题备用名称（SAN）和x509 v3的证书扩展要求。替换<code>DNS</code>条目以反映您的域。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; v3.ext &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">authorityKeyIdentifier=keyid,issuer</span></span><br><span class="line"><span class="string">basicConstraints=CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">DNS.1=domain.com</span></span><br><span class="line"><span class="string">DNS.2=domain</span></span><br><span class="line"><span class="string">DNS.3=hostname</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用该<code>v3.ext</code>文件为您的Harbor主机生成证书。</p>
<p>将<code>domain.com</code>CRS和CRT文件名中的替换为Harbor主机名。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -sha512 -days 3650 \</span><br><span class="line">    -extfile v3.ext \</span><br><span class="line">    -CA ca.crt -CAkey ca.key -CAcreateserial \</span><br><span class="line">    -<span class="keyword">in</span> domain.com.csr \</span><br><span class="line">    -out domain.com.crt</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="提供证书给Harbor和Docker"><a href="#提供证书给Harbor和Docker" class="headerlink" title="提供证书给Harbor和Docker"></a>提供证书给Harbor和Docker</h4><p>生成后<code>ca.crt</code>，<code>domain.com.crt</code>和<code>domain.com.key</code>文件，必须将它们提供给Harbor和docker，和重新配置Harbor使用它们。</p>
<ol>
<li><p>将服务器证书和密钥复制到Harbor主机上的certficates文件夹中。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> domain.com.crt /data/cert/</span><br><span class="line"><span class="built_in">cp</span> domain.com.key /data/cert/</span><br></pre></td></tr></table></figure>
</li>
<li><p>转换<code>domain.com.crt</code>为<code>domain.com.cert</code>，供Docker使用。</p>
<p>Docker守护程序将<code>.crt</code>文件解释为CA证书，并将<code>.cert</code>文件解释为客户端证书。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform PEM -<span class="keyword">in</span> domain.com.crt -out domain.com.cert</span><br></pre></td></tr></table></figure>
</li>
<li><p>将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。您必须首先创建适当的文件夹。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> domain.com.cert /etc/docker/certs.d/domain.com/</span><br><span class="line">sudo <span class="built_in">cp</span> domain.com.key /etc/docker/certs.d/domain.com/</span><br><span class="line">sudo <span class="built_in">cp</span> ca.crt /etc/docker/certs.d/domain.com/</span><br></pre></td></tr></table></figure>

<p>如果将默认<code>nginx</code>端口443 映射到其他端口，请创建文件夹<code>/etc/docker/certs.d/domain.com:port</code>或<code>/etc/docker/certs.d/harbor_IP:port</code>。</p>
</li>
<li><p>重新启动Docker。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li>
</ol>
<p>您可能还需要在操作系统级别信任证书。有关更多信息，请参见 <a href="https://goharbor.io/docs/2.0.0/install-config/troubleshoot-installation/#https">对Harbour安装</a>进行<a href="https://goharbor.io/docs/2.0.0/install-config/troubleshoot-installation/#https">故障排除</a>。</p>
<p>以下示例说明了使用自定义证书的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/docker/certs.d/</span><br><span class="line">    └── domain.com:port</span><br><span class="line">       ├── domain.com.cert  &lt;-- Server certificate signed by CA</span><br><span class="line">       ├── domain.com.key   &lt;-- Server key signed by CA</span><br><span class="line">       └── ca.crt               &lt;-- Certificate authority that signed the registry certificate</span><br></pre></td></tr></table></figure>

<h4 id="部署或重新配置港口（第一次部署，跳过这一步）"><a href="#部署或重新配置港口（第一次部署，跳过这一步）" class="headerlink" title="部署或重新配置港口（第一次部署，跳过这一步）"></a>部署或重新配置港口（第一次部署，跳过这一步）</h4><p>如果尚未部署Harbor，请参阅 <a href="https://goharbor.io/docs/2.0.0/install-config/configure-yml-file/">配置Harbor YML文件，</a>以获取有关如何通过在中指定<code>hostname</code>和<code>https</code>属性来配置Harbor以使用证书的信息<code>harbor.yml</code>。</p>
<p>如果您已经使用HTTP部署了Harbor，并希望将其重新配置为使用HTTPS，请执行以下步骤。</p>
<ol>
<li><p>运行<code>prepare</code>脚本以启用HTTPS。(此方法如果不行，则先停止harbor，再执行这一步；调整后的顺序是：2、1、3)</p>
<p>Harbor将<code>nginx</code>实例用作所有服务的反向代理。您可以使用<code>prepare</code>脚本来配置<code>nginx</code>为使用HTTPS。该<code>prepare</code>在港的安装包，在同级别的<code>install.sh</code>脚本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ./prepare</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果Harbor正在运行，请停止并删除现有实例。</p>
<p>您的图像数据保留在文件系统中，因此不会丢失任何数据。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker-compose down -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启港口：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置YAML文件"><a href="#配置YAML文件" class="headerlink" title="配置YAML文件"></a>配置YAML文件</h2><ol>
<li><p>复制 harbor.yml.tmpl 为 harbor.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> harbor.yml.tmpl harbor.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑harbor.yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hostname:</span> <span class="string">domain.com</span>			<span class="comment"># 修改为你的域名或者ip，不能使用localhost和127.0.0.1</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="number">123456</span>	<span class="comment"># admin用户的密码</span></span><br><span class="line"><span class="attr">data_volume:</span> <span class="string">/data</span>				<span class="comment"># 存储位置</span></span><br></pre></td></tr></table></figure>

<p>如果你不需要开启https，注释下面这段配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">https:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">  <span class="attr">certificate:</span> <span class="string">/your/certificate/path</span></span><br><span class="line">  <span class="attr">private_key:</span> <span class="string">/your/private/key/path</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure>

<p>安装完成后，访问yaml中配置的地址：reg.mydomain.com，输入账号密码即可！</p>
<h4 id="加点料："><a href="#加点料：" class="headerlink" title="加点料："></a>加点料：</h4><ol>
<li><h5 id="如果没有使用https的话需要配置docker，没有daemon-json文件直接新建一个就行："><a href="#如果没有使用https的话需要配置docker，没有daemon-json文件直接新建一个就行：" class="headerlink" title="如果没有使用https的话需要配置docker，没有daemon.json文件直接新建一个就行："></a>如果没有使用https的话需要配置docker，没有daemon.json文件直接新建一个就行：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>根据配置的yaml文件，添加以下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;insecure-registries&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;domain.com:5000&quot;</span><span class="punctuation">,</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>重启docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>

<p>停止Harbor：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose down -v</span><br></pre></td></tr></table></figure>

<p>启动Harbor：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="重启系统或者重启docker和harbor"><a href="#重启系统或者重启docker和harbor" class="headerlink" title="重启系统或者重启docker和harbor"></a>重启系统或者重启docker和harbor</h5><p>重启docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>

<p>停止Harbor：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose down -v</span><br></pre></td></tr></table></figure>

<p>启动Harbor：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装kafka</title>
    <url>/c591c796.html</url>
    <content><![CDATA[<h1 id="docker安装kafka"><a href="#docker安装kafka" class="headerlink" title="docker安装kafka"></a>docker安装kafka</h1><h3 id="一、拉取镜像"><a href="#一、拉取镜像" class="headerlink" title="一、拉取镜像"></a>一、拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull wurstmeister/zookeeper</span><br><span class="line">docker pull wurstmeister/kafka</span><br></pre></td></tr></table></figure>

<p>二、编写 docker-compose.yml</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  zookeeper:</span><br><span class="line">    image: wurstmeister/zookeeper</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">  kafka:</span><br><span class="line">    image: wurstmeister/kafka</span><br><span class="line">    depends_on: [ zookeeper ]</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_ADVERTISED_HOST_NAME: <span class="number">192.168</span>.<span class="number">220.150</span></span><br><span class="line">      KAFKA_CREATE_TOPICS: <span class="string">&quot;test:1:1&quot;</span></span><br><span class="line">      KAFKA_ZOOKEEPER_CONNECT: zookeeper:<span class="number">2181</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /data/product/zj_bigdata/data/kafka/docker.sock:/var/<span class="keyword">run</span><span class="language-bash">/docker.sock</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/0edcc3addf3f">https://www.jianshu.com/p/0edcc3addf3f</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装minio</title>
    <url>/54f804e4.html</url>
    <content><![CDATA[<h3 id="创建数据存储于配置文件"><a href="#创建数据存储于配置文件" class="headerlink" title="创建数据存储于配置文件"></a>创建数据存储于配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/minio/data</span><br><span class="line"><span class="built_in">mkdir</span> -p /data/minio/config</span><br></pre></td></tr></table></figure>

<h3 id="部署minio"><a href="#部署minio" class="headerlink" title="部署minio"></a>部署minio</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio -d --restart=always \</span><br><span class="line"> -e <span class="string">&quot;MINIO_ACCESS_KEY=root&quot;</span> \</span><br><span class="line"> -e <span class="string">&quot;MINIO_SECRET_KEY=12345678&quot;</span> \</span><br><span class="line"> -v /data/minio/data:/data \</span><br><span class="line"> -v /data/minio/config:/root/.minio minio/minio \</span><br><span class="line"> server /data</span><br></pre></td></tr></table></figure>

<p>开放控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 9001:9001 \</span><br><span class="line"> --name minio -d --restart=always \</span><br><span class="line"> -e <span class="string">&quot;MINIO_ACCESS_KEY=root&quot;</span> \</span><br><span class="line"> -e <span class="string">&quot;MINIO_SECRET_KEY=12345678&quot;</span> \</span><br><span class="line"> -v /data/minio/data:/data \</span><br><span class="line"> -v /data/minio/config:/root/.minio minio/minio \</span><br><span class="line"> server /data --console-address <span class="string">&quot;:9001&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>验证安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mc <span class="built_in">ls</span> play</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><h4 id="设置公开访问"><a href="#设置公开访问" class="headerlink" title="设置公开访问"></a>设置公开访问</h4><p>将<code>mybucket/myphotos/2020/</code>子目录及其对象的匿名存储桶策略设置为<code>download</code>only。现在，子目录下的对象可以公开访问。例如<code>mybucket/myphotos/2020/yourobjectname</code>可在<a href="https://play.min.io:9000/mybucket/myphotos/2020/yourobjectname">https://play.min.io:9000/mybucket/myphotos/2020/yourobjectname 获得</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意需要带minio</span></span><br><span class="line">mc policy <span class="built_in">set</span> download minio/mybucket/myphotos/2020/</span><br><span class="line"></span><br><span class="line">Access permission <span class="keyword">for</span> ‘play/mybucket/myphotos/2020/’ is <span class="built_in">set</span> to <span class="string">&#x27;download&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装rabbitmq</title>
    <url>/9104498a.html</url>
    <content><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq</span><br></pre></td></tr></table></figure>

<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbit -p 15672:15672 -p 5672:5672 -p 1883:1883 -p 15675:15675 rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认账号密码：guest</p>
</blockquote>
<h1 id="开启mqtt"><a href="#开启mqtt" class="headerlink" title="开启mqtt"></a>开启mqtt</h1><p>进入终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbit /bin/bash</span><br></pre></td></tr></table></figure>

<p>开启mqtt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_mqtt</span><br></pre></td></tr></table></figure>

<p>rabbitmq常用命令：<a href="https://blog.csdn.net/shaoyunzhe/article/details/96461703">https://blog.csdn.net/shaoyunzhe/article/details/96461703</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/29dc6fe8.html</url>
    <content><![CDATA[<h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><h4 id="列出所有容器ID"><a href="#列出所有容器ID" class="headerlink" title="列出所有容器ID"></a>列出所有容器ID</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure>

<h4 id="使用tail命令查看日志"><a href="#使用tail命令查看日志" class="headerlink" title="使用tail命令查看日志"></a>使用tail命令查看日志</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --<span class="built_in">tail</span> -f 容器名称</span><br></pre></td></tr></table></figure>

<h4 id="查看所有容器ip地址"><a href="#查看所有容器ip地址" class="headerlink" title="查看所有容器ip地址"></a>查看所有容器ip地址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<h4 id="查看容器所有状态信息"><a href="#查看容器所有状态信息" class="headerlink" title="查看容器所有状态信息"></a>查看容器所有状态信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 容器名称</span><br></pre></td></tr></table></figure>

<h4 id="查看-容器ip-地址"><a href="#查看-容器ip-地址" class="headerlink" title="查看 容器ip 地址"></a>查看 容器ip 地址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> 容器名称/容器ID</span><br></pre></td></tr></table></figure>

<h4 id="容器运行状态"><a href="#容器运行状态" class="headerlink" title="容器运行状态"></a>容器运行状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format <span class="string">&#x27;&#123;&#123;.Name&#125;&#125; &#123;&#123;.State.Running&#125;&#125;&#x27;</span> 容器名称</span><br></pre></td></tr></table></figure>

<h4 id="查看进程信息"><a href="#查看进程信息" class="headerlink" title="查看进程信息"></a>查看进程信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker top NAMES</span><br></pre></td></tr></table></figure>

<h4 id="查看端口；-使用容器ID-或者-容器名称"><a href="#查看端口；-使用容器ID-或者-容器名称" class="headerlink" title="查看端口；(使用容器ID 或者 容器名称)"></a>查看端口；(使用容器ID 或者 容器名称)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker port 容器名称/容器ID</span><br></pre></td></tr></table></figure>



<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><h4 id="删除所有的容器"><a href="#删除所有的容器" class="headerlink" title="删除所有的容器"></a>删除所有的容器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docekr <span class="built_in">rm</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有未在容器绑定的镜像，慎用！！！"><a href="#删除所有未在容器绑定的镜像，慎用！！！" class="headerlink" title="删除所有未在容器绑定的镜像，慎用！！！"></a>删除所有未在容器绑定的镜像，慎用！！！</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image prune -a</span><br></pre></td></tr></table></figure>

<p>强制删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image prune -a -f</span><br></pre></td></tr></table></figure>

<h4 id="删除所有-容器"><a href="#删除所有-容器" class="headerlink" title="删除所有****容器"></a>删除所有**<none>**容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images | grep <span class="string">&quot;none&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>) </span><br></pre></td></tr></table></figure>

<h4 id="删除所有有关镜像名称的镜像"><a href="#删除所有有关镜像名称的镜像" class="headerlink" title="删除所有有关镜像名称的镜像"></a>删除所有有关镜像名称的镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q --filter reference=容器名称)</span><br></pre></td></tr></table></figure>



<h3 id="停止命令"><a href="#停止命令" class="headerlink" title="停止命令"></a>停止命令</h3><h4 id="停止所有容器"><a href="#停止所有容器" class="headerlink" title="停止所有容器"></a>停止所有容器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常见错误排除</title>
    <url>/9cddf8e9.html</url>
    <content><![CDATA[<h4 id="错误：Job-for-docker-service-failed-because-the-control-process-exited-with-error-code"><a href="#错误：Job-for-docker-service-failed-because-the-control-process-exited-with-error-code" class="headerlink" title="错误：Job for docker.service failed because the control process exited with error code."></a>错误：Job for docker.service failed because the control process exited with error code.</h4><h4 id="See-“systemctl-status-docker-service”-and-“journalctl-xe”-for-details"><a href="#See-“systemctl-status-docker-service”-and-“journalctl-xe”-for-details" class="headerlink" title="See “systemctl status docker.service” and “journalctl -xe” for details."></a>See “systemctl status docker.service” and “journalctl -xe” for details.</h4><p>这个一般是由于&#x2F;etc&#x2F;docker&#x2F;daemon.json里面配置有误</p>
<p>正确配置例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;:[&quot;127.0.0.1&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="错误：Cannot-connect-to-the-Docker-daemon-at-unix-x2F-x2F-x2F-var-x2F-run-x2F-docker-sock-Is-the-docker-daemon-running"><a href="#错误：Cannot-connect-to-the-Docker-daemon-at-unix-x2F-x2F-x2F-var-x2F-run-x2F-docker-sock-Is-the-docker-daemon-running" class="headerlink" title="错误：Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?"></a>错误：Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?</h4><p>使配置文件生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>重启docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>



<h4 id="错误：http-server-gave-HTTP-response-to-HTTPS-client解决方案："><a href="#错误：http-server-gave-HTTP-response-to-HTTPS-client解决方案：" class="headerlink" title="错误：http: server gave HTTP response to HTTPS client解决方案："></a>错误：http: server gave HTTP response to HTTPS client解决方案：</h4><ol>
<li><h4 id="修改docker配置"><a href="#修改docker配置" class="headerlink" title="修改docker配置"></a>修改docker配置</h4><p>编辑daemon.json文件，添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;ip:port&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ip： docker私有参考ip地址</p>
<p>port：端口号</p>
</blockquote>
<p>使配置生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>重启docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>


</li>
<li><h4 id="启动minikube的时，使用–insecure-registry启动"><a href="#启动minikube的时，使用–insecure-registry启动" class="headerlink" title="启动minikube的时，使用–insecure-registry启动"></a>启动minikube的时，使用–insecure-registry启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minikube start --insecure-registry <span class="string">&#x27;ip:port&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建私有仓库</title>
    <url>/e2f95081.html</url>
    <content><![CDATA[<h1 id="docker搭建私有仓库"><a href="#docker搭建私有仓库" class="headerlink" title="docker搭建私有仓库"></a>docker搭建私有仓库</h1><p>k8s结合使用参考网址：<a href="https://www.cnblogs.com/FateHuli/p/11836968.html">https://www.cnblogs.com/FateHuli/p/11836968.html</a></p>
<h4 id="拉取并运行容器："><a href="#拉取并运行容器：" class="headerlink" title="拉取并运行容器："></a>拉取并运行容器：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart always --name registry registry:2</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://localhost:5000/v2/">http://localhost:5000/v2/</a> 验证是否安装成功</p>
<blockquote>
<p>成功会显示{}</p>
</blockquote>
<h4 id="使用dockerfile构建镜像（有镜像可忽略）"><a href="#使用dockerfile构建镜像（有镜像可忽略）" class="headerlink" title="使用dockerfile构建镜像（有镜像可忽略）"></a>使用dockerfile构建镜像（有镜像可忽略）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t nginx:test .</span><br></pre></td></tr></table></figure>

<h4 id="标记本地镜像，将其归入私有仓库："><a href="#标记本地镜像，将其归入私有仓库：" class="headerlink" title="标记本地镜像，将其归入私有仓库："></a>标记本地镜像，将其归入私有仓库：</h4><p>推送到其他仓库时需要登录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>

<p>标记本地镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag nginx:latest localhost:5000/nginx:latest</span><br></pre></td></tr></table></figure>

<h4 id="将本地的镜像上传到镜像仓库："><a href="#将本地的镜像上传到镜像仓库：" class="headerlink" title="将本地的镜像上传到镜像仓库："></a>将本地的镜像上传到镜像仓库：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push localhost:5000/nginx:latest</span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://localhost:5000/v2/_catalog">http://localhost:5000/v2/_catalog</a> 查看私有仓库目录，可以看到刚上传的镜像了：</p>
<blockquote>
<p>tag语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>push语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push [OPTIONS] NAME[:TAG]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li>**–disable-content-trust :**忽略镜像的校验,默认开启</li>
</ul>
<p>实例</p>
<p>上传本地镜像myapache:v1到镜像仓库中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push myapache:v1</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="k8s使用私有仓库"><a href="#k8s使用私有仓库" class="headerlink" title="k8s使用私有仓库"></a>k8s使用私有仓库</h2><h4 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h4><p>创建secret（初始安装账号密码在：.docker&#x2F;config.json）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry registry-auth --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL</span><br></pre></td></tr></table></figure>

<blockquote>
<p>DOCKER_REGISTRY_SERVER：docker私有服务器ip地址和端口号，也可以是域名</p>
<p>DOCKER_USER：用户名</p>
<p>DOCKER_PASSWORD：密码</p>
<p>DOCKER_EMAIL：邮箱地址，可选参数</p>
</blockquote>
<p>查看secret</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get secret</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20191113195758125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdtaWFveWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker修改国内镜像源</title>
    <url>/5cc914c3.html</url>
    <content><![CDATA[<h1 id="国内镜像仓库"><a href="#国内镜像仓库" class="headerlink" title="国内镜像仓库"></a>国内镜像仓库</h1><table>
<thead>
<tr>
<th>国内Docker镜像仓库名称</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>Docker 官方中国区</td>
<td><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></td>
</tr>
<tr>
<td>网易</td>
<td><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></td>
</tr>
<tr>
<td>中国科学技术大学</td>
<td><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></td>
</tr>
<tr>
<td>阿里云</td>
<td>https:&#x2F;&#x2F;&lt;你的ID&gt;.mirror.aliyuncs.com</td>
</tr>
</tbody></table>
<h1 id="修改docker镜像仓库配置"><a href="#修改docker镜像仓库配置" class="headerlink" title="修改docker镜像仓库配置"></a>修改docker镜像仓库配置</h1><p>修改&#x2F;etc&#x2F;docker&#x2F;daemon.json文件，如果没有先建一个即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<h1 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://o4jtien3.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="使配置文件生效"><a href="#使配置文件生效" class="headerlink" title="使配置文件生效"></a>使配置文件生效</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<h1 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>

<h1 id="测试配置是否成功"><a href="#测试配置是否成功" class="headerlink" title="测试配置是否成功"></a>测试配置是否成功</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署springboot项目</title>
    <url>/cf4f3fa8.html</url>
    <content><![CDATA[<h3 id="使用docker部署springboot项目"><a href="#使用docker部署springboot项目" class="headerlink" title="使用docker部署springboot项目"></a>使用docker部署springboot项目</h3><h3 id="打包jar"><a href="#打包jar" class="headerlink" title="打包jar"></a>打包jar</h3><p>使用idea一键打包</p>
<h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定制的镜像都是基于 FROM 的镜像，这里的 java 就是定制需要的基础镜像。后续的操作都是基于 java。</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指明镜像维护着及其联系方式(一般是邮箱地址)</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> jack &lt;<span class="number">171756268</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上海时间</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -sf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个文件，作为工作目录使用</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为RUN、CMD、ENTRYPOINT以及COPY和AND设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明容器运行暴露的服务端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝文件或目录到镜像中，并重命名为demo.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo-test-0.0.2-SNAPSHOT.jar demo.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器时执行的Shell命令，同CMD类似，只是由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，</span></span><br><span class="line"><span class="comment"># 而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t demo-java . </span><br></pre></td></tr></table></figure>

<blockquote>
<p>-t  指定此镜像的tag名</p>
<p>注意tag名后面有一个点.，指的是 build context 为当前目录</p>
<p>也可以通过 -f 参数指定 Dockerfile 的位置</p>
</blockquote>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name demo-jave -p 8080:8080 -d demo-java</span><br></pre></td></tr></table></figure>



<h3 id="使用alpine镜像时，时区问题"><a href="#使用alpine镜像时，时区问题" class="headerlink" title="使用alpine镜像时，时区问题"></a>使用alpine镜像时，时区问题</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk --no-cache add tzdata &amp;&amp; <span class="built_in">ln</span> -sf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>apk –no-cache add tzdata</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装Grafana/loki</title>
    <url>/acaa68a3.html</url>
    <content><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull grafana/loki</span><br></pre></td></tr></table></figure>

<h1 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=loki -p 3100:3100 grafana/loki</span><br></pre></td></tr></table></figure>

<h2 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:3100/ready</span><br></pre></td></tr></table></figure>

<p>看到 <code>ready</code> 就是正常启动了。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装Grafana</title>
    <url>/4998eb02.html</url>
    <content><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull grafana/grafana</span><br></pre></td></tr></table></figure>

<h1 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=grafana -p 3000:3000 grafana/grafana</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认账号密码：<strong>admin&#x2F;admin</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装MySQL</title>
    <url>/5c6bc735.html</url>
    <content><![CDATA[<h1 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h1><p>正式环境中数据库不建议安装在docker中！！！</p>
<h1 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure>

<h1 id="运行本地容器"><a href="#运行本地容器" class="headerlink" title="运行本地容器"></a>运行本地容器</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -v /home/jack/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure>

<p>命令说明：</p>
<ul>
<li><p>-name mysql：为容器指定名称</p>
</li>
<li><p>-p 3306:3306：将容器的3306端口映射到主机的3306端口</p>
</li>
<li><p>-e MYSQL_ROOT_PASSWORD&#x3D;123456：初始化root用户的密码</p>
</li>
<li><p>-d 后台运行容器，并返回容器ID；</p>
</li>
<li><p>-v 在主机系统上的适当卷上创建数据目录，例如<code>/my/own/datadir</code></p>
</li>
</ul>
<h1 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h1><p>通过 docker ps 查看是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure>

<p>命令说明：</p>
<ul>
<li>-i：即使没有附加也保持STDIN 打开</li>
<li>-t：分配一个伪终端</li>
</ul>
<h1 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<h1 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h1><h5 id="创建一个新的用户（也可以使用root用户登录，正式环境不推荐）"><a href="#创建一个新的用户（也可以使用root用户登录，正式环境不推荐）" class="headerlink" title="创建一个新的用户（也可以使用root用户登录，正式环境不推荐）"></a>创建一个新的用户（也可以使用root用户登录，正式环境不推荐）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;jack&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="添加远程登录用户-1"><a href="#添加远程登录用户-1" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装禅道</title>
    <url>/b5a90049.html</url>
    <content><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull easysoft/zentao:15.7.1</span><br></pre></td></tr></table></figure>



<h2 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> www</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> data</span><br></pre></td></tr></table></figure>



<h2 id="启动禅道"><a href="#启动禅道" class="headerlink" title="启动禅道"></a>启动禅道</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name zentao -p 80:80 -v /mnt/data/zentao/www:/app/zentaopms -v /mnt/data/zentao/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d easysoft/zentao:15.7.1</span><br></pre></td></tr></table></figure>



<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>访问：浏览器直接访问http:&#x2F;&#x2F;容器ip:宿主机映射端口。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装Prometheus</title>
    <url>/74f5c67c.html</url>
    <content><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull prom/prometheus</span><br></pre></td></tr></table></figure>

<h1 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=prometheus -p 9090:9090 prom/prometheus</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认账号密码：<strong>admin&#x2F;admin</strong></p>
</blockquote>
<h1 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h1><p>通过运行以下命令从主机绑定装载您的：<code>prometheus.yml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -p 9090:9090 \</span><br><span class="line">    -v /path/to/prometheus.yml:/etc/prometheus/prometheus.yml \</span><br><span class="line">    prom/prometheus</span><br></pre></td></tr></table></figure>



<p>或者通过运行以下命令将包含的目录绑定挂载到：<code>prometheus.yml  /etc/prometheus</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -p 9090:9090 \</span><br><span class="line">    -v /path/to/config:/etc/prometheus \</span><br><span class="line">    prom/prometheus</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>docker开机自启容器</title>
    <url>/c8387f92.html</url>
    <content><![CDATA[<h4 id="在使用docker-run启动容器时，使用–restart参数来设置："><a href="#在使用docker-run启动容器时，使用–restart参数来设置：" class="headerlink" title="在使用docker run启动容器时，使用–restart参数来设置："></a>在使用docker run启动容器时，使用–restart参数来设置：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -d nginx --restart always</span><br></pre></td></tr></table></figure>

<blockquote>
<p>–restart具体参数值详细信息：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>no</td>
<td>容器退出时，不重启容器</td>
</tr>
<tr>
<td>on-failure</td>
<td>只有在非0状态退出时才从新启动容器</td>
</tr>
<tr>
<td>always</td>
<td>无论退出状态是如何，都重启容器</td>
</tr>
</tbody></table>
<p>还可以在使用on - failure策略时，指定Docker将尝试重新启动容器的最大次数。默认情况下，Docker将尝试永远重新启动容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run --restart=on-failure:10 nginx</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="如果创建时未指定-–restart-x3D-always-可通过update-命令"><a href="#如果创建时未指定-–restart-x3D-always-可通过update-命令" class="headerlink" title="如果创建时未指定 –restart&#x3D;always ,可通过update 命令"></a>如果创建时未指定 –restart&#x3D;always ,可通过update 命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker update --restart=always nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker搭建maven私服(nexus)</title>
    <url>/f81dce24.html</url>
    <content><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull sonatype/nexus3:latest</span><br></pre></td></tr></table></figure>

<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8081:8081 --name nexus sonatype/nexus3</span><br></pre></td></tr></table></figure>

<h1 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h1><p>停止时，请确保有足够的时间让数据库完全关闭。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop --time=120 &lt;CONTAINER_NAME&gt;</span><br></pre></td></tr></table></figure>

<h1 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h1><h2 id="使用-docker-卷"><a href="#使用-docker-卷" class="headerlink" title="使用 docker 卷"></a><em>使用 docker 卷</em></h2><p>由于 docker 卷是持久的，因此可以专门为此目的创建一个卷。这是推荐的方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create --name nexus-data</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>

<h2 id="挂载一个主机目录作为卷"><a href="#挂载一个主机目录作为卷" class="headerlink" title="挂载一个主机目录作为卷"></a><em>挂载一个主机目录作为卷</em></h2><p>这不是可移植的，因为它依赖于在主机上具有正确权限的现有目录。但是，在需要将此卷分配给某些特定底层存储的某些情况下，它可能很有用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /some/dir/nexus-data &amp;&amp; <span class="built_in">chown</span> -R 200 /some/dir/nexus-data</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8081:8081 --name nexus -v /some/dir/nexus-data:/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure>

<h1 id="访问nexus"><a href="#访问nexus" class="headerlink" title="访问nexus"></a>访问nexus</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8081/</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>默认用户是<code>admin</code>，唯一生成的密码可以<code>admin.password</code>在卷内的文件中找到。</li>
<li>服务在新容器中启动可能需要一些时间（2-3 分钟）。您可以跟踪日志以确定 Nexus 是否准备就绪：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker logs -f nexus</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>更多使用方法请参考：</p>
<p><a href="https://hub.docker.com/r/sonatype/nexus3">https://hub.docker.com/r/sonatype/nexus3</a></p>
<p><a href="https://www.sonatype.com/">https://www.sonatype.com/</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置HTTP/HTTPS代理</title>
    <url>/fe3539f6.html</url>
    <content><![CDATA[<p>docker使用<code>HTTP_PROXY</code>，<code>HTTPS_PROXY</code>以及<code>NO_PROXY</code>在其启动环境环境变量来配置HTTP或HTTPS代理的行为。不能使用该<code>daemon.json</code>文件配置这些环境变量。</p>
<p>此示例覆盖默认<code>docker.service</code>文件。</p>
<ol>
<li><p>为 docker 服务创建一个 bash 插入目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/bash/system/docker.service.d</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个名为<code>/etc/bash/system/docker.service.d/http-proxy.conf</code> 添加<code>HTTP_PROXY</code>环境变量的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果您使用 HTTPS 代理服务器，请设置<code>HTTPS_PROXY</code>环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以设置多个环境变量；设置非 HTTPS 和 HTTPS 代理；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果您有内部 Docker 注册表需要联系而无需代理，您可以通过<code>NO_PROXY</code>环境变量指定它们。</p>
<p>该<code>NO_PROXY</code>变量指定一个字符串，其中包含应从代理中排除的主机的逗号分隔值。这些是您可以指定以排除主机的选项：</p>
<ul>
<li>IP 地址前缀 ( <code>1.2.3.4</code>)</li>
<li>域名，或特殊的 DNS 标签 ( <code>*</code>)</li>
<li>域名与该名称和所有子域相匹配。以“.”开头的域名 仅匹配子域。例如，给定域 <code>foo.example.com</code>和<code>example.com</code>：<ul>
<li><code>example.com</code>匹配<code>example.com</code>和<code>foo.example.com</code>，和</li>
<li><code>.example.com</code> 只匹配 <code>foo.example.com</code></li>
</ul>
</li>
<li>单个星号 ( <code>*</code>) 表示不应进行代理</li>
<li>IP 地址前缀 ( <code>1.2.3.4:80</code>) 和域名 ( <code>foo.example.com:80</code>)接受文字端口号</li>
</ul>
<p>配置示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://proxy.example.com:80&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=https://proxy.example.com:443&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新更改并重新启动 Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证配置是否已加载并与您所做的更改匹配，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl show --property=Environment docker </span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云docker镜像仓库</title>
    <url>/194825ff.html</url>
    <content><![CDATA[<p>镜像仓库申请地址：<br><a href="https://cr.console.aliyun.com/cn-shanghai/instances/repositories">https://cr.console.aliyun.com/cn-shanghai/instances/repositories</a></p>
<p>参考地址：<a href="https://www.cnblogs.com/danielyoung/p/10608677.html">https://www.cnblogs.com/danielyoung/p/10608677.html</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>eclipse快捷键</title>
    <url>/168fd7a4.html</url>
    <content><![CDATA[<p> 转为大写 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl + Shift + x </span><br></pre></td></tr></table></figure>



<p>转为小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl + Shift + y  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>eclipse</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>git跳过代码检查</title>
    <url>/5c1803c3.html</url>
    <content><![CDATA[<h1 id="–no-verify"><a href="#–no-verify" class="headerlink" title="–no-verify"></a>–no-verify</h1><p>因为某些代码检测规则，导致代码提交失败时，可以使用 <strong>–no-verify</strong>跳过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;提交信息&#x27;</span> --no-verify</span><br></pre></td></tr></table></figure>

<p><img src="/../../images/git/git--no-verify.png"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git分支开发工作流</title>
    <url>/5b072233.html</url>
    <content><![CDATA[<h1 id="Git分支开发工作流"><a href="#Git分支开发工作流" class="headerlink" title="Git分支开发工作流"></a>Git分支开发工作流</h1><h2 id="Git分支明细"><a href="#Git分支明细" class="headerlink" title="Git分支明细"></a>Git分支明细</h2><p><img src="/../../images/git/git%E5%88%86%E6%94%AF.png"></p>
<h4 id="主分支：master"><a href="#主分支：master" class="headerlink" title="主分支：master"></a>主分支：master</h4><p>一般master或main为主分支，主分支为所有提供给用户使用的正式版本，一般由release或fix分支合并，任何时间都不能修改代码。</p>
<h4 id="新功能分支：feature-x2F"><a href="#新功能分支：feature-x2F" class="headerlink" title="新功能分支：feature&#x2F;*"></a>新功能分支：feature&#x2F;*</h4><p>在整个项目开发周期的不同阶段，我们有许多不同的新功能要开发，每开发一个新功能，最好新建一个feature分支，完成功能开发后合并分支，最后删除feature分支。</p>
<p>分支命名：feature&#x2F;分支功能</p>
<h4 id="开发分支：develop"><a href="#开发分支：develop" class="headerlink" title="开发分支：develop"></a>开发分支：develop</h4><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。开发分支应始终保持最新完成状态已经bug修复完成的代码。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”。</p>
<h4 id="预发布分支：release-x2F"><a href="#预发布分支：release-x2F" class="headerlink" title="预发布分支：release&#x2F;*"></a>预发布分支：release&#x2F;*</h4><p>预发布分支是上线前的测试阶段，预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并到develop和master分⽀上，完成后删除改分支。</p>
<p>分支命名：release&#x2F;分支功能</p>
<h4 id="BUG修复分支：fix-x2F"><a href="#BUG修复分支：fix-x2F" class="headerlink" title="BUG修复分支：fix&#x2F;*"></a>BUG修复分支：fix&#x2F;*</h4><p>用于修复紧急故障，从主分支上面拉去，最后合并到主分支或者开发分支develop。</p>
<p>分支命名：fix&#x2F;分支功能</p>
<h2 id="分支开发工作流"><a href="#分支开发工作流" class="headerlink" title="分支开发工作流"></a>分支开发工作流</h2><p>在整个项目开发周期的不同阶段，可以同时拥有多个开放的分支；定期地把某些主题分支合并入其他分支中。</p>
<p><img src="/../../images/git/%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81.png"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo关闭Next主题加载效果</title>
    <url>/a52b693e.html</url>
    <content><![CDATA[<p>motion:<br>  enable: false #关闭</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用插件</title>
    <url>/bc84784b.html</url>
    <content><![CDATA[<h2 id="CodeGlance：代码小地图"><a href="#CodeGlance：代码小地图" class="headerlink" title="CodeGlance：代码小地图"></a>CodeGlance：代码小地图</h2><p>在编辑器窗格中嵌入一个类似于Sublime中的代码小地图。使用自定义的颜色进行语法高亮，可以同时处理浅色和深色主题。</p>
<h2 id="CamelCase：驼峰命名法快速转换工具"><a href="#CamelCase：驼峰命名法快速转换工具" class="headerlink" title="CamelCase：驼峰命名法快速转换工具"></a>CamelCase：驼峰命名法快速转换工具</h2><p>使用 快捷键 shift + alt + u，完成大小写，下划线，驼峰，首字母大写等转化</p>
<h2 id="EasyCode：mybatis、mybatis-plus代码生成工具"><a href="#EasyCode：mybatis、mybatis-plus代码生成工具" class="headerlink" title="EasyCode：mybatis、mybatis-plus代码生成工具"></a>EasyCode：mybatis、mybatis-plus代码生成工具</h2><ul>
<li><p>基于IntelliJ IDEA开发的代码生成插件，支持自定义任意模板（Java，html，js，xml）。</p>
</li>
<li><p>只要是与数据库相关的代码都可以通过自定义模板来生成。支持数据库类型与java类型映射关系配置。</p>
</li>
<li><p>支持同时生成生成多张表的代码。每张表有独立的配置信息。完全的个性化定义，规则由你设置</p>
</li>
</ul>
<h2 id="Lombok：不用多说的插件"><a href="#Lombok：不用多说的插件" class="headerlink" title="Lombok：不用多说的插件"></a>Lombok：不用多说的插件</h2><p>Lombok项目是一个Java库，它会自动插入您的编辑器和构建工具中，从而使您的Java更加生动有趣。<br>永远不要再写另一个getter或equals方法，带有一个注释的您的类有一个功能全面的生成器，自动化您的日志记录变量等等。</p>
<h2 id="Chinese-Simplified-Language-Pack-EAP：官方中文汉化包"><a href="#Chinese-Simplified-Language-Pack-EAP：官方中文汉化包" class="headerlink" title="Chinese (Simplified) Language Pack EAP：官方中文汉化包"></a>Chinese (Simplified) Language Pack EAP：官方中文汉化包</h2><p>提供idea汉化</p>
<h2 id="ignore：忽略不必要提交的文件"><a href="#ignore：忽略不必要提交的文件" class="headerlink" title=".ignore：忽略不必要提交的文件"></a>.ignore：忽略不必要提交的文件</h2><p>Git项目协同时，忽略不必要提交的文件，可以在idea中隐藏这些文件</p>
<h2 id="Translation：翻译插件"><a href="#Translation：翻译插件" class="headerlink" title="Translation：翻译插件"></a>Translation：翻译插件</h2><p>提供Google、有道和百度翻译，快捷键Ctrl + Shift + O</p>
<h2 id="Alibaba-Java-Coding-Guidelines：阿里巴巴Java编程指南"><a href="#Alibaba-Java-Coding-Guidelines：阿里巴巴Java编程指南" class="headerlink" title="Alibaba Java Coding Guidelines：阿里巴巴Java编程指南"></a>Alibaba Java Coding Guidelines：阿里巴巴Java编程指南</h2><p>阿里巴巴出品的Java代码检测工具</p>
<h2 id="Mybatis-log-plugin：SQL日志工具"><a href="#Mybatis-log-plugin：SQL日志工具" class="headerlink" title="Mybatis-log-plugin：SQL日志工具"></a>Mybatis-log-plugin：SQL日志工具</h2><ul>
<li>还原<code>MyBatis</code>输出的日志为完整的<code>SQL</code>语句。</li>
<li>把<code>SQL</code>日志里面的<code>?</code>替换为真正的参数值。</li>
<li>选中要还原的<code>MyBatis</code>日志，右键点击菜单<code>Restore Sql</code>，还原<code>SQL</code>语句.</li>
<li><code>Java</code>接口方法与<code>Mapper xml</code>文件互相跳转。</li>
</ul>
<h2 id="Free-Mybatis-plugin：增强idea对mybatis支持的插件"><a href="#Free-Mybatis-plugin：增强idea对mybatis支持的插件" class="headerlink" title="Free Mybatis plugin：增强idea对mybatis支持的插件"></a>Free Mybatis plugin：增强idea对mybatis支持的插件</h2><ul>
<li>生成mapper xml文件</li>
<li>快速从代码跳转到mapper及从mapper返回代码</li>
<li>mybatis自动补全及语法错误提示</li>
<li>集成mybatis generator gui界面</li>
</ul>
<h2 id="MyBatisCodeHelperPro：MyBatis很实用的一款插件，只不过收费了"><a href="#MyBatisCodeHelperPro：MyBatis很实用的一款插件，只不过收费了" class="headerlink" title="MyBatisCodeHelperPro：MyBatis很实用的一款插件，只不过收费了"></a>MyBatisCodeHelperPro：MyBatis很实用的一款插件，只不过收费了</h2><ul>
<li>通过方法名(不需要方法的返回值和参数 会自动推导出来)来生成sql 可以生成大部分单表操作的sql 只需要一个方法的名字即可 会自动补全好方法的参数和返回值 和springdatajpa的语句基本一致</li>
<li>sql全自动提示，sql正确性检测，插件会识别mybatis的一系列标签 如 include trim set where，在这些标签之后的sql可以自动提示数据库的字段，检测sql的正确性，从此不用担心sql写错</li>
<li>直接从Intellij自带的数据库或者配置一个数据库生成crud代码 自动检测好 useGeneratedkey 自动配置好模块的文件夹 只用添加包名就可以生成代码了</li>
</ul>
<h2 id="Material-Theme-UI：自定义你喜欢的主题"><a href="#Material-Theme-UI：自定义你喜欢的主题" class="headerlink" title="Material Theme UI：自定义你喜欢的主题"></a>Material Theme UI：自定义你喜欢的主题</h2><p>Material Theme UI是JetBrains IDE (IntelliJ IDEA, WebStorm, Android Studio等)的一个插件，可以将原始的外观改变为自己设计的外观和感觉。</p>
<p>官方主题：<a href="https://plugins.jetbrains.com/contest/intellij-themes/2019">https://plugins.jetbrains.com/contest/intellij-themes/2019</a></p>
<h2 id="Leetcode-Editor：LeetCode插件"><a href="#Leetcode-Editor：LeetCode插件" class="headerlink" title="Leetcode Editor：LeetCode插件"></a>Leetcode Editor：LeetCode插件</h2><p>LeetCode插件，可以在IDEA中在线刷题。上班摸鱼属实方便，表面上我在干活，实际上我在刷算法题。</p>
<h2 id="GenerateAllSetter：一键调用一个对象的所有的set方法"><a href="#GenerateAllSetter：一键调用一个对象的所有的set方法" class="headerlink" title="GenerateAllSetter：一键调用一个对象的所有的set方法"></a>GenerateAllSetter：一键调用一个对象的所有的set方法</h2><p>光标放在要生成set方法的对象变量上面，使用Alt + Enter快捷键选择Generate all setter。</p>
<h2 id="SequenceDiagram：序列图生成工具"><a href="#SequenceDiagram：序列图生成工具" class="headerlink" title="SequenceDiagram：序列图生成工具"></a>SequenceDiagram：序列图生成工具</h2><p>使用教程：<a href="http://vanco.github.io/SequencePlugin/">http://vanco.github.io/SequencePlugin/</a></p>
<h2 id="QAPlug：管理代码质量"><a href="#QAPlug：管理代码质量" class="headerlink" title="QAPlug：管理代码质量"></a>QAPlug：管理代码质量</h2><p>直接从IDEA管理代码质量：1.从上下文菜单中选择“分析代码”。2.选择适当的范围和分析配置文件。3.运行分析。4.浏览并修复代码问题。</p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>idea正则替换下划线为驼峰</title>
    <url>/3dab07f0.html</url>
    <content><![CDATA[<h1 id="idea正则替换下划线为驼峰"><a href="#idea正则替换下划线为驼峰" class="headerlink" title="idea正则替换下划线为驼峰"></a>idea正则替换下划线为驼峰</h1><p>查找：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(\w*)_(\w*)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(\w*)_(\w*)_(\w*)</span><br></pre></td></tr></table></figure>

<p>替换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\l$1\u$2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\l$1\u$2\u$3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>解决webstrom无法识别@（别名路径）的问题</title>
    <url>/ffcc343e.html</url>
    <content><![CDATA[<p>设置 -&gt; 语言和框架  -&gt;  JavaScript -&gt; Webpack 设置为自动</p>
<p><img src="/../../images/idea/webstrom%E8%AE%BE%E7%BD%AE@.png" alt="配置工程"></p>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>正则密码</title>
    <url>/ca0ded35.html</url>
    <content><![CDATA[<h1 id="密码正则表达式"><a href="#密码正则表达式" class="headerlink" title="密码正则表达式"></a>密码正则表达式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//密码至少包含 数字和英文，长度6-20</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="string">&quot;^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,20&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密码包含 数字,英文,字符中的两种以上，长度6-20</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="string">&quot;^(?![0-9]+$)(?![a-z]+$)(?![A-Z]+$)(?!([^(0-9a-zA-Z)])+$).&#123;6,20&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 至少包含数字跟字母，可以有字符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="string">&quot;(?=.*([a-zA-Z].*))(?=.*[0-9].*)[a-zA-Z0-9-*/+.~!@#$%^&amp;*()]&#123;6,20&#125;$&quot;</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>influx_cli的使用</title>
    <url>/ec24f755.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>influxDB</category>
      </categories>
      <tags>
        <tag>influxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>influxDB常用查询命令</title>
    <url>/13d7b7e9.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>influxDB</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>influxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>安装influxDB</title>
    <url>/21f7cfaa.html</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> path/to/influxdb-docker-data-volume &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name influxdb \</span><br><span class="line">    -p 8086:8086 \</span><br><span class="line">    --volume <span class="variable">$PWD</span>:/var/lib/influxdb2 \</span><br><span class="line">    -d influxdb:2.2.0</span><br></pre></td></tr></table></figure>



<h3 id="通过-UI-设置-InfluxDB"><a href="#通过-UI-设置-InfluxDB" class="headerlink" title="通过 UI 设置 InfluxDB"></a><a href="https://docs.influxdata.com/influxdb/v2.2/install/#set-up-influxdb-through-the-ui">通过 UI 设置 InfluxDB</a></h3><ol>
<li>随着 InfluxDB 的运行，访问<a href="http://localhost:8086/">localhost:8086</a>。</li>
<li>点击<strong>开始</strong></li>
</ol>
<h4 id="设置您的初始用户"><a href="#设置您的初始用户" class="headerlink" title="设置您的初始用户"></a><a href="https://docs.influxdata.com/influxdb/v2.2/install/#set-up-your-initial-user">设置您的初始用户</a></h4><ol>
<li>输入初始<strong>用户</strong>的用户名。</li>
<li>为您的用户输入<strong>密码</strong>和<strong>确认密码</strong>。</li>
<li>输入您的初始<strong>组织名称</strong>。</li>
<li>输入您的初始<strong>存储桶名称</strong>。</li>
<li>单击<strong>继续</strong>。</li>
</ol>
<p>InfluxDB 现在使用主要用户、组织和存储桶进行初始化。您已准备好<a href="https://docs.influxdata.com/influxdb/v2.2/write-data">写入或收集数据</a>。</p>
<h3 id="（可选）设置和使用-influx-CLI"><a href="#（可选）设置和使用-influx-CLI" class="headerlink" title="（可选）设置和使用 influx CLI"></a><a href="https://docs.influxdata.com/influxdb/v2.2/install/#optional-set-up-and-use-the-influx-cli">（可选）设置和使用 influx CLI</a></h3><p>为避免必须在 每个命令中传递您的 InfluxDB <a href="https://docs.influxdata.com/influxdb/v2.2/security/tokens/">API 令牌</a><code>influx</code>，请设置配置文件来存储您的凭据。为此，请完成以下步骤：</p>
<ol>
<li><p>在终端中，运行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up a configuration profile</span></span><br><span class="line">influx config create -n default \</span><br><span class="line">  -u http://localhost:8086 \</span><br><span class="line">  -o example-org \</span><br><span class="line">  -t mySuP3rS3cr3tT0keN \</span><br><span class="line">  -a</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.influxdata.com/influxdb/v2.2/install/#">更改 InfluxDB URL</a></p>
<p>这会配置一个名为的新配置文件<code>default</code>并使配置文件处于活动状态，以便您的<code>influx</code>CLI 命令针对指定的 InfluxDB 实例运行。有关更多详细信息，请参阅<a href="https://docs.influxdata.com/influxdb/v2.2/reference/cli/influx/config/"><code>influx config</code></a>。</p>
</li>
<li><p>学习<code>influx</code>CLI 命令。要查看所有可用<code>influx</code>命令，请键入 <code>influx -h</code>或查看<a href="https://docs.influxdata.com/influxdb/v2.2/reference/cli/influx/">influx - InfluxDB 命令行界面</a>。</p>
</li>
</ol>
<p>安装 InfluxDB 后，您就可以<a href="https://docs.influxdata.com/influxdb/v2.2/get-started/">开始使用 InfluxDB 中的数据了</a>。</p>
]]></content>
      <categories>
        <category>influxDB</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>influxDB</tag>
      </tags>
  </entry>
  <entry>
    <title>BigDecimal</title>
    <url>/5b0774c7.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数。在实际应用中，需要对更大或者更小的数进行运算和处理。<strong>float和double只能用来做科学计算或者是工程计算，在商业计算中要用java.math.BigDecimal。</strong>BigDecimal所创建的是对象，我们不能使用传统的+、-、*、&#x2F;等<a href="https://baike.baidu.com/item/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6/9324947">算术运算符</a>直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。</p>
<p><code>BigDecimal</code>可以表示一个任意大小且精度完全准确的浮点数。</p>
<h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><table>
<thead>
<tr>
<th>运算符</th>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>加</td>
<td>add</td>
</tr>
<tr>
<td>减</td>
<td>subtract</td>
</tr>
<tr>
<td>乘</td>
<td>multiply</td>
</tr>
<tr>
<td>除</td>
<td>divide</td>
</tr>
<tr>
<td>绝对值</td>
<td>abs</td>
</tr>
<tr>
<td>平方</td>
<td>pow</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123.45&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;78.9&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;加：&quot;</span> + d1.add(d2));</span><br><span class="line">System.out.println(<span class="string">&quot;减：&quot;</span> + d1.subtract(d2));</span><br><span class="line">System.out.println(<span class="string">&quot;乘：&quot;</span> + d1.multiply(d2));</span><br><span class="line">System.out.println(<span class="string">&quot;除：&quot;</span> + d1.divide(d2, <span class="number">2</span>, RoundingMode.UP));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对<code>BigDecimal</code>做加、减、乘时，精度不会丢失，但是做除法时，存在无法除尽的情况，这时，就必须指定精度以及如何进行截断：</p>
</blockquote>
<h1 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a、b不能为null</span></span><br><span class="line"><span class="keyword">if</span>(a.compareTo(b) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a小于b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(a.compareTo(b) == <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a等于b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(a.compareTo(b) == <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a大于b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(a.compareTo(b) &gt; -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a大于等于b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(a.compareTo(b) &lt; <span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;a小于等于b&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jpackage打包Java应用</title>
    <url>/9642e6ad.html</url>
    <content><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装JDK，这里使用的是JDK17"><a href="#安装JDK，这里使用的是JDK17" class="headerlink" title="安装JDK，这里使用的是JDK17"></a>安装JDK，这里使用的是JDK17</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-17-jdk</span><br></pre></td></tr></table></figure>



<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install binutils</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install fakeroot</span><br></pre></td></tr></table></figure>



<h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><h2 id="新建目录，并将jar拷贝到目录中"><a href="#新建目录，并将jar拷贝到目录中" class="headerlink" title="新建目录，并将jar拷贝到目录中"></a>新建目录，并将jar拷贝到目录中</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> lib</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> test.jar lib/</span><br></pre></td></tr></table></figure>

<h2 id="打包应用"><a href="#打包应用" class="headerlink" title="打包应用"></a>打包应用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jpackage --name testname --input lib --main-jar test.jar</span><br></pre></td></tr></table></figure>

<blockquote>
<p>jpackage –input target&#x2F; \</p>
<p>  –name JPackageDemoApp \</p>
<p>  –main-jar JPackageDemoApp.jar \ </p>
<p> –main-class com.baeldung.java14.jpackagedemoapp.JPackageDemoApp \</p>
<p>  –type dmg \</p>
<p>  –java-options ‘–enable-preview’</p>
</blockquote>
<blockquote>
<ul>
<li><em>–input</em> : 输入 jar 文件的位置</li>
<li><em>–name</em> : 为可安装包命名</li>
<li><em>–main-jar</em> : 在应用程序启动时启动的 JAR 文件</li>
<li><em>–main-class</em> : 在应用程序启动时启动的 JAR 中的主类名称。如果主 JAR 中的<em>MANIFEST.MF</em>文件包含主类名，则这是可选的。</li>
<li><em>–type</em>：我们要创建什么样的安装程序？这取决于我们运行<em>jpackage</em>命令的基本操作系统。在 macOS 上，我们可以传递包类型为 DMG 或 PKG。该工具支持 Windows 上的 MSI 和 EXE 选项以及 Linux 上的 DEB 和 RPM 选项。</li>
<li><em>–java-options</em> : 传递给 Java 运行时的选项</li>
</ul>
</blockquote>
<p>安装完成后，安装目录在&#x2F;opt&#x2F;下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i testname.deb</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/testname/bin/testname</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用jlink定制生成JRE</title>
    <url>/90e68bc9.html</url>
    <content><![CDATA[<p>在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/jlink --module-path jmods --add-modules java.base --output myjre</span><br></pre></td></tr></table></figure>

<p>查看 jre 中添加的模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myjre/bin/java --list-modules</span><br></pre></td></tr></table></figure>

<p>NoClassDefFound 错误说明，jre 中没有添加相关的模块。</p>
<p>首先，需要确定缺少的 class 存在于那个 jdk module 中，然后在 jlink 命令中添加到 –add-modules 列表中，重新生成 jre 就可以了</p>
<h3 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/jlink \</span><br><span class="line">--module-path jmods \</span><br><span class="line">--add-modules java.base,java.logging,java.xml,jdk.unsupported,java.sql,java.naming,java.desktop,java.management,java.security.jgss,java.instrument,jdk.management,jdk.net \</span><br><span class="line">--strip-debug \</span><br><span class="line">--output myjre</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jlink \</span><br><span class="line">    --verbose \</span><br><span class="line">    --module-path &quot;$JAVA_HOME/jmods&quot; \</span><br><span class="line">    --add-modules java.base,java.logging,java.xml,jdk.unsupported,java.sql,java.naming,java.desktop,java.management,java.security.jgss,java.instrument,jdk.management \</span><br><span class="line">    --compress 2 \</span><br><span class="line">    --no-header-files \</span><br><span class="line">    --no-man-pages \</span><br><span class="line">    --strip-debug \</span><br><span class="line">    --output /opt/jre</span><br></pre></td></tr></table></figure>

<h3 id="全部jre"><a href="#全部jre" class="headerlink" title="全部jre"></a>全部jre</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/jlink --module-path jmods --add-modules java.base,java.compiler,java.datatransfer,java.desktop,java.instrument,java.logging,java.management,java.management.rmi,java.naming,java.net.http,java.prefs,java.rmi,java.scripting,java.se,java.security.jgss,java.security.sasl,java.smartcardio,java.sql,java.sql.rowset,java.transaction.xa,java.xml,java.xml.crypto,jdk.accessibility,jdk.aot,jdk.attach,jdk.charsets,jdk.compiler,jdk.crypto.cryptoki,jdk.crypto.ec,jdk.dynalink,jdk.editpad,jdk.hotspot.agent,jdk.httpserver,jdk.internal.ed,jdk.internal.jvmstat,jdk.internal.le,jdk.internal.opt,jdk.internal.vm.ci,jdk.internal.vm.compiler,jdk.internal.vm.compiler.management,jdk.jartool,jdk.javadoc,jdk.jcmd,jdk.jconsole,jdk.jdeps,jdk.jdi,jdk.jdwp.agent,jdk.jfr,jdk.jlink,jdk.jshell,jdk.jsobject,jdk.jstatd,jdk.localedata,jdk.management,jdk.management.agent,jdk.management.jfr,jdk.naming.dns,jdk.naming.ldap,jdk.naming.rmi,jdk.net,jdk.pack,jdk.rmic,jdk.scripting.nashorn,jdk.scripting.nashorn.shell,jdk.sctp,jdk.security.auth,jdk.security.jgss,jdk.unsupported,jdk.unsupported.desktop,jdk.xml.dom,jdk.zipfs --strip-debug --output myjre</span><br></pre></td></tr></table></figure>



<h2 id="全部模块："><a href="#全部模块：" class="headerlink" title="全部模块："></a>全部模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.base</span><br><span class="line">java.compiler</span><br><span class="line">java.datatransfer</span><br><span class="line">java.desktop</span><br><span class="line">java.instrument</span><br><span class="line">java.logging</span><br><span class="line">java.management</span><br><span class="line">java.management.rmi</span><br><span class="line">java.naming</span><br><span class="line">java.net.http</span><br><span class="line">java.prefs</span><br><span class="line">java.rmi</span><br><span class="line">java.scripting</span><br><span class="line">java.se</span><br><span class="line">java.security.jgss</span><br><span class="line">java.security.sasl</span><br><span class="line">java.smartcardio</span><br><span class="line">java.sql</span><br><span class="line">java.sql.rowset</span><br><span class="line">java.transaction.xa</span><br><span class="line">java.xml</span><br><span class="line">java.xml.crypto</span><br><span class="line">jdk.accessibility</span><br><span class="line">jdk.aot</span><br><span class="line">jdk.attach</span><br><span class="line">jdk.charsets</span><br><span class="line">jdk.compiler</span><br><span class="line">jdk.crypto.cryptoki</span><br><span class="line">jdk.crypto.ec</span><br><span class="line">jdk.dynalink</span><br><span class="line">jdk.editpad</span><br><span class="line">jdk.hotspot.agent</span><br><span class="line">jdk.httpserver</span><br><span class="line">jdk.internal.ed</span><br><span class="line">jdk.internal.jvmstat</span><br><span class="line">jdk.internal.le</span><br><span class="line">jdk.internal.opt</span><br><span class="line">jdk.internal.vm.ci</span><br><span class="line">jdk.internal.vm.compiler</span><br><span class="line">jdk.internal.vm.compiler.management</span><br><span class="line">jdk.jartool</span><br><span class="line">jdk.javadoc</span><br><span class="line">jdk.jcmd</span><br><span class="line">jdk.jconsole</span><br><span class="line">jdk.jdeps</span><br><span class="line">jdk.jdi</span><br><span class="line">jdk.jdwp.agent</span><br><span class="line">jdk.jfr</span><br><span class="line">jdk.jlink</span><br><span class="line">jdk.jshell</span><br><span class="line">jdk.jsobject</span><br><span class="line">jdk.jstatd</span><br><span class="line">jdk.localedata</span><br><span class="line">jdk.management</span><br><span class="line">jdk.management.agent</span><br><span class="line">jdk.management.jfr</span><br><span class="line">jdk.naming.dns</span><br><span class="line">jdk.naming.ldap</span><br><span class="line">jdk.naming.rmi</span><br><span class="line">jdk.net</span><br><span class="line">jdk.pack</span><br><span class="line">jdk.rmic</span><br><span class="line">jdk.scripting.nashorn</span><br><span class="line">jdk.scripting.nashorn.shell</span><br><span class="line">jdk.sctp</span><br><span class="line">jdk.security.auth</span><br><span class="line">jdk.security.jgss</span><br><span class="line">jdk.unsupported</span><br><span class="line">jdk.unsupported.desktop</span><br><span class="line">jdk.xml.dom</span><br><span class="line">jdk.zipfs</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>修改jar包配置文件</title>
    <url>/ed246d7c.html</url>
    <content><![CDATA[<h1 id="解压jar包"><a href="#解压jar包" class="headerlink" title="解压jar包"></a>解压jar包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jar -xvf test.jar</span><br></pre></td></tr></table></figure>

<h1 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim xxx</span><br></pre></td></tr></table></figure>

<h1 id="重新打jar包"><a href="#重新打jar包" class="headerlink" title="重新打jar包"></a>重新打jar包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jar -cvfm0 jar_test.jar META-INF/MANIFEST.MF .</span><br></pre></td></tr></table></figure>

<h1 id="运行jar包"><a href="#运行jar包" class="headerlink" title="运行jar包"></a>运行jar包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar jar_test.jar</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用pkg打包nodejs</title>
    <url>/9b5f2bcc.html</url>
    <content><![CDATA[<h1 id="安装pkg"><a href="#安装pkg" class="headerlink" title="安装pkg"></a>安装pkg</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pkg</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add pkg</span><br></pre></td></tr></table></figure>

<h1 id="配置入口启动文件"><a href="#配置入口启动文件" class="headerlink" title="配置入口启动文件"></a>配置入口启动文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;bin&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br></pre></td></tr></table></figure>

<h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg . -t node14-linux-x64 --out-path=dist/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>.  打包的文件 这里指当前目录下的所有</p>
<p>-t  用于制定平台和node版本，不指定时默认为3个平台，以及package.json中的node版本配置为准</p>
<p>–out-path   打包文件输出目录</p>
</blockquote>
<h1 id="常见文件及解决方法"><a href="#常见文件及解决方法" class="headerlink" title="常见文件及解决方法"></a>常见文件及解决方法</h1><h2 id="require引入外部文件"><a href="#require引入外部文件" class="headerlink" title="require引入外部文件"></a>require引入外部文件</h2><p>使用require时需要使用动态地址，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="built_in">require</span>(process.<span class="title function_">cwd</span>() + <span class="string">&#x27;/add.js&#x27;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Deployment配置文件详解</title>
    <url>/876fb885.html</url>
    <content><![CDATA[<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>       <span class="comment">#必选，版本号，例如v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span>       <span class="comment">#必选，Pod</span></span><br><span class="line"><span class="string">metadata:</span>       <span class="comment">#必选，元数据</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">string</span>       <span class="comment">#必选，Pod名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">string</span>    <span class="comment">#必选，Pod所属的命名空间</span></span><br><span class="line">  <span class="string">labels:</span>      <span class="comment">#自定义标签</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#自定义标签名字</span></span><br><span class="line">  <span class="string">annotations:</span>       <span class="comment">#自定义注释列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line"><span class="string">spec:</span>         <span class="comment">#必选，Pod中容器的详细定义</span></span><br><span class="line">  <span class="string">containers:</span>      <span class="comment">#必选，Pod中容器列表</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#必选，容器名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">string</span>    <span class="comment">#必选，容器的镜像名称</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> [<span class="string">Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">IfNotPresent</span>] <span class="comment">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">string</span>]    <span class="comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">string</span>]     <span class="comment">#容器的启动命令参数列表</span></span><br><span class="line">    <span class="attr">workingDir:</span> <span class="string">string</span>     <span class="comment">#容器的工作目录</span></span><br><span class="line">    <span class="string">volumeMounts:</span>    <span class="comment">#挂载到容器内部的存储卷配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">string</span>    <span class="comment">#存储卷在容器内mount的绝对路径，应少于512字符</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="string">boolean</span>    <span class="comment">#是否为只读模式</span></span><br><span class="line">    <span class="string">ports:</span>       <span class="comment">#需要暴露的端口库号列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#端口号名称</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="string">int</span>   <span class="comment">#容器需要监听的端口号</span></span><br><span class="line">      <span class="attr">hostPort:</span> <span class="string">int</span>    <span class="comment">#容器所在主机需要监听的端口号，默认与Container相同</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">string</span>     <span class="comment">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line">    <span class="string">env:</span>       <span class="comment">#容器运行前需设置的环境变量列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#环境变量名称</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">string</span>    <span class="comment">#环境变量的值</span></span><br><span class="line">    <span class="string">resources:</span>       <span class="comment">#资源限制和请求的设置</span></span><br><span class="line">      <span class="string">limits:</span>      <span class="comment">#资源限制的设置</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">string</span>    <span class="comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">string</span>     <span class="comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span><br><span class="line">      <span class="string">requests:</span>      <span class="comment">#资源请求的设置</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">string</span>    <span class="comment">#Cpu请求，容器启动的初始可用数量</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">string</span>     <span class="comment">#内存清楚，容器启动的初始可用数量</span></span><br><span class="line">    <span class="string">livenessProbe:</span>     <span class="comment">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span></span><br><span class="line">      <span class="string">exec:</span>      <span class="comment">#对Pod容器内检查方式设置为exec方式</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">string</span>]  <span class="comment">#exec方式需要制定的命令或脚本</span></span><br><span class="line">      <span class="string">httpGet:</span>       <span class="comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">number</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">HttpHeaders:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">string</span></span><br><span class="line">      <span class="string">tcpSocket:</span>     <span class="comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span><br><span class="line">         <span class="attr">port:</span> <span class="string">number</span></span><br><span class="line">       <span class="attr">initialDelaySeconds:</span> <span class="number">0</span>  <span class="comment">#容器启动完成后首次探测的时间，单位为秒</span></span><br><span class="line">       <span class="attr">timeoutSeconds:</span> <span class="number">0</span>   <span class="comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span><br><span class="line">       <span class="attr">periodSeconds:</span> <span class="number">0</span>    <span class="comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span><br><span class="line">       <span class="attr">successThreshold:</span> <span class="number">0</span></span><br><span class="line">       <span class="attr">failureThreshold:</span> <span class="number">0</span></span><br><span class="line">       <span class="attr">securityContext:</span></span><br><span class="line">         <span class="string">privileged:false</span></span><br><span class="line">    <span class="attr">restartPolicy:</span> [<span class="string">Always</span> <span class="string">|</span> <span class="string">Never</span> <span class="string">|</span> <span class="string">OnFailure</span>]<span class="comment">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span></span><br><span class="line">    <span class="attr">nodeSelector:</span> <span class="string">obeject</span>  <span class="comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span></span><br><span class="line">    <span class="string">imagePullSecrets:</span>    <span class="comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">    <span class="string">hostNetwork:false</span>      <span class="comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span><br><span class="line">    <span class="string">volumes:</span>       <span class="comment">#在该pod上定义共享存储卷列表</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">string</span>     <span class="comment">#共享存储卷名称 （volumes类型有很多种）</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;     <span class="comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span><br><span class="line">      <span class="attr">hostPath:</span> <span class="string">string</span>     <span class="comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">string</span>     <span class="comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span><br><span class="line">      <span class="string">secret:</span>      <span class="comment">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span></span><br><span class="line">        <span class="attr">scretname:</span> <span class="string">string</span>  </span><br><span class="line">        <span class="string">items:</span>     </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">string</span></span><br><span class="line">      <span class="string">configMap:</span>     <span class="comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>StorageClass动态分配存储资源-nfs</title>
    <url>/6534f973.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>动态存储相比于静态存储，有如下优势：</p>
<blockquote>
<p>不需要预先创建大量的PV用作存储资源。<br>静态存储需要用户申请PVC时保证容量和读写类型与预置PV的容量及读写类型完全匹配，而动态存储无需如此</p>
</blockquote>
<h2 id="创建nfs-provisioner-runner-yaml"><a href="#创建nfs-provisioner-runner-yaml" class="headerlink" title="创建nfs-provisioner-runner.yaml"></a>创建nfs-provisioner-runner.yaml</h2><p>创建 角色与账户的绑定关系:</p>
<blockquote>
<p>创建一个角色，拥有对endpoint资源操作的权限，并且角色与账户进行绑定。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;services&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;extensions&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;podsecuritypolicies&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;nfs-provisioner&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;use&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>

<h2 id="创建nfs-client-provisioner-yaml"><a href="#创建nfs-client-provisioner-yaml" class="headerlink" title="创建nfs-client-provisioner.yaml"></a>创建nfs-client-provisioner.yaml</h2><p>nfs-client-provisioner 是k8s简易的NFS外部提供者(provisioner)，本身不提供NFS，做为NFS的客户端为StorageClass提供存储.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/external_storage/nfs-client-provisioner:latest</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">nfs-storage</span>  <span class="comment">#provisioner名称,请确保该名称与 nfs-StorageClass.yaml文件中的provisioner名称保持一致</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.114</span> <span class="comment"># NFS Server IP地址</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/home/nfs_data</span> <span class="comment"># NFS 挂载卷</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.114</span> <span class="comment"># NFS Server IP地址</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/home/nfs_data</span> <span class="comment"># NFS 挂载卷</span></span><br></pre></td></tr></table></figure>

<h2 id="创建managed-nfs-storage-yaml"><a href="#创建managed-nfs-storage-yaml" class="headerlink" title="创建managed-nfs-storage.yaml"></a>创建managed-nfs-storage.yaml</h2><p>创建StorageClass资源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">nfs-storage</span> <span class="comment"># 这里的名称要和provisioner配置文件中的环境变量PROVISIONER_NAME保持一致</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">archiveOnDelete:</span> <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-claim</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">volume.beta.kubernetes.io/storage-class:</span> <span class="string">&quot;managed-nfs-storage&quot;</span>   <span class="comment">#与managed-nfs-storage.yaml metadata.name保持一致</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Mi</span></span><br></pre></td></tr></table></figure>

<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="nfs-client-provisioner部署失败"><a href="#nfs-client-provisioner部署失败" class="headerlink" title="nfs-client-provisioner部署失败"></a>nfs-client-provisioner部署失败</h4><p>在每个节点安装 nfs客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nfs-common</span><br></pre></td></tr></table></figure>



<h4 id="selfLink-was-empty-can‘t-make-reference"><a href="#selfLink-was-empty-can‘t-make-reference" class="headerlink" title="selfLink was empty, can‘t make reference"></a>selfLink was empty, can‘t make reference</h4><p>因为k8s 1.20以上版本删除了selfLink，所以需要手动配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br></pre></td></tr></table></figure>

<p>添加 - –feature-gates&#x3D;RemoveSelfLink&#x3D;false</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - <span class="built_in">command</span>:</span><br><span class="line">    - kube-apiserver</span><br><span class="line">    - --feature-gates=RemoveSelfLink=<span class="literal">false</span>  <span class="comment"># 添加这行</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署MySQL</title>
    <url>/89179d5e.html</url>
    <content><![CDATA[<h2 id="准备pv"><a href="#准备pv" class="headerlink" title="准备pv"></a>准备pv</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/srv/mysql</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.114</span></span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install my-release bitnami/mysql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NAME: my-release<br>LAST DEPLOYED: Wed Jun  9 23:24:12 2021<br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: 1<br>TEST SUITE: None<br>NOTES:<br>** Please be patient while the chart is being deployed **</p>
<p>Tip:</p>
<p>  Watch the deployment status using the command: kubectl get pods -w –namespace default</p>
<p>Services:</p>
<p>  echo Primary: my-release-mysql.default.svc.cluster.local:3306</p>
<p>Administrator credentials:</p>
<p>  echo Username: root<br>  echo Password : $(kubectl get secret –namespace default my-release-mysql -o jsonpath&#x3D;”{.data.mysql-root-password}” | base64 –decode)</p>
<p>To connect to your database:</p>
<ol>
<li><p>Run a pod that you can use as a client:</p>
<p> kubectl run my-release-mysql-client –rm –tty -i –restart&#x3D;’Never’ –image  docker.io&#x2F;bitnami&#x2F;mysql:8.0.25-debian-10-r16 –namespace default –command – bash</p>
</li>
<li><p>To connect to primary service (read&#x2F;write):</p>
<p> mysql -h my-release-mysql.default.svc.cluster.local -uroot -p my_database</p>
</li>
</ol>
<p>To upgrade this helm chart:</p>
<ol>
<li><p>Obtain the password as described on the ‘Administrator credentials’ section and set the ‘root.password’ parameter as shown below:</p>
<p> ROOT_PASSWORD&#x3D;$(kubectl get secret –namespace default my-release-mysql -o jsonpath&#x3D;”{.data.mysql-root-password}” | base64 –decode)<br> helm upgrade –namespace default my-release bitnami&#x2F;mysql –set auth.rootPassword&#x3D;$ROOT_PASSWORD</p>
</li>
</ol>
</blockquote>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm delete my-release</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl 命令大全</title>
    <url>/760b67b4.html</url>
    <content><![CDATA[<h1 id="kubectl-命令"><a href="#kubectl-命令" class="headerlink" title="kubectl 命令"></a>kubectl 命令</h1><p>参考网址：<a href="https://jimmysong.io/kubernetes-handbook/guide/kubectl-cheatsheet.html">https://jimmysong.io/kubernetes-handbook/guide/kubectl-cheatsheet.html</a></p>
<h4 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl version</span><br></pre></td></tr></table></figure>

<h4 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure>

<h4 id="get-获取列出一个或多个资源的信息"><a href="#get-获取列出一个或多个资源的信息" class="headerlink" title="get  获取列出一个或多个资源的信息"></a>get  获取列出一个或多个资源的信息</h4><ul>
<li>列出所有运行的Pod信息。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<ul>
<li>列出Pod以及运行Pod节点信息。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure>

<ul>
<li>列出指定NAME的 replication controller信息。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get replicationcontroller web</span><br></pre></td></tr></table></figure>

<h4 id="describe-输出指定的一个-x2F-多个资源的详细信息"><a href="#describe-输出指定的一个-x2F-多个资源的详细信息" class="headerlink" title="describe 输出指定的一个&#x2F;多个资源的详细信息"></a>describe 输出指定的一个&#x2F;多个资源的详细信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl describe TYPE NAME_PREFIX</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 描述一个node</span></span><br><span class="line">$ kubectl describe nodes kubernetes-minion-emt8.c.myproject.internal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述一个pod</span></span><br><span class="line">$ kubectl describe pods/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述pod.json中的资源类型和名称指定的pod</span></span><br><span class="line">$ kubectl describe -f pod.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述所有的pod</span></span><br><span class="line">$ kubectl describe pods</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述所有包含label name=myLabel的pod</span></span><br><span class="line">$ kubectl describe po -l name=myLabel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述所有被replication controller “frontend”管理的pod（rc创建的pod都以rc的名字作为前缀）</span></span><br><span class="line">$ kubectl describe pods frontend</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="删除应用"><a href="#删除应用" class="headerlink" title="删除应用"></a>删除应用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete pod 应用名称 (kubectl get pods)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete deployment 名称 (kubectl get deployment)</span><br></pre></td></tr></table></figure>

<p>使用yaml文件删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete -f xxx.yaml</span><br></pre></td></tr></table></figure>



<h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get ns</span><br><span class="line"></span><br><span class="line">kubectl get namespace</span><br></pre></td></tr></table></figure>



<h4 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get cm</span><br><span class="line"></span><br><span class="line">kubectl get configmap</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s配置pv</title>
    <url>/7eb43148.html</url>
    <content><![CDATA[<p>参考：<a href="https://feisky.gitbooks.io/kubernetes/content/concepts/persistent-volume.html">https://feisky.gitbooks.io/kubernetes/content/concepts/persistent-volume.html</a></p>
<h2 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h2><p>PersistentVolume（PV）是集群之中的一块网络存储。跟 Node 一样，也是集群的资源。PV 跟 Volume (卷) 类似，不过会有独立于 Pod 的生命周期。比如一个 NFS 的 PV 可以定义为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv0003</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="comment"># NFS目录，需要该目录在NFS上存在</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/tmp</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p>PV 的访问模式（accessModes）有三种：</p>
<ul>
<li>ReadWriteOnce（RWO）：是最基本的方式，可读可写，但只支持被单个节点挂载。</li>
<li>ReadOnlyMany（ROX）：可以以只读的方式被多个节点挂载。</li>
<li>ReadWriteMany（RWX）：这种存储可以以读写的方式被多个节点共享。不是每一种存储都支持这三种方式，像共享方式，目前支持的还比较少，比较常用的是 NFS。在 PVC 绑定 PV 时通常根据两个条件来绑定，一个是存储的大小，另一个就是访问模式。</li>
</ul>
<p>PV 的回收策略（persistentVolumeReclaimPolicy，即 PVC 释放卷的时候 PV 该如何操作）也有三种</p>
<ul>
<li>Retain，不清理, 保留 Volume（需要手动清理）</li>
<li>Recycle，删除数据，即 <code>rm -rf /thevolume/*</code>（只有 NFS 和 HostPath 支持）</li>
<li>Delete，删除存储资源，比如删除 AWS EBS 卷（只有 AWS EBS, GCE PD, Azure Disk 和 Cinder 支持）</li>
</ul>
<h5 id="部署："><a href="#部署：" class="headerlink" title="部署："></a>部署：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f pv.yaml</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl 命令自动补全</title>
    <url>/cdcc2a3b.html</url>
    <content><![CDATA[<h1 id="kubectl-命令自动补全"><a href="#kubectl-命令自动补全" class="headerlink" title="kubectl 命令自动补全"></a>kubectl 命令自动补全</h1><h4 id="安装bash-completion（如果已经安装忽略即可）："><a href="#安装bash-completion（如果已经安装忽略即可）：" class="headerlink" title="安装bash-completion（如果已经安装忽略即可）："></a>安装bash-completion（如果已经安装忽略即可）：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install bash-completion</span><br></pre></td></tr></table></figure>

<h4 id="测试一下："><a href="#测试一下：" class="headerlink" title="测试一下："></a>测试一下：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure>

<h4 id="测试没问题后，对-x2F-root-x2F-bashrc-加2行代码-，方便以后每次登录自动生效："><a href="#测试没问题后，对-x2F-root-x2F-bashrc-加2行代码-，方便以后每次登录自动生效：" class="headerlink" title="测试没问题后，对 &#x2F;root&#x2F;.bashrc 加2行代码 ，方便以后每次登录自动生效："></a>测试没问题后，对 &#x2F;root&#x2F;.bashrc 加2行代码 ，方便以后每次登录自动生效：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>rook搭建Ceph分布式存储服务</title>
    <url>/b8c35ecf.html</url>
    <content><![CDATA[<p><a href="https://rook.io/docs/rook/v1.6/ceph-quickstart.html">https://rook.io/docs/rook/v1.6/ceph-quickstart.html</a></p>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>为确保您有一个准备就绪的 Kubernetes 集群<code>Rook</code>，您可以<a href="https://rook.io/docs/rook/v1.6/k8s-pre-reqs.html">按照这些说明进行操作</a>。</p>
<p>为了配置 Ceph 存储集群，至少需要以下本地存储选项之一：</p>
<ul>
<li>原始设备（无分区或格式化文件系统）</li>
<li>原始分区（无格式化文件系统）</li>
<li><code>block</code>模式下存储类可用的 PV</li>
</ul>
<p>您可以使用以下命令确认您的分区或设备是否已格式化文件系统。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk -f</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME                  FSTYPE      LABEL UUID                                   MOUNTPOINT</span><br><span class="line">vda</span><br><span class="line">└─vda1                LVM2_member       &gt;eSO50t-GkUV-YKTH-WsGq-hNJY-eKNf-3i07IB</span><br><span class="line"> ├─ubuntu--vg-root   ext4              c2366f76-6e21-4f10-a8f3-6776212e2fe4   /</span><br><span class="line"> └─ubuntu--vg-swap_1 swap              9492a3dc-ad75-47cd-9596-678e8cf17ff9   [SWAP]</span><br><span class="line">vdb</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果该<code>FSTYPE</code>字段不为空，则在相应设备的顶部有一个文件系统。在这种情况下，您可以将 vdb 用于 Ceph，而不能使用 vda 及其分区。</p>
<h2 id="下载Rook"><a href="#下载Rook" class="headerlink" title="下载Rook"></a>下载Rook</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --single-branch --branch v1.6.5 https://github.com/rook/rook.git</span><br></pre></td></tr></table></figure>

<h2 id="部署Rook-Operator"><a href="#部署Rook-Operator" class="headerlink" title="部署Rook Operator"></a>部署Rook Operator</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> rook/cluster/examples/kubernetes/ceph</span><br><span class="line">kubectl create -f crds.yaml -f common.yaml -f operator.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n rook-ceph get pod</span><br></pre></td></tr></table></figure>

<h2 id="创建-Rook-Ceph-集群"><a href="#创建-Rook-Ceph-集群" class="headerlink" title="创建 Rook Ceph 集群"></a>创建 Rook Ceph 集群</h2><p>现在 Rook 操作符正在运行，我们可以创建 Ceph 集群。为了使集群在重启后继续存在，请确保设置<code>dataDirHostPath</code>对您的主机有效的属性。有关更多设置，请参阅有关<a href="https://rook.io/docs/rook/v1.6/ceph-cluster-crd.html">配置集群</a>的文档。</p>
<p>创建集群：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -f cluster.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl -n rook-ceph get pod</span><br></pre></td></tr></table></figure>



<h2 id="安装Rook-Toolbox工具箱"><a href="#安装Rook-Toolbox工具箱" class="headerlink" title="安装Rook Toolbox工具箱"></a>安装Rook Toolbox工具箱</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="解决Back-off-pulling-image-“k8s-gcr-io-x2F-XXX”问题"><a href="#解决Back-off-pulling-image-“k8s-gcr-io-x2F-XXX”问题" class="headerlink" title="解决Back-off pulling image “k8s.gcr.io&#x2F;XXX”问题"></a>解决Back-off pulling image “k8s.gcr.io&#x2F;XXX”问题</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-node-driver-registrar:v2.0.1</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-attacher:v3.0.2</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-provisioner:v2.0.4</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-snapshotter:v4.0.0</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-resizer:v1.0.1</span><br></pre></td></tr></table></figure>

<h3 id="重新打标签"><a href="#重新打标签" class="headerlink" title="重新打标签"></a>重新打标签</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-node-driver-registrar:v2.0.1 k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.0.1</span><br><span class="line">docker tag registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-attacher:v3.0.2 k8s.gcr.io/sig-storage/csi-attacher:v3.0.2</span><br><span class="line">docker tag registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-provisioner:v2.0.4 k8s.gcr.io/sig-storage/csi-provisioner:v2.0.4</span><br><span class="line">docker tag registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-snapshotter:v4.0.0 k8s.gcr.io/sig-storage/csi-snapshotter:v4.0.0</span><br><span class="line">docker tag registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-resizer:v1.0.1 k8s.gcr.io/sig-storage/csi-resizer:v1.0.1</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="自制镜像"><a href="#自制镜像" class="headerlink" title="自制镜像"></a>自制镜像</h3><p>下载源镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.0.1</span><br><span class="line">docker pull k8s.gcr.io/sig-storage/csi-attacher:v3.0.2</span><br><span class="line">docker pull k8s.gcr.io/sig-storage/csi-provisioner:v2.0.4</span><br><span class="line">docker pull k8s.gcr.io/sig-storage/csi-snapshotter:v4.0.0</span><br><span class="line">docker pull k8s.gcr.io/sig-storage/csi-resizer:v1.0.1</span><br></pre></td></tr></table></figure>

<p>打标签：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.0.1 registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-node-driver-registrar:v2.0.1</span><br><span class="line">docker tag k8s.gcr.io/sig-storage/csi-attacher:v3.0.2 registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-attacher:v3.0.2</span><br><span class="line">docker tag k8s.gcr.io/sig-storage/csi-provisioner:v2.0.4 registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-provisioner:v2.0.4</span><br><span class="line">docker tag k8s.gcr.io/sig-storage/csi-snapshotter:v4.0.0 registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-snapshotter:v4.0.0</span><br><span class="line">docker tag k8s.gcr.io/sig-storage/csi-resizer:v1.0.1 registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-resizer:v1.0.1</span><br></pre></td></tr></table></figure>

<p>上传镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-node-driver-registrar:v2.0.1</span><br><span class="line">docker push registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-attacher:v3.0.2</span><br><span class="line">docker push registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-provisioner:v2.0.4</span><br><span class="line">docker push registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-snapshotter:v4.0.0</span><br><span class="line">docker push registry.cn-beijing.aliyuncs.com/k8s-gcrs/csi-resizer:v1.0.1</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>（三）k8s部署kong</title>
    <url>/53f5d6ad.html</url>
    <content><![CDATA[<h2 id="helm添加kong"><a href="#helm添加kong" class="headerlink" title="helm添加kong"></a>helm添加kong</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm repo add kong https://charts.konghq.com</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>

<h2 id="创建postgres数据库pv"><a href="#创建postgres数据库pv" class="headerlink" title="创建postgres数据库pv"></a>创建postgres数据库pv</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">postgres-pv</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">nfs路径</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">nfs地址</span></span><br></pre></td></tr></table></figure>

<h2 id="创建配置文件：kong-yaml"><a href="#创建配置文件：kong-yaml" class="headerlink" title="创建配置文件：kong.yaml"></a>创建配置文件：kong.yaml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">kong</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="string">&quot;2.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/kong_prefix/</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">servicePort:</span> <span class="number">8001</span></span><br><span class="line">    <span class="attr">containerPort:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">postgresql:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postgresqlUsername:</span> <span class="string">kong</span></span><br><span class="line">  <span class="attr">postgresqlDatabase:</span> <span class="string">kong</span></span><br><span class="line">  <span class="attr">postgresqlPassword:</span> <span class="string">kong</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingressController:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">installCRDs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>随机名称启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install kong/kong --generate-name -f kong.yaml</span><br></pre></td></tr></table></figure>

<p>指定名称启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install kong kong/kong -f kong.yaml</span><br></pre></td></tr></table></figure>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm delete kong</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s专题</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>k8s专题</tag>
      </tags>
  </entry>
  <entry>
    <title>（一）ubuntu搭建k8s集群</title>
    <url>/ac92ef22.html</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。</p>
<p>这个工具能通过两条指令完成一个kubernetes集群的部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个 Master 节点</span><br><span class="line">$ kubeadm init</span><br><span class="line"></span><br><span class="line"># 将一个 Node 节点加入到当前集群中</span><br><span class="line">$ kubeadm join &lt;Master节点的IP和端口 &gt;</span><br></pre></td></tr></table></figure>

<h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p>
<ul>
<li>一台或多台机器，操作系统 CentOS7.x-86_x64</li>
<li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li>
<li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li>
<li>禁止swap分区</li>
</ul>
<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><table>
<thead>
<tr>
<th>角色</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>master</td>
<td>192.168.153.150</td>
</tr>
<tr>
<td>node1</td>
<td>192.168.153.151</td>
</tr>
<tr>
<td>node2</td>
<td>192.168.153.152</td>
</tr>
</tbody></table>
<p><strong>以下操作需要管理员权限</strong></p>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>

<h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ubuntu没有安装，不需要操作</span><br></pre></td></tr></table></figure>

<h3 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h3><p>临时修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure>

<p>永久修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>

<h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br></pre></td></tr></table></figure>

<h3 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ntpdate</span><br></pre></td></tr></table></figure>

<p>将系统时间与网络同步：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>

<p>将时间写入硬件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo hwclock --systohc</span><br></pre></td></tr></table></figure>



<h3 id="在master中添加hosts"><a href="#在master中添加hosts" class="headerlink" title="在master中添加hosts"></a>在<strong>master</strong>中添加hosts</h3><blockquote>
<p>格式： 192.168.153.150  <hostname></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.153.150 k8smaster</span></span><br><span class="line"><span class="string">192.168.153.151 k8snode1</span></span><br><span class="line"><span class="string">192.168.153.152 k8snode2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h3 id="将桥接的IPV4流量传递到iptables的链（Ubuntu默认全开放）"><a href="#将桥接的IPV4流量传递到iptables的链（Ubuntu默认全开放）" class="headerlink" title="将桥接的IPV4流量传递到iptables的链（Ubuntu默认全开放）"></a>将桥接的IPV4流量传递到iptables的链（Ubuntu默认全开放）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p> 生效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysctl --system </span><br></pre></td></tr></table></figure>



<h2 id="在所有节点上安装Docker"><a href="#在所有节点上安装Docker" class="headerlink" title="在所有节点上安装Docker"></a>在所有节点上安装Docker</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p>
<p>参考<a href="https://www.cnblogs.com/xlizi/p/13452547.html">Ubuntu安装docker</a></p>
<h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt remove docker docker.io containerd runc</span><br></pre></td></tr></table></figure>

<h3 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure>
<h3 id="添加官方GPG密钥："><a href="#添加官方GPG密钥：" class="headerlink" title="添加官方GPG密钥："></a>添加官方GPG密钥：</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<h3 id="设置稳定的存储库"><a href="#设置稳定的存储库" class="headerlink" title="设置稳定的存储库"></a>设置稳定的存储库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<h3 id="运行hello-world验证docker是否正确安装"><a href="#运行hello-world验证docker是否正确安装" class="headerlink" title="运行hello-world验证docker是否正确安装"></a>运行hello-world验证docker是否正确安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h3 id="用非root管理docker"><a href="#用非root管理docker" class="headerlink" title="用非root管理docker"></a>用非root管理docker</h3><h4 id="创建docker组"><a href="#创建docker组" class="headerlink" title="创建docker组"></a>创建docker组</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>
<h4 id="将用户添加到docker组中"><a href="#将用户添加到docker组中" class="headerlink" title="将用户添加到docker组中"></a>将用户添加到docker组中</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<h4 id="注销并重新登录使更改生效，或者使用下面的命令激活对组的更改（Linux）"><a href="#注销并重新登录使更改生效，或者使用下面的命令激活对组的更改（Linux）" class="headerlink" title="注销并重新登录使更改生效，或者使用下面的命令激活对组的更改（Linux）"></a>注销并重新登录使更改生效，或者使用下面的命令激活对组的更改（Linux）</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">newgrp docker </span><br></pre></td></tr></table></figure>
<h4 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<h3 id="修改为国内镜像仓库"><a href="#修改为国内镜像仓库" class="headerlink" title="修改为国内镜像仓库"></a>修改为国内镜像仓库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://o4jtien3.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<h2 id="在所有节点安装kubeadm，kubelet和kubectl"><a href="#在所有节点安装kubeadm，kubelet和kubectl" class="headerlink" title="在所有节点安装kubeadm，kubelet和kubectl"></a>在所有节点安装kubeadm，kubelet和kubectl</h2><h3 id="安装kubeadm，kubelet和kubectl"><a href="#安装kubeadm，kubelet和kubectl" class="headerlink" title="安装kubeadm，kubelet和kubectl"></a>安装kubeadm，kubelet和kubectl</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - </span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>

<h3 id="重新启动-kubelet"><a href="#重新启动-kubelet" class="headerlink" title="重新启动 kubelet"></a>重新启动 kubelet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>



<h2 id="部署Kubernetes-Master"><a href="#部署Kubernetes-Master" class="headerlink" title="部署Kubernetes Master"></a>部署Kubernetes Master</h2><h3 id="在Master（192-168-153-150）执行。"><a href="#在Master（192-168-153-150）执行。" class="headerlink" title="在Master（192.168.153.150）执行。"></a>在Master（192.168.153.150）执行。</h3><p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.153.150 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>–apiserver-advertise-address</td>
<td>API 服务器所公布的其正在监听的 IP 地址。如果未设置，则使用默认网络接口。</td>
</tr>
<tr>
<td>–image-repository</td>
<td>指定阿里镜像仓库</td>
</tr>
<tr>
<td>–service-cidr string</td>
<td>默认值：”10.96.0.0&#x2F;12”，为服务的虚拟 IP 地址另外指定 IP 地址段</td>
</tr>
<tr>
<td>–pod-network-cidr string</td>
<td>指明 pod 网络可以使用的 IP 地址段。如果设置了这个参数，控制平面将会为每一个节点自动分配 CIDRs。</td>
</tr>
</tbody></table>
</blockquote>
<blockquote>
<p>安装失败重新安装时需要执行<strong>重置命令</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="安装完成提示："><a href="#安装完成提示：" class="headerlink" title="安装完成提示："></a>安装完成提示：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有子节点执行</span></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.0.114:6443 --token nqqgdu.y5avvdw58xn5 \</span><br><span class="line">        --cert-hash sha256:fc82c1d03</span><br></pre></td></tr></table></figure>

<h3 id="配置用户运行kubectl"><a href="#配置用户运行kubectl" class="headerlink" title="配置用户运行kubectl"></a>配置用户运行kubectl</h3><p>使非 root 用户可以运行 kubectl，请运行以下命令， 它们也是 <code>kubeadm init</code> 输出的一部分：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>或者，如果你是 <code>root</code> 用户，则可以运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure>

<h3 id="加入Kubernetes-Node"><a href="#加入Kubernetes-Node" class="headerlink" title="加入Kubernetes Node"></a>加入Kubernetes Node</h3><p>在Node（192.168.153.151、192.168.153.151）执行。</p>
<p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.1.11:6443 --token esce21.q6hetwm8si29qxwn \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:00603a05805807501d7181c3d60b478788408cfe6cedefedb1f97569708be9c5</span><br></pre></td></tr></table></figure>

<p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>

<h3 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>



<h2 id="部署CNI网络插件"><a href="#部署CNI网络插件" class="headerlink" title="部署CNI网络插件"></a>部署CNI网络插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>从官方地址获取到flannel的yaml，在master1上执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> flannel</span><br><span class="line"><span class="built_in">cd</span> flannel</span><br><span class="line">wget -c https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>安装flannel网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml </span><br></pre></td></tr></table></figure>

<p>检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NAME                          READY   STATUS    RESTARTS   AGE<br>kube-flannel-ds-amd64-2pc95   1&#x2F;1     Running   0          72s</p>
</blockquote>
<h2 id="测试kubernetes集群"><a href="#测试kubernetes集群" class="headerlink" title="测试kubernetes集群"></a>测试kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://NodeIP:Port">http://NodeIP:Port</a>  </p>
<h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><p>如果你在集群中使用了一次性服务器进行测试，则可以关闭这些服务器，而无需进一步清理。你可以使用 <code>kubectl config delete-cluster</code> 删除对集群的本地引用。</p>
<p>但是，如果要更干净地取消配置群集， 则应首先<a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#drain">清空节点</a>并确保该节点为空， 然后取消配置该节点。</p>
<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>使用适当的凭证与控制平面节点通信，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</span><br></pre></td></tr></table></figure>

<p>在删除节点之前，请重置 <code>kubeadm</code> 安装的状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure>

<p>重置过程不会重置或清除 iptables 规则或 IPVS 表。如果你希望重置 iptables，则必须手动进行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X</span><br></pre></td></tr></table></figure>

<p>如果要重置 IPVS 表，则必须运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipvsadm -C</span><br></pre></td></tr></table></figure>

<p>现在删除节点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete node &lt;node name&gt;</span><br></pre></td></tr></table></figure>

<p>如果你想重新开始，只需运行 <code>kubeadm init</code> 或 <code>kubeadm join</code> 并加上适当的参数。</p>
<h3 id="清理控制平面"><a href="#清理控制平面" class="headerlink" title="清理控制平面"></a>清理控制平面</h3><p>你可以在控制平面主机上使用 <code>kubeadm reset</code> 来触发尽力而为的清理。</p>
<p>有关此子命令及其选项的更多信息，请参见<a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-reset/"><code>kubeadm reset</code></a>参考文档。</p>
<h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h5 id="ERROR-ImagePull-failed-to-pull-image-registry-aliyuncs-com-x2F-google-containers-x2F-coredns-x2F-coredns-v1-8-0"><a href="#ERROR-ImagePull-failed-to-pull-image-registry-aliyuncs-com-x2F-google-containers-x2F-coredns-x2F-coredns-v1-8-0" class="headerlink" title="[ERROR ImagePull]: failed to pull image registry.aliyuncs.com&#x2F;google_containers&#x2F;coredns&#x2F;coredns:v1.8.0"></a>[ERROR ImagePull]: failed to pull image registry.aliyuncs.com&#x2F;google_containers&#x2F;coredns&#x2F;coredns:v1.8.0</h5><p>在每个节点拉取<code>coredns/coredns:v1.8.0</code>镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull coredns/coredns:1.8.0</span><br></pre></td></tr></table></figure>

<p>重新标记本地镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag coredns/coredns:1.8.0 registry.aliyuncs.com/google_containers/coredns/coredns:v1.8.0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s专题</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>k8s专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装kong</title>
    <url>/ef67b3d6.html</url>
    <content><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull kong</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull postgres:9.6</span><br></pre></td></tr></table></figure>



<h1 id="创建一个-Docker-网络"><a href="#创建一个-Docker-网络" class="headerlink" title="创建一个 Docker 网络"></a>创建一个 Docker 网络</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create kong-net</span><br></pre></td></tr></table></figure>



<h1 id="运行-PostGreSQL-容器"><a href="#运行-PostGreSQL-容器" class="headerlink" title="运行 PostGreSQL 容器"></a>运行 PostGreSQL 容器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">  --network=kong-net \</span><br><span class="line">  -p 5432:5432 \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_USER=kong&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_DB=kong&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_PASSWORD=kong&quot;</span> \</span><br><span class="line">  postgres:9.6</span><br></pre></td></tr></table></figure>



<h1 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> \</span><br><span class="line">  --network=kong-net \</span><br><span class="line">  -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PG_USER=kong&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PG_PASSWORD=kong&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> \</span><br><span class="line">  kong:latest kong migrations bootstrap</span><br></pre></td></tr></table></figure>



<h1 id="启动kong"><a href="#启动kong" class="headerlink" title="启动kong"></a>启动kong</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name kong \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_USER=kong&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PG_PASSWORD=kong&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> \</span><br><span class="line">     -p 8000:8000 \</span><br><span class="line">     -p 8443:8443 \</span><br><span class="line">     -p 127.0.0.1:8001:8001 \</span><br><span class="line">     -p 127.0.0.1:8444:8444 \</span><br><span class="line">     kong:latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>导航到<code>http://localhost:8001/</code></p>
</blockquote>
<h2 id="Kong-默认端口"><a href="#Kong-默认端口" class="headerlink" title="Kong 默认端口"></a>Kong 默认端口</h2><p>默认情况下，Kong 监听以下端口：</p>
<ul>
<li><code>8000</code>：侦听<code>HTTP</code>来自您的客户端的传入流量，并将其转发到您的上游服务。</li>
<li><code>8001</code>: <a href="https://docs.konghq.com/gateway/2.8.x/admin-api">Admin API</a>监听来自命令行的调用<code>HTTP</code>。</li>
<li><code>8443</code>：侦听传入的 HTTPS 流量。此端口具有与 类似的行为<code>8000</code>，只是它只需要<code>HTTPS</code> 流量。可以通过配置文件禁用此端口。</li>
<li><code>8444</code>: <a href="https://docs.konghq.com/gateway/2.8.x/admin-api">Admin API</a>监听<code>HTTPS</code>流量。</li>
</ul>
<h2 id="生命周期命令"><a href="#生命周期命令" class="headerlink" title="生命周期命令"></a>生命周期命令</h2><blockquote>
<p>如果您使用的是 Docker，请<a href="https://docs.docker.com/engine/reference/commandline/exec"><code>exec</code></a>进入 Docker 容器以使用这些命令。</p>
</blockquote>
<p><a href="https://docs.konghq.com/gateway/2.8.x/reference/cli">使用stop</a>命令停止 Kong Gateway ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kong stop</span><br></pre></td></tr></table></figure>



<p><a href="https://docs.konghq.com/gateway/2.8.x/reference/cli">使用reload</a>命令重新加载 Kong Gateway ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kong reload</span><br></pre></td></tr></table></figure>



<p><a href="https://docs.konghq.com/gateway/2.8.x/reference/cli">使用start</a>命令启动 Kong Gateway ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kong start</span><br></pre></td></tr></table></figure>



<h1 id="安装konga"><a href="#安装konga" class="headerlink" title="安装konga"></a>安装konga</h1><h2 id="拉取镜像-1"><a href="#拉取镜像-1" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull pantsel/konga</span><br></pre></td></tr></table></figure>

<h2 id="启动konga"><a href="#启动konga" class="headerlink" title="启动konga"></a>启动konga</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 1337:1337 \</span><br><span class="line">--network kong-net \</span><br><span class="line">-e <span class="string">&quot;TOKEN_SECRET=kongtoken&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;DB_ADAPTER=postgres&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;DB_HOST=kong-database&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;DB_USER=kong&quot;</span>  \</span><br><span class="line">-e <span class="string">&quot;DB_PASSWORD=kong&quot;</span> \</span><br><span class="line"> --name konga \</span><br><span class="line">pantsel/konga</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>访问  ip:1337</p>
</blockquote>
<h3 id="配置kong"><a href="#配置kong" class="headerlink" title="配置kong"></a>配置kong</h3><p>查看kong的访问地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<blockquote>
<p>ip:8001</p>
</blockquote>
]]></content>
      <categories>
        <category>kong</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>kong</tag>
      </tags>
  </entry>
  <entry>
    <title>kong插件开发</title>
    <url>/6e80deb5.html</url>
    <content><![CDATA[<h1 id="插件目录结构"><a href="#插件目录结构" class="headerlink" title="插件目录结构"></a>插件目录结构</h1><h2 id="基本插件模块"><a href="#基本插件模块" class="headerlink" title="基本插件模块"></a>基本插件模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">simple-plugin</span><br><span class="line">├── handler.lua   # 插件的核心，包括请求/连接生命周期，提供接口来实现插件的运行逻辑；</span><br><span class="line">└── schema.lua    # 配置参数定义，定义校验规则以便用户只能输入有效的配置值</span><br></pre></td></tr></table></figure>

<h2 id="高级插件模块"><a href="#高级插件模块" class="headerlink" title="高级插件模块"></a>高级插件模块</h2><p>一些插件可能需要更深入地与 Kong 集成：在数据库中拥有自己的表，在 Admin API 中公开端点等。每一个都可以通过向插件添加新模块来完成。如果插件实现了所有可选模块，那么它的结构如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">complete-plugin</span><br><span class="line">├── api.lua</span><br><span class="line">├── daos.lua</span><br><span class="line">├── handler.lua</span><br><span class="line">├── migrations</span><br><span class="line">│   ├── init.lua</span><br><span class="line">│   └── 000_base_complete_plugin.lua</span><br><span class="line">└── schema.lua</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">模块名称</th>
<th align="left">必需</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">api.lua</td>
<td align="left">否</td>
<td align="left">扩展Admin API，在需要对外暴露接口时候</td>
</tr>
<tr>
<td align="left">daos.lua</td>
<td align="left">否</td>
<td align="left">数据访问层，对插件自定义实体的抽象，并存储在数据存储区中</td>
</tr>
<tr>
<td align="left">handler.lua</td>
<td align="left">是</td>
<td align="left">对外暴露出在请求&#x2F;连接生命周期的接口，由Kong实现逻辑并运行</td>
</tr>
<tr>
<td align="left">migrations&#x2F;*.lua</td>
<td align="left">否</td>
<td align="left">数据库迁移（例如，创建表），仅当插件应用daos.lua进行存储时才需要进行迁移</td>
</tr>
<tr>
<td align="left">schema.lua</td>
<td align="left">是</td>
<td align="left">保留插件配置结构，以便用户只能输入有效的配置值</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>kong</category>
      </categories>
      <tags>
        <tag>kong</tag>
      </tags>
  </entry>
  <entry>
    <title>（四）安装使用MetricsServer</title>
    <url>/d36a8b1c.html</url>
    <content><![CDATA[<h1 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h1><p>从 v1.8 开始，资源使用情况的度量（如容器的 CPU 和内存使用）可以通过 Metrics API 获取。注意：</p>
<ul>
<li>Kubernetes Metrics Server 是 Cluster 的核心监控数据的聚合器，kubeadm 默认是不部署的。</li>
<li>Metrics Server 供 Dashboard 等其他组件使用，是一个扩展的 APIServer，依赖于 API Aggregator。所以，在安装 Metrics Server 之前需要先在 kube-apiserver 中开启 API Aggregator。</li>
<li>Metrics API 只可以查询当前的度量数据，并不保存历史数据</li>
<li>Metrics API URI 为 <code>/apis/metrics.k8s.io/</code>，在 <a href="https://github.com/kubernetes/metrics">k8s.io&#x2F;metrics</a> 维护</li>
<li>必须部署 <code>metrics-server</code> 才能使用该 API，metrics-server 通过调用 Kubelet Summary API 获取数据</li>
</ul>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>1、检查 API Server 是否开启了 Aggregator Routing：查看 API Server 是否具有 –enable-aggregator-routing&#x3D;true 选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep apiserver</span><br></pre></td></tr></table></figure>

<p>2、修改每个 API Server 的 kube-apiserver.yaml 配置开启 Aggregator Routing：修改 manifests 配置后 API Server 会自动重启生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.3</span><span class="string">:6443</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">control-plane</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-apiserver</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--advertise-address=192.168.200.3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--allow-privileged=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--authorization-mode=Node,RBAC</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--client-ca-file=/etc/kubernetes/pki/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-admission-plugins=NodeRestriction</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-bootstrap-token-auth=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-aggregator-routing=true</span>            <span class="comment"># 添加本行</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--etcd-servers=https://127.0.0.1:2379</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--insecure-port=0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-allowed-names=front-proxy-client</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-extra-headers-prefix=X-Remote-Extra-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-group-headers=X-Remote-Group</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-username-headers=X-Remote-User</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--secure-port=6443</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-account-key-file=/etc/kubernetes/pki/sa.pub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-cluster-ip-range=10.96.0.0/12</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--tls-cert-file=/etc/kubernetes/pki/apiserver.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--tls-private-key-file=/etc/kubernetes/pki/apiserver.key</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/kube-apiserver:v1.18.2</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">failureThreshold:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.3</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6443</span></span><br><span class="line">        <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">timeoutSeconds:</span> <span class="number">15</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">250m</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/ssl/certs</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ca-certs</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/pki</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">etc-pki</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">k8s-certs</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">priorityClassName:</span> <span class="string">system-cluster-critical</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/ssl/certs</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ca-certs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/pki</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">etc-pki</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">k8s-certs</span></span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="部署-metrics-server"><a href="#部署-metrics-server" class="headerlink" title="部署 metrics-server"></a>部署 metrics-server</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br></pre></td></tr></table></figure>
</blockquote>
<p>1、下载部署文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>附件中提供了修改好的components.yaml文件，文件名：metrics-server-components.yaml</p>
</blockquote>
<p>2、修改配置（主要修改镜像地址）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP</span>  <span class="comment"># 删掉 ExternalIP,Hostname</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span> <span class="comment"># 添加该启动参数</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">rancher/metrics-server:v0.4.1</span>   <span class="string">--根据自己的需要修改</span></span><br></pre></td></tr></table></figure>

<p>3、部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f components.yaml</span><br></pre></td></tr></table></figure>

<p>4、查看运行情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system get pods -l k8s-app=metrics-server</span><br></pre></td></tr></table></figure>

<p>5、检查 API Server 是否可以连通 Metrics Server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># kubectl describe svc metrics-server -n kube-system</span></span><br><span class="line">Name:              metrics-server</span><br><span class="line">Namespace:         kube-system</span><br><span class="line">Labels:            kubernetes.io/cluster-service=<span class="literal">true</span></span><br><span class="line">                   kubernetes.io/name=Metrics-server</span><br><span class="line">Annotations:       Selector:  k8s-app=metrics-server</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.107.86.150</span><br><span class="line">Port:              &lt;<span class="built_in">unset</span>&gt;  443/TCP</span><br><span class="line">TargetPort:        main-port/TCP</span><br><span class="line">Endpoints:         10.244.2.20:4443</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在其他几个节点ping一下Endpoints的地址</span></span><br><span class="line">[root@master3 ~]<span class="comment"># ping 10.244.2.20</span></span><br><span class="line">PING 10.244.2.20 (10.244.2.20) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.244.2.20: icmp_seq=1 ttl=64 time=0.122 ms</span><br><span class="line">64 bytes from 10.244.2.20: icmp_seq=2 ttl=64 time=0.032 ms</span><br></pre></td></tr></table></figure>

<p>6、执行以下命令，检查节点占用性能情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># kubectl top nodes</span></span><br><span class="line">NAME      CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">master1   223m         5%     1433Mi          52%       </span><br><span class="line">master2   148m         3%     972Mi           35%       </span><br><span class="line">master3   183m         4%     1123Mi          41%       </span><br><span class="line">node1     225m         5%     1389Mi          50%      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@master1 ~]<span class="comment"># kubectl top pods</span></span><br><span class="line">NAME                                      CPU(cores)   MEMORY(bytes)   </span><br><span class="line">details-v1-6fc55d65c9-l97cs               4m           36Mi            </span><br><span class="line">nfs-client-provisioner-6d4469b5b5-ndg5x   4m           20Mi            </span><br><span class="line">productpage-v1-9cf6c76b5-hc2nr            10m          71Mi            </span><br><span class="line">ratings-v1-6f855c5fff-v9ht2               3m           28Mi            </span><br><span class="line">reviews-v1-697f45b7dd-w9fgc               7m           117Mi           </span><br><span class="line">reviews-v2-8c85b467b-jgx6w                6m           113Mi           </span><br><span class="line">reviews-v3-76ccf79776-74vz6               5m           117Mi    </span><br></pre></td></tr></table></figure>

<p>参考文档：<a href="https://www.cnblogs.com/lfl17718347843/p/14283796.html">https://www.cnblogs.com/lfl17718347843/p/14283796.html</a></p>
]]></content>
      <categories>
        <category>k8s专题</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>k8s专题</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu使用国内源</title>
    <url>/dfbf49be.html</url>
    <content><![CDATA[<p>参考：<a href="http://mirrors.ustc.edu.cn/help/ubuntu.html">http://mirrors.ustc.edu.cn/help/ubuntu.html</a></p>
<p>编辑配置文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>20.04配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码仓库，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>

<p>更新索引以生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>（二）安装Istio</title>
    <url>/3e2a19d2.html</url>
    <content><![CDATA[<h1 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装istio</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Istio 解决了开发人员和运维人员所面临的从单体应用向分布式微服务架构转变的挑战。了解它是如何做到这一点的可以让我们更详细地理解 Istio 的服务网格。</p>
<p>术语<strong>服务网格</strong>用来描述组成这些应用程序的微服务网络以及它们之间的交互。随着服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理。它的需求包括服务发现、负载均衡、故障恢复、度量和监控等。服务网格通常还有更复杂的运维需求，比如 A&#x2F;B 测试、金丝雀发布、速率限制、访问控制和端到端认证。</p>
<p>Istio 提供了对整个服务网格的行为洞察和操作控制的能力，以及一个完整的满足微服务应用各种需求的解决方案。</p>
<p>参考：<a href="https://istio.io/latest/zh/docs/setup/getting-started">https://istio.io/latest/zh/docs/setup/getting-started</a></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol>
<li><p>访问 <a href="https://github.com/istio/istio/releases/tag/1.8.0">Istio release</a> 页面下载与您操作系统对应的安装文件。在 macOS 或 Linux 系统中，也可以通过以下命令下载最新版本的 Istio：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://istio.io/downloadIstio | sh -</span><br></pre></td></tr></table></figure>


</li>
<li><p>切换到 Istio 包所在目录下。例如：Istio 包名为 <code>istio-1.8.0</code>，则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> istio-1.8.0</span><br></pre></td></tr></table></figure>



<p>安装目录包含如下内容：</p>
<ul>
<li><code>install/kubernetes</code> 目录下，有 Kubernetes 相关的 YAML 安装文件</li>
<li><code>samples/</code> 目录下，有示例应用程序</li>
<li><code>bin/</code> 目录下，包含 <a href="https://istio.io/latest/zh/docs/reference/commands/istioctl"><code>istioctl</code></a> 的客户端文件。<code>istioctl</code> 工具用于手动注入 Envoy sidecar 代理。</li>
</ul>
</li>
<li><p>将 <code>istioctl</code> 客户端路径增加到 path 环境变量中，macOS 或 Linux 系统的增加方式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PWD</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装-Istio-使用默认配置文件"><a href="#安装-Istio-使用默认配置文件" class="headerlink" title="安装 Istio-使用默认配置文件"></a>安装 Istio-使用默认配置文件</h2><p>最简单的选择是安装 <code>default</code> Istio <a href="https://istio.io/latest/zh/docs/setup/additional-setup/config-profiles/">配置文件</a>使用以下命令：</p>
<p><strong>1.8以下版本执行：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istioctl manifest apply</span><br></pre></td></tr></table></figure>

<p><strong>1.8版本执行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istioctl install</span><br></pre></td></tr></table></figure>

<p>包含demo的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istioctl install --<span class="built_in">set</span> profile=demo -y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>遇到的坑：</p>
<ol>
<li><p>Error: Get “<a href="http://localhost:8080/api?timeout=32s&quot;">http://localhost:8080/api?timeout=32s&quot;</a>: dial tcp 127.0.0.1:8080: connect: connection refused</p>
<p>解决方法（原因是在安装k8s的时候用户不同，存在普通用户和root用户的区别）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h3 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h3><p>该<code>istioctl</code>命令将<code>IstioOperator</code>用于安装Istio的CR保存在名为的CR的副本中<code>installed-state</code>。例如，无需检查Istio安装的部署，pod，服务和其他资源，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl -n istio-system get deploy</span><br><span class="line"></span><br><span class="line">NAME                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">istio-ingressgateway   1/1     1            1           49m</span><br><span class="line">istiod                 1/1     1            1           49m</span><br></pre></td></tr></table></figure>

<h3 id="给命名空间添加标签，指示-Istio-在部署应用的时候，自动的注入-Envoy-边车代理："><a href="#给命名空间添加标签，指示-Istio-在部署应用的时候，自动的注入-Envoy-边车代理：" class="headerlink" title="给命名空间添加标签，指示 Istio 在部署应用的时候，自动的注入 Envoy 边车代理："></a>给命名空间添加标签，指示 Istio 在部署应用的时候，自动的注入 Envoy 边车代理：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl label namespace default istio-injection=enabled</span><br></pre></td></tr></table></figure>



<h1 id="部署示例应用"><a href="#部署示例应用" class="headerlink" title="部署示例应用"></a>部署示例应用</h1><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line">kubectl get services</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> <span class="string">&quot;<span class="subst">$(kubectl get pod -l app=ratings -o jsonpath=&#x27;&#123;.items[0].metadata.name&#125;&#x27;)</span>&quot;</span> -c ratings -- curl -s productpage:9080/productpage | grep -o <span class="string">&quot;&lt;title&gt;.*&lt;/title&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出：<code>&lt;title&gt;Simple Bookstore App&lt;/title&gt;</code></p>
</blockquote>
<h1 id="对外开发应用访问"><a href="#对外开发应用访问" class="headerlink" title="对外开发应用访问"></a>对外开发应用访问</h1><ol>
<li><p>把应用关联到 Istio 网关：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>gateway.networking.istio.io&#x2F;bookinfo-gateway created<br>virtualservice.networking.istio.io&#x2F;bookinfo created</p>
</blockquote>
</li>
<li><p>确保配置文件没有问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istioctl analyze</span><br></pre></td></tr></table></figure>

<blockquote>
<p>✔ No validation issues found when analyzing namespace: default.</p>
</blockquote>
</li>
</ol>
<h1 id="查看仪表盘"><a href="#查看仪表盘" class="headerlink" title="查看仪表盘"></a>查看仪表盘</h1><p>Istio 和<a href="https://istio.io/latest/zh/docs/ops/integrations">几个</a>遥测应用做了集成。 遥测能帮你了解服务网格的结构、展示网络的拓扑结构、分析网格的健康状态。</p>
<p>使用下面说明部署 <a href="https://istio.io/latest/zh/docs/ops/integrations/kiali/">Kiali</a> 仪表板、 以及 <a href="https://istio.io/latest/zh/docs/ops/integrations/prometheus/">Prometheus</a>、 <a href="https://istio.io/latest/zh/docs/ops/integrations/grafana">Grafana</a>、 还有 <a href="https://istio.io/latest/zh/docs/ops/integrations/jaeger/">Jaeger</a></p>
<ol>
<li><p>安装 <a href="https://github.com/istio/istio/tree/release-1.10/samples/addons">Kiali 和其他插件</a>，等待部署完成。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f samples/addons</span><br><span class="line">kubectl rollout status deployment/kiali -n istio-system</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Waiting for deployment “kiali” rollout to finish: 0 of 1 updated replicas are available…<br>deployment “kiali” successfully rolled out</p>
</blockquote>
<p><strong>如果在安装插件时出错，再运行一次命令。 有一些和时间相关的问题，再运行就能解决。</strong></p>
</li>
<li><p>访问 Kiali 仪表板。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">istioctl dashboard kiali</span><br></pre></td></tr></table></figure>


</li>
<li><p>在左侧的导航菜单，选择 <em>Graph</em> ，然后在 <em>Namespace</em> 下拉列表中，选择 <em>default</em> 。</p>
<p>Kiali 仪表板展示了网格的概览、以及 <code>Bookinfo</code> 示例应用的各个服务之间的关系。 它还提供过滤器来可视化流量的流动。</p>
</li>
</ol>
<h2 id="开启kiali外部直接访问"><a href="#开启kiali外部直接访问" class="headerlink" title="开启kiali外部直接访问"></a>开启kiali外部直接访问</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch svc -n istio-system kiali -p <span class="string">&#x27;&#123;&quot;spec&quot;: &#123;&quot;type&quot;: &quot;NodePort&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s专题</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>k8s专题</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装FTP服务器</title>
    <url>/8d8c340b.html</url>
    <content><![CDATA[<h4 id="安装FTP服务器"><a href="#安装FTP服务器" class="headerlink" title="安装FTP服务器"></a>安装FTP服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>


<h4 id="解决文件不能上传问题"><a href="#解决文件不能上传问题" class="headerlink" title="解决文件不能上传问题"></a>解决文件不能上传问题</h4><ol>
<li>打开配置文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>根据需要启用下面配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许用户上传数据</span></span><br><span class="line">write_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否让匿名用户具有上传数据的功能</span></span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否让匿名用户具有建立目录的权限</span></span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>保存并退出，然后重启服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service vsftpd restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装最新版nodejs</title>
    <url>/206568fa.html</url>
    <content><![CDATA[<h1 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>



<h1 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure>



<h1 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install n -g</span><br></pre></td></tr></table></figure>

<blockquote>
<p>n模块是用来安装各个版本的node的一个工具，参数-g，表示全局安装</p>
</blockquote>
<h2 id="安装最新长期支持版node"><a href="#安装最新长期支持版node" class="headerlink" title="安装最新长期支持版node"></a>安装最新长期支持版node</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo n lts</span><br></pre></td></tr></table></figure>



<h2 id="检查安装是否成功"><a href="#检查安装是否成功" class="headerlink" title="检查安装是否成功"></a>检查安装是否成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>



<h2 id="版本之间的切换"><a href="#版本之间的切换" class="headerlink" title="版本之间的切换"></a>版本之间的切换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo n use [版本]</span><br></pre></td></tr></table></figure>



<h1 id="常用的一些指令"><a href="#常用的一些指令" class="headerlink" title="常用的一些指令"></a>常用的一些指令</h1><ul>
<li>升级到最新稳定版</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n stable</span><br></pre></td></tr></table></figure>

<ul>
<li>升级到最新版</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n lastest</span><br></pre></td></tr></table></figure>

<ul>
<li>升级到定制版</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n v7.10.0</span><br></pre></td></tr></table></figure>

<ul>
<li>切换使用版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n 7.10.0</span><br></pre></td></tr></table></figure>

<ul>
<li>删除指定版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n <span class="built_in">rm</span> 7.10.0</span><br></pre></td></tr></table></figure>

<ul>
<li>用指定版本执行脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n use 7.10.0  some.js</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装配置PPTP VPN</title>
    <url>/f308267.html</url>
    <content><![CDATA[<h1 id="PPTP简介"><a href="#PPTP简介" class="headerlink" title="PPTP简介"></a>PPTP简介</h1><p>点对点隧道协议（PPTP）是VPN服务的一种最简单的实现协议，其它常见的VPN类型还有：使用IPsec的第2层隧道协议（L2TP&#x2F;IPsec）、安全套接字隧道协议（SSL VPN）。</p>
<blockquote>
<p>PPTP使用<strong>1723</strong>端口。</p>
<p>PPTP使用的网络，客户端必须能够ping通！！！</p>
</blockquote>
<h1 id="安装pptp服务"><a href="#安装pptp服务" class="headerlink" title="安装pptp服务"></a>安装pptp服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install pptpd</span><br></pre></td></tr></table></figure>

<h1 id="配置pptpd"><a href="#配置pptpd" class="headerlink" title="配置pptpd"></a>配置pptpd</h1><h2 id="配置pptpd-conf"><a href="#配置pptpd-conf" class="headerlink" title="配置pptpd.conf"></a>配置pptpd.conf</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pptpd.conf</span><br></pre></td></tr></table></figure>

<p>配置以下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debug										<span class="comment">#启用调试模式</span></span><br><span class="line"></span><br><span class="line">localip 192.168.0.1							<span class="comment">#VPN服务器的虚拟ip</span></span><br><span class="line">remoteip 192.168.0.234-238,192.168.0.245	<span class="comment">#分配给VPN客户端的虚拟ip</span></span><br></pre></td></tr></table></figure>

<h2 id="配置ms-dns"><a href="#配置ms-dns" class="headerlink" title="配置ms-dns"></a>配置ms-dns</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/pptpd-options</span><br></pre></td></tr></table></figure>

<p>配置以下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ms-dns 8.8.8.8</span><br><span class="line">ms-dns 101.198.198.198</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果是云服务器，可以设置为云服务器DNS。如：阿里云的公共DNS</p>
</blockquote>
<h2 id="设置pptpd的用户名和密码"><a href="#设置pptpd的用户名和密码" class="headerlink" title="设置pptpd的用户名和密码"></a>设置pptpd的用户名和密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Secrets for authentication using CHAP</span></span><br><span class="line"><span class="comment"># client        server  secret                  IP addresses</span></span><br><span class="line"><span class="built_in">test</span>            pptpd   1234                        *</span><br><span class="line">test1             *     123456                      *</span><br></pre></td></tr></table></figure>

<h2 id="配置网络和路由规则-设置ipv4转发"><a href="#配置网络和路由规则-设置ipv4转发" class="headerlink" title="配置网络和路由规则 设置ipv4转发"></a>配置网络和路由规则 设置ipv4转发</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>修改net.ipv4.ip_forward &#x3D; 1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>

<p>执行参数生效命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>

<h2 id="设置iptables-NAT转发"><a href="#设置iptables-NAT转发" class="headerlink" title="设置iptables NAT转发"></a>设置iptables NAT转发</h2><p>添加iptables转发规则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o enp3s0 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p>添加NAT转发规则，*为云服务器的公网IP地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/255.255.255.0 -j SNAT --to-source *</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o enp3s0 -j SNAT --to-source xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-o：指定网卡，这里使用的是enp3s0网卡。</p>
<p>xxx.xxx.xxx.xxx：公网IP或者宿主机能ping通的虚拟机IP(使用虚拟机的情况)。</p>
</blockquote>
<h2 id="设置最大传输单元MTU（可选）"><a href="#设置最大传输单元MTU（可选）" class="headerlink" title="设置最大传输单元MTU（可选）"></a>设置最大传输单元MTU（可选）</h2><p>可以不设置，当包过大时设置，mtu根据需要配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig enp3s0 mtu 65520</span><br></pre></td></tr></table></figure>

<h2 id="重启PPTPD服务"><a href="#重启PPTPD服务" class="headerlink" title="重启PPTPD服务"></a>重启PPTPD服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service pptpd restart</span><br></pre></td></tr></table></figure>



<h1 id="pptd客户端配置"><a href="#pptd客户端配置" class="headerlink" title="pptd客户端配置"></a>pptd客户端配置</h1><h2 id="win10配置"><a href="#win10配置" class="headerlink" title="win10配置"></a>win10配置</h2><ul>
<li>进入 win10 [设置] - 点击 [网络和 Internet]</li>
<li>在 [VPN] 选项 - 点击 [添加 VPN 连接]</li>
<li>弹出 [添加 VPN 连接] 界面后，在 [服务器名称或地址] 中填上 VPN连接地址， [VPN 类型] -选 [点对点隧道协议(PPTP)]，[用户名] 及 [密码] 填上，完成后，点击 [保存]</li>
<li>返回 [VPN] 选项界面后，点击 [连接]</li>
<li>若连接失败，可在[设备管理][网络适配器]中删除WAN Miniport(IP,IPV6,PPTP),然后刷新设备重连</li>
</ul>
<h2 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h2><ul>
<li>[VPN]设置菜单选择[PPTP客户端]</li>
<li>填入pptp服务器IP，用户名和密码，勾选MPPE验证，保存即可连入VPN</li>
<li>路由器设置DMZ，透传网关下的子设备，使其通过路由器连入VPN</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu搭建vue开发环境</title>
    <url>/a18baf77.html</url>
    <content><![CDATA[<h2 id="1-更新软件源"><a href="#1-更新软件源" class="headerlink" title="1. 更新软件源"></a>1. 更新软件源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<h2 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure>

<p>查看版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nodejs -v</span><br></pre></td></tr></table></figure>

<h2 id="3-安装npm"><a href="#3-安装npm" class="headerlink" title="3. 安装npm"></a>3. 安装npm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure>

<p>查看版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h2 id="4-安装cnpm（淘宝npm镜像）"><a href="#4-安装cnpm（淘宝npm镜像）" class="headerlink" title="4. 安装cnpm（淘宝npm镜像）"></a>4. 安装cnpm（淘宝npm镜像）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>查看版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>

<h2 id="5-vue脚手架安装"><a href="#5-vue脚手架安装" class="headerlink" title="5. vue脚手架安装"></a>5. vue脚手架安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>查看版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure>

<blockquote>
<p>备选安装</p>
</blockquote>
<h2 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://dl.yarnpkg.com/debian/ stable main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/yarn.list</span><br></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install yarn</span><br></pre></td></tr></table></figure>

<p>查看版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu设置开启自启</title>
    <url>/f8f6cca9.html</url>
    <content><![CDATA[<p><strong>注意：</strong></p>
<blockquote>
<p>ubuntu18 不能像 ubuntu16 一样通过编辑 rc.local 来设置开机启动脚本，需要通过下列简单设置后，以使 rc.local 重新发挥作用。</p>
<p>Ubuntu 16.10开始不再使用 <code>initd</code> 管理系统，改用 <code>systemd</code>，包括用 <code>systemctl</code> 命令来替换了 <code>service</code> 和 <code>chkconfig</code> 的功能。比如以前启动 <code>mysql</code> 服务用<code>sudo service mysql start</code>，现在用 <code>sudo systemctl start mysqld.service</code>。<code>systemd</code> 默认读取 <code>/etc/systemd/system</code> 下的配置文件，该目录下的文件会链接 <code>/lib/systemd/system/</code> 下的文件。</p>
</blockquote>
<h2 id="修改rc-local-service"><a href="#修改rc-local-service" class="headerlink" title="修改rc-local.service"></a>修改rc-local.service</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure>

<p>一般启动文件需要三个组成部分：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[Unit]段: 启动顺序与依赖关系</span><br><span class="line">[Service] 段: 启动行为,如何启动，启动类型</span><br><span class="line">[Install] 段: 定义如何安装这个配置文件，即怎样做到开机启动</span><br></pre></td></tr></table></figure>

<p>上面少了 <code>[Install]</code> 段，把下面 <code>Install</code> 段添上去，加入到 <code>rc-local.service</code> 的最后：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Install]  </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=rc-local.service</span><br></pre></td></tr></table></figure>

<h2 id="创建-x2F-etc-x2F-rc-local"><a href="#创建-x2F-etc-x2F-rc-local" class="headerlink" title="创建&#x2F;etc&#x2F;rc.local"></a>创建&#x2F;etc&#x2F;rc.local</h2><p>ubuntu-18.04以后 默认是没有 &#x2F;etc&#x2F;rc.local 这个文件的，需要自己创建 ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh -e</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># rc.local</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script is executed at the end of each multiuser runlevel.</span></span><br><span class="line"><span class="comment"># Make sure that the script will &quot;exit 0&quot; on success or any other</span></span><br><span class="line"><span class="comment"># value on error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to enable or disable this script just change the execution</span></span><br><span class="line"><span class="comment"># bits.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default this script does nothing.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;看到这行字，说明添加自启动脚本成功&quot;</span> &gt; /usr/local/test.log</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>然后给 <code>rc.local</code> 文件赋予可执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 755 /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>启动服务并检查服务状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> rc-local</span><br><span class="line">sudo systemctl start rc-local.service</span><br><span class="line">sudo systemctl status rc-local.service</span><br></pre></td></tr></table></figure>

<p>重启后查看是否有 <code>test.log</code> 生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /usr/local/test.log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>看到这行字，说明添加自启动脚本成功</p>
</blockquote>
<p>如果看到如上的内容，就说明已经配置成功了，然后你可以进一步修改你的 <code>rc.local</code> 中的自启动脚本改成你所想要的启动脚本。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu配置虚拟内存</title>
    <url>/167042be.html</url>
    <content><![CDATA[<h1 id="创建虚拟内存配置文件"><a href="#创建虚拟内存配置文件" class="headerlink" title="创建虚拟内存配置文件"></a>创建虚拟内存配置文件</h1><ol>
<li><p>创建一个存放swap的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> swap</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> swap</span><br></pre></td></tr></table></figure>


</li>
<li><p>创建交换文件，因为要分配硬盘空间，所以有可能比较慢，等待一会。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=swapfile count=2048 bs=1M</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>count&#x3D;2048</strong> 表示创建 2G 的虚拟内存，因为这里用到的单位是 <code>M</code>，如果要创建 6G 虚拟内存，则把2048 改成 6144 即可，因为 1024 * 6 &#x3D; 6144。</p>
<p>可以使用 <code>ls / | grep swapfile</code> 命令查看一下，确保交换文件存在，创建成功。</p>
</blockquote>
</li>
</ol>
<h1 id="激活swap文件"><a href="#激活swap文件" class="headerlink" title="激活swap文件"></a>激活swap文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 600 swapfile</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkswap swapfile</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行成功后，控制台输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">正在设置交换空间版本 1，大小 = 2 GiB (2147483648  个字节)</span><br><span class="line">无标签， UUID=1709a8d7-1920-4d29-9fee-cb0b0901ce5c</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="开启swap"><a href="#开启swap" class="headerlink" title="开启swap"></a>开启swap</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapon swapfile</span><br></pre></td></tr></table></figure>



<h1 id="swap开机自启"><a href="#swap开机自启" class="headerlink" title="swap开机自启"></a>swap开机自启</h1><p>使用编辑器编辑 <strong>&#x2F;etc&#x2F;fstab</strong> 文件，文件尾添加 Swap 自动开启的配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">swapfilepath none swap sw 0 0</span><br></pre></td></tr></table></figure>



<p><em><strong>例如：</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br></pre></td></tr></table></figure>

<p>在 fstab 文件最后一行添加下面的内容：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">/root/swap/swapfile none swap sw 0 0</span><br></pre></td></tr></table></figure>

<p>然后保存，退出。</p>
<h1 id="查看虚拟内存"><a href="#查看虚拟内存" class="headerlink" title="查看虚拟内存"></a>查看虚拟内存</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure>



<h1 id="卸载swap"><a href="#卸载swap" class="headerlink" title="卸载swap"></a>卸载swap</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapoff swapfile</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu配置静态ip</title>
    <url>/826ffa7.html</url>
    <content><![CDATA[<p>Ubuntu从17.10开始，放弃在&#x2F;etc&#x2F;network&#x2F;interfaces里面配置IP，改为在&#x2F;etc&#x2F;netplan&#x2F;XX-installer-config.yaml的yaml文件中配置IP地址。</p>
<h3 id="查看网络配置信息"><a href="#查看网络配置信息" class="headerlink" title="查看网络配置信息"></a>查看网络配置信息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/22769008-ee3032bb8dc20e6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IP配置信息"></p>
<p>或者使用nmcli 查看，需要执行安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install network-manager</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nmcli device show ens33</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/22769008-801e3ee8e7053351.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网络配置信息"></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>使用熟悉的编辑器打开 &#x2F;etc&#x2F;netplan&#x2F;  下面的yaml配置文件，我的是00-installer-config.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim  /etc/netplan/00-installer-config.yaml</span><br></pre></td></tr></table></figure>
<p>根据自己的需要配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:   # 配置的网卡的名称</span><br><span class="line">      addresses: [192.168.253.133/24]   # 配置的静态ip地址和掩码</span><br><span class="line">      dhcp4: false   # 关闭dhcp4</span><br><span class="line">      optional: true</span><br><span class="line">      gateway4: 192.168.253.2 # 网关地址</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [192.168.253.2,114.114.114.114]  # DNS服务器地址，多个DNS服务器地址需要用英文逗号分隔开，可不配置</span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure>
<h3 id="使配置生效"><a href="#使配置生效" class="headerlink" title="使配置生效"></a>使配置生效</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure>
<p>至此Ubuntu静态IP配置完成。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建nfs服务</title>
    <url>/26c8bdb0.html</url>
    <content><![CDATA[<h2 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h2><h3 id="安装nfs服务"><a href="#安装nfs服务" class="headerlink" title="安装nfs服务"></a><strong>安装nfs服务</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nfs-common nfs-kernel-server </span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a><strong>修改配置文件</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/exports</span><br></pre></td></tr></table></figure>

<p>添加下面内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/jack/data *(rw,<span class="built_in">sync</span>,no_root_squash)</span><br></pre></td></tr></table></figure>

<p>各段表达的意思如下，根据实际进行修改</p>
<blockquote>
<p>&#x2F;home&#x2F;jack&#x2F;data    共享的目录</p>
<p>指定哪些用户可以访问</p>
<p>ro：只读</p>
<p>rw：读写</p>
<p>sync：同步</p>
<p>no_root_squash:  不降低root用户的权限</p>
</blockquote>
<h3 id="将共享目录设置777权限（k8s使用）"><a href="#将共享目录设置777权限（k8s使用）" class="headerlink" title="将共享目录设置777权限（k8s使用）"></a>将共享目录设置777权限（k8s使用）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /home/jack/data</span><br></pre></td></tr></table></figure>

<h3 id="重启nfs服务"><a href="#重启nfs服务" class="headerlink" title="重启nfs服务"></a><strong>重启nfs服务</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service nfs-kernel-server restart</span><br></pre></td></tr></table></figure>

<p>到此，nfs的服务就搭建好了。</p>
<h2 id="客户端访问服务器"><a href="#客户端访问服务器" class="headerlink" title="客户端访问服务器"></a>客户端访问服务器</h2><h3 id="安装nfs-common"><a href="#安装nfs-common" class="headerlink" title="安装nfs-common"></a>安装nfs-common</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nfs-common</span><br></pre></td></tr></table></figure>

<h3 id="检查客户端和服务端的网络是否连通（ping命令）"><a href="#检查客户端和服务端的网络是否连通（ping命令）" class="headerlink" title="检查客户端和服务端的网络是否连通（ping命令）"></a><strong>检查客户端和服务端的网络是否连通（ping命令）</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping + 主机IP</span><br></pre></td></tr></table></figure>

<h3 id="查看服务端的共享目录"><a href="#查看服务端的共享目录" class="headerlink" title="查看服务端的共享目录"></a><strong>查看服务端的共享目录</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">showmount -e 主机IP</span><br></pre></td></tr></table></figure>

<h3 id="将该目录挂载到本地"><a href="#将该目录挂载到本地" class="headerlink" title="将该目录挂载到本地"></a><strong>将该目录挂载到本地</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount -t nfs 主机IP:共享目录 /mnt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务器路径     本地路径</p>
</blockquote>
<p>挂载成功后，在客户端上面的目录中新建一个文件，然后我们观察下 nfs 服务端的共享目录下面是否也会出现该文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> test.txt</span><br></pre></td></tr></table></figure>

<p>如果客户端出现了 test.txt 的文件，那么证明我们的 nfs 挂载成功了。</p>
<h3 id="卸载挂载目录"><a href="#卸载挂载目录" class="headerlink" title="卸载挂载目录"></a>卸载挂载目录</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo umount 本地路径</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>远程桌面工具xrdp</title>
    <url>/2e70d4d3.html</url>
    <content><![CDATA[<h3 id="安装XRDP远程桌面工具"><a href="#安装XRDP远程桌面工具" class="headerlink" title="安装XRDP远程桌面工具"></a>安装XRDP远程桌面工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install xrdp</span><br></pre></td></tr></table></figure>

<h3 id="添加用户到ssl-cert组"><a href="#添加用户到ssl-cert组" class="headerlink" title="添加用户到ssl-cert组"></a>添加用户到ssl-cert组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG ssl-cert <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<h3 id="使用远程桌面连接"><a href="#使用远程桌面连接" class="headerlink" title="使用远程桌面连接"></a>使用远程桌面连接</h3><h3 id="解决连接后黑屏问题"><a href="#解决连接后黑屏问题" class="headerlink" title="解决连接后黑屏问题"></a>解决连接后黑屏问题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/xrdp/startwm.sh</span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> DBUS_SESSION_BUS_ADDRESS</span><br><span class="line"><span class="built_in">unset</span> XDG_RUNTIME_DIR</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -x /etc/X11/Xsession &amp;&amp; <span class="built_in">exec</span> /etc/X11/Xsession</span><br><span class="line"><span class="built_in">exec</span> /bin/sh /etc/X11/Xsession</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装helm</title>
    <url>/bc01c4d5.html</url>
    <content><![CDATA[<ol>
<li><p>官方文档</p>
<blockquote>
<p><a href="https://helm.sh/docs/intro/install/">https://helm.sh/docs/intro/install/</a></p>
</blockquote>
</li>
<li><p>Ubuntu安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -</span><br><span class="line">sudo apt-get install apt-transport-https --<span class="built_in">yes</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://baltocdn.com/helm/stable/debian/ all main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/helm-stable-debian.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install helm</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>maven常用命令</title>
    <url>/f340b1b8.html</url>
    <content><![CDATA[<h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><p>maven 命令的格式为 mvn [plugin-name]:[goal-name]，可以接受的参数如下，</p>
<blockquote>
<ul>
<li><p>-D 指定参数，如 -Dmaven.test.skip&#x3D;true 跳过单元测试；</p>
</li>
<li><p>-P 指定 Profile 配置，可以用于区分环境；</p>
</li>
<li><p>-e 显示maven运行出错的信息；</p>
</li>
<li><p>-o 离线执行命令,即不去远程仓库更新包；</p>
</li>
<li><p>-X 显示maven允许的debug信息；</p>
</li>
<li><p>-U 强制去远程更新snapshot的插件或依赖，默认每天只更新一次。</p>
</li>
</ul>
</blockquote>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li>清理项目：mvn clean</li>
<li>运行测试：mvn test</li>
<li>安装jar包到本地仓库中：mvn install</li>
<li>打包：mvn package</li>
<li>编译：mvn compile</li>
<li>发布：mvn:deploy</li>
<li>-DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target&#x2F;test-classes下。</li>
<li>-Dmaven.test.skip&#x3D;true，不执行测试用例，也不编译测试用例类。</li>
</ul>
<h3 id="常用组合命令"><a href="#常用组合命令" class="headerlink" title="常用组合命令"></a>常用组合命令</h3><p>打包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>发布：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean deploy -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">F:\JDK\bin\java.exe -Dmaven.multiModuleProjectDirectory=H:\code\iotcore-service -Dmaven.home=F:\software\apache-maven-3.8.4 -Dclassworlds.conf=F:\software\apache-maven-3.8.4\bin\m2.conf <span class="string">&quot;-Dmaven.ext.class.path=F:\software\IDEA\IntelliJ IDEA 2021.2.1\plugins\maven\lib\maven-event-listener.jar&quot;</span> <span class="string">&quot;-javaagent:F:\software\IDEA\IntelliJ IDEA 2021.2.1\lib\idea_rt.jar=52557:F:\software\IDEA\IntelliJ IDEA 2021.2.1\bin&quot;</span> -Dfile.encoding=UTF-8 -classpath F:\software\apache-maven-3.8.4\boot\plexus-classworlds-2.6.0.jar;F:\software\apache-maven-3.8.4\boot\plexus-classworlds.license org.codehaus.classworlds.Launcher -Didea.version=2021.2.1 -s F:\software\apache-maven-3.8.4\conf\settings.xml -Dmaven.repo.local=F:\software\apache-maven-3.8.4\response -DskipTests=<span class="literal">true</span> deploy</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven配置使用私服nexus</title>
    <url>/5627283c.html</url>
    <content><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="基础说明"><a href="#基础说明" class="headerlink" title="基础说明"></a>基础说明</h2><h3 id="常用默认仓库说明"><a href="#常用默认仓库说明" class="headerlink" title="常用默认仓库说明"></a>常用默认仓库说明</h3><ol>
<li><p>maven-central：maven中央库</p>
<p>默认从<a href="https://link.zhihu.com/?target=https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a>拉取jar。</p>
</li>
<li><p>maven-releases：发行版本</p>
<p>私库发行版jar，初次安装请将Deployment policy设置为Allow redeploy。</p>
</li>
<li><p>maven-snapshots：快照版本</p>
</li>
<li><p>maven-public：仓库分组，把上面三个仓库组合在一起对外提供服务，在本地maven基础配置settings.xml或项目pom.xml中使用。</p>
</li>
</ol>
<h3 id="仓库类型"><a href="#仓库类型" class="headerlink" title="仓库类型"></a>仓库类型</h3><ul>
<li><p>Group：这是一个仓库聚合的概念，用户仓库地址选择Group的地址，即可访问Group中配置的，用于方便开发人员自己设定的仓库。</p>
</li>
<li><p>maven-public就是一个Group类型的仓库，内部设置了多个仓库，访问顺序取决于配置顺序，3.x默认Releases，Snapshots， Central，当然你也可以自己设置。 </p>
</li>
<li><p>Hosted：私有仓库，内部项目的发布仓库，专门用来存储我们自己生成的jar文件</p>
</li>
<li><p>Snapshots：本地项目的快照仓库</p>
</li>
<li><p>Releases： 本地项目发布的正式版本</p>
</li>
<li><p>Proxy：代理类型，从远程中央仓库中寻找数据的仓库（可以点击对应的仓库的Configuration页签下Remote Storage属性的值即被代理的远程仓库的路径），如可配置阿里云maven仓库 </p>
</li>
<li><p>Central：中央仓库</p>
</li>
</ul>
<h2 id="增加新的代理源"><a href="#增加新的代理源" class="headerlink" title="增加新的代理源"></a>增加新的代理源</h2><h3 id="新增代理源"><a href="#新增代理源" class="headerlink" title="新增代理源"></a>新增代理源</h3><p><img src="/../../images/maven/nexus/1.png" alt="1"></p>
<h3 id="选择maven2代理"><a href="#选择maven2代理" class="headerlink" title="选择maven2代理"></a>选择maven2代理</h3><p><img src="/../../images/maven/nexus/2.png" alt="1"></p>
<h3 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h3><p><img src="/../../images/maven/nexus/3.png" alt="1"></p>
<p><img src="/../../images/maven/nexus/4.png" alt="1"></p>
<blockquote>
<p>Cache可以设置为200天 288000</p>
</blockquote>
<h3 id="设置maven-public-将这些代理加入Group"><a href="#设置maven-public-将这些代理加入Group" class="headerlink" title="设置maven-public 将这些代理加入Group"></a>设置maven-public 将这些代理加入Group</h3><p><img src="/../../images/maven/nexus/5.png" alt="1"></p>
<blockquote>
<p>常用代理</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1. aliyun</span><br><span class="line">http://maven.aliyun.com/nexus/content/groups/public</span><br><span class="line">2. apache_snapshot</span><br><span class="line">https://repository.apache.org/content/repositories/snapshots/</span><br><span class="line">3. apache_release</span><br><span class="line">https://repository.apache.org/content/repositories/releases/</span><br><span class="line">4. atlassian</span><br><span class="line">https://maven.atlassian.com/content/repositories/atlassian-public/</span><br><span class="line">5. central.maven.org</span><br><span class="line">http://central.maven.org/maven2/</span><br><span class="line">6. datanucleus</span><br><span class="line">http://www.datanucleus.org/downloads/maven2</span><br><span class="line">7. maven-central （安装后自带，仅需设置Cache有效期即可）</span><br><span class="line">https://repo1.maven.org/maven2/</span><br><span class="line">8. nexus.axiomalaska.com</span><br><span class="line">http://nexus.axiomalaska.com/nexus/content/repositories/public</span><br><span class="line">9. oss.sonatype.org</span><br><span class="line">https://oss.sonatype.org/content/repositories/snapshots</span><br><span class="line">10.pentaho</span><br><span class="line">https://public.nexus.pentaho.org/content/groups/omni/</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="设置私用仓库可重复发布"><a href="#设置私用仓库可重复发布" class="headerlink" title="设置私用仓库可重复发布"></a>设置私用仓库可重复发布</h2><p>Nexus安装后自带maven-releases，maven-snapshots两个仓库，用于将生成的jar包发布在这两个仓库中，在实际开发中需要将maven-releases设置为可以重复发布。</p>
<p><img src="/../../images/maven/nexus/6.png" alt="1"></p>
<h1 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h1><h2 id="配置server"><a href="#配置server" class="headerlink" title="配置server"></a>配置server</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>id：这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。</p>
<p>username：用户名</p>
<p>password：密码</p>
</blockquote>
<h2 id="配置mirror"><a href="#配置mirror" class="headerlink" title="配置mirror"></a>配置mirror</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--镜像名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://ip:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h1><p>springboot项目配置向nexus发送jar包</p>
<h3 id="在pom-xml中添加distributionManagement"><a href="#在pom-xml中添加distributionManagement" class="headerlink" title="在pom.xml中添加distributionManagement"></a>在pom.xml中添加distributionManagement</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://ip:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://ip:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maven clean deploy -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat安装使用</title>
    <url>/43b3483d.html</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>进入官网<a href="https://www.navicat.com.cn/download/navicat-premium">Navicat | 下载 Navicat Premium 14 天免费 Windows、macOS 和 Linux 的试用版</a>下载安装包，并安装。</p>
<h1 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>新建文件<strong>restart.bat</strong>，保存下面内容：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">@echo <span class="keyword">off</span></span><br><span class="line"></span><br><span class="line">echo <span class="keyword">Delete</span> HKEY_CURRENT_USER\Software\P<span class="comment">remiumSoft\NavicatPremium\Registration[version and language]</span></span><br><span class="line"><span class="keyword">for</span> /f %%i in (<span class="comment">&#x27;&quot;REG QUERY &quot;HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium&quot; /s | findstr /L Registration&quot;&#x27;) do (</span></span><br><span class="line">    reg <span class="keyword">delete</span> %%i /va /f</span><br><span class="line">)</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">echo <span class="keyword">Delete</span> Info folder under HKEY_CURRENT_USER\Software\Classes\CLSID</span><br><span class="line"><span class="keyword">for</span> /f %%i in (<span class="comment">&#x27;&quot;REG QUERY &quot;HKEY_CURRENT_USER\Software\Classes\CLSID&quot; /s | findstr /E Info&quot;&#x27;) do (</span></span><br><span class="line">    reg <span class="keyword">delete</span> %%i /va /f</span><br><span class="line">)</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">echo Finish</span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在每次试用到期时，执行清理，或者添加至定时程序中，每日自动清理，相当于无限试用。</p>
</blockquote>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ol>
<li><p>关闭Navicat。</p>
</li>
<li><p>清理文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.config/navicat    </span><br><span class="line"><span class="built_in">rm</span> -rf ~/.config/dconf/user</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof | grep navicat | grep ~/.config</span><br></pre></td></tr></table></figure>


</li>
<li><p>重新打开即可继续试用。</p>
</li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote>
<p>以上均为技术探索，请勿牟利！！！</p>
<p>请支持正版！！！</p>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>canal监听MySQL同步数据</title>
    <url>/b7f79665.html</url>
    <content><![CDATA[<h3 id="binlog文件"><a href="#binlog文件" class="headerlink" title="binlog文件"></a>binlog文件</h3><h4 id="binlog文件的两种类型"><a href="#binlog文件的两种类型" class="headerlink" title="binlog文件的两种类型"></a>binlog文件的两种类型</h4><ul>
<li>索引文件（文件名后缀为.index）用于记录哪些日志文件正在被使用</li>
<li>日志文件（文件名后缀为.00000*）记录数据库所有的DDL和DML(除了数据查询语句)语句事件。</li>
</ul>
<ol>
<li>索引文件大小：我们可以通过 max_binlog_size 参数设置binlog文件的大小。Binlog最大值，最大和默认值是1GB，该设置并不能严格控制Binlog的大小，尤其是Binlog比较靠近最大值而又遇到一个比较大事务时，为了保证事务的完整性，不可能做切换日志的动作，只能将该事务的所有SQL都记录进当前日志，直到事务结束</li>
<li>索引文件删除：binlog的删除可以手工删除或自动删除。通过设置 expire_logs_days 实现自动删除</li>
<li>手动删除需登录mysql后执行如下命令：</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql常见文件解决方法</title>
    <url>/69d0e62c.html</url>
    <content><![CDATA[<h1 id="解决MySQL8-0不能使用GROUP-BY的问题"><a href="#解决MySQL8-0不能使用GROUP-BY的问题" class="headerlink" title="解决MySQL8.0不能使用GROUP BY的问题"></a>解决MySQL8.0不能使用GROUP BY的问题</h1><p>问题描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#x27;aaa.bbb.ccc&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<ul>
<li><p>临时解决，MySQL重启后失效</p>
<ol>
<li><p>使用SQL查询sql_mode。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT @@GLOBAL.sql_mode;</span><br></pre></td></tr></table></figure>


</li>
<li><p>重新设置sql_mode，删除ONLY_FULL_GROUP_BY。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET @@GLOBAL.sql_mode = &#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span><br></pre></td></tr></table></figure>


</li>
<li><p>退出重进。</p>
</li>
</ol>
</li>
<li><p>永久生效</p>
<ol>
<li><p>在配置文件 &#x2F;etc&#x2F;mysql&#x2F;my.cnf 中 [mysqld] 下面加上一行。设置sql_mode，设置值与临时设置的值一样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER ,NO_ENGINE_SUBSTITUTION&#x27;</span><br></pre></td></tr></table></figure>


</li>
<li><p>重启MySQL</p>
</li>
</ol>
<blockquote>
<p>备注：</p>
<p>Linux下：mysql配置文件在 &#x2F;etc&#x2F;my.cnf</p>
<p>Windows下：mysql配置文件为 my.ini</p>
<p>Docker版本的MySQL，配置文件在docker里&#x2F;etc&#x2F;mysql&#x2F;my.cnf</p>
</blockquote>
</li>
</ul>
<h1 id="解决MySQL连接上限问题"><a href="#解决MySQL连接上限问题" class="headerlink" title="解决MySQL连接上限问题"></a>解决MySQL连接上限问题</h1><ol>
<li><p>查看数据库的最大连接数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &quot;%max_connections%&quot;;</span><br></pre></td></tr></table></figure>


</li>
<li><p>查看所有用户的当前连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show full processlist;</span><br></pre></td></tr></table></figure>


</li>
<li><p>修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure>


</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql统计数据库所有数据量</title>
    <url>/18a68ee.html</url>
    <content><![CDATA[<h2 id="mysql统计一个数据库所有数据量"><a href="#mysql统计一个数据库所有数据量" class="headerlink" title="mysql统计一个数据库所有数据量"></a>mysql统计一个数据库所有数据量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	table_schema AS &#x27;数据库&#x27;,</span><br><span class="line">	table_name AS &#x27;表名&#x27;,</span><br><span class="line">	table_rows AS &#x27;记录数&#x27;,</span><br><span class="line">	TRUNCATE ( data_length / 1024 / 1024, 2 ) AS &#x27;数据容量(mb)&#x27;,</span><br><span class="line">	TRUNCATE ( index_length / 1024 / 1024, 2 ) AS &#x27;索引容量(mb)&#x27;,</span><br><span class="line">	SUM(table_rows) AS &#x27;总记录数&#x27;,</span><br><span class="line">	SUM(TRUNCATE ( data_length / 1024 / 1024, 2 )) AS &#x27;总数据容量(mb)&#x27;,</span><br><span class="line">	SUM(TRUNCATE ( index_length / 1024 / 1024, 2 )) AS &#x27;总索引容量(mb)&#x27; </span><br><span class="line">FROM</span><br><span class="line">	information_schema.TABLES </span><br><span class="line">WHERE</span><br><span class="line">	table_schema = &#x27;数据库名称&#x27; </span><br><span class="line">ORDER BY</span><br><span class="line">	table_rows DESC,</span><br><span class="line">	index_length DESC;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Nginx进行TCP负载均衡</title>
    <url>/1b102101.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>ngx_stream_proxy_module</code>模块 (1.9.0) 允许通过 TCP、UDP (1.9.13) 和 UNIX 域套接字代理数据流。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在nginx.conf文件中添加<code>stream</code>配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="section">upstream</span> tcp_socket &#123;</span><br><span class="line">        <span class="attribute">server</span> localhost:<span class="number">8001</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">        <span class="attribute">server</span> localhost:<span class="number">8002</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8000</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> tcp_socket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>stream与events、http同级。</p>
</blockquote>
<h1 id="通过include配置"><a href="#通过include配置" class="headerlink" title="通过include配置"></a>通过<code>include</code>配置</h1><p>在nginx.conf文件中添加<code>stream</code>配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line"> <span class="attribute">include</span> /etc/nginx/stream.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>/etc/nginx/stream.d</code>下新建<code>tcp.conf</code>配置文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> tcp_socket &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8001</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8002</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8000</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> tcp_socket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>modbus基础知识</title>
    <url>/b39aaa82.html</url>
    <content><![CDATA[<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><p>Modbus将采用<strong>大端字节顺序传输报文</strong>，什么意思呢？比如一个16位数据0x55AA，先传输高字节0x55，再传输低字节0xAA。</p>
<p>Modbus将数据抽象成四张表：</p>
<table>
<thead>
<tr>
<th>基本表格</th>
<th>对象类型</th>
<th>读写属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>离散量输入</td>
<td>单个bit (单个位数据)</td>
<td>只读</td>
<td>数据用于系统输入输出</td>
</tr>
<tr>
<td>线圈</td>
<td>单个bit (单个位数据)</td>
<td>读写</td>
<td>数据可以通过应用程序改写</td>
</tr>
<tr>
<td>输入寄存器</td>
<td>16-bit (16位数据)</td>
<td>只读</td>
<td>数据用于系统输入输入</td>
</tr>
<tr>
<td>保持寄存器</td>
<td>16-bit  (16位数据)</td>
<td>读写</td>
<td>数据可以通过应用程序改写</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>plc</category>
      </categories>
      <tags>
        <tag>plc</tag>
        <tag>modbus</tag>
      </tags>
  </entry>
  <entry>
    <title>软元件</title>
    <url>/d04ce21c.html</url>
    <content><![CDATA[<h3 id="常用软元件"><a href="#常用软元件" class="headerlink" title="常用软元件"></a>常用软元件</h3><table>
<thead>
<tr>
<th>软元件</th>
<th>名称</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>X</td>
<td>输入继电器</td>
<td></td>
</tr>
<tr>
<td>Y</td>
<td>输出继电器</td>
<td></td>
</tr>
<tr>
<td>M</td>
<td>辅助继电器</td>
<td></td>
</tr>
<tr>
<td>T</td>
<td>定时器</td>
<td></td>
</tr>
<tr>
<td>S</td>
<td>状态继电器</td>
<td></td>
</tr>
<tr>
<td>C</td>
<td>计数器</td>
<td></td>
</tr>
<tr>
<td>D</td>
<td>数据寄存器</td>
<td></td>
</tr>
<tr>
<td>K</td>
<td>常数，多用于计时器或者计数器。</td>
<td></td>
</tr>
<tr>
<td>H</td>
<td>常数，多用于计时器或者计数器。</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>plc</category>
      </categories>
      <tags>
        <tag>plc</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot使用minio存储</title>
    <url>/e315f158.html</url>
    <content><![CDATA[<h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://47.93.37.128:6800</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="number">12345678</span></span><br></pre></td></tr></table></figure>

<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MinIO配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-06-24 14:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIoClientConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入minio 客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;minio client start&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MinIoUtil"><a href="#MinIoUtil" class="headerlink" title="MinIoUtil"></a>MinIoUtil</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteError;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteObject;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FastByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-06-24 14:03</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIoUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看存储bucket是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">bucketExists</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        Boolean found;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建存储bucket</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除存储bucket</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file       文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">upload</span><span class="params">(MultipartFile file, String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> PutObjectArgs.builder().bucket(bucketName).object(file.getOriginalFilename())</span><br><span class="line">                    .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>).contentType(file.getContentType()).build();</span><br><span class="line">            <span class="comment">//文件名称相同会覆盖</span></span><br><span class="line">            minioClient.putObject(objectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName   文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res        response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String bucketName, String fileName, HttpServletResponse res)</span> &#123;</span><br><span class="line">        <span class="type">GetObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> GetObjectArgs.builder().bucket(bucketName)</span><br><span class="line">                .object(fileName).build();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">GetObjectResponse</span> <span class="variable">response</span> <span class="operator">=</span> minioClient.getObject(objectArgs)) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FastByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                <span class="keyword">while</span> ((len = response.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    os.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                os.flush();</span><br><span class="line">                <span class="type">byte</span>[] bytes = os.toByteArray();</span><br><span class="line">                res.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="comment">//设置强制下载不打开</span></span><br><span class="line">                res.setContentType(<span class="string">&quot;application/force-download&quot;</span>);</span><br><span class="line">                res.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> + fileName);</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">ServletOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> res.getOutputStream()) &#123;</span><br><span class="line">                    stream.write(bytes);</span><br><span class="line">                    stream.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看文件对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存储bucket内文件对象信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listObjects</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(bucketName).build());</span><br><span class="line"><span class="comment">//        List&lt;ObjectItem&gt; objectItems = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            for (Result&lt;Item&gt; result : results) &#123;</span></span><br><span class="line"><span class="comment">//                Item item = result.get();</span></span><br><span class="line"><span class="comment">//                ObjectItem objectItem = new ObjectItem();</span></span><br><span class="line"><span class="comment">//                objectItem.setObjectName(item.objectName());</span></span><br><span class="line"><span class="comment">//                objectItem.setSize(item.size());</span></span><br><span class="line"><span class="comment">//                objectItems.add(objectItem);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            return null;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return objectItems;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除文件对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects    对象名称集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;Result&lt;DeleteError&gt;&gt; <span class="title function_">removeObjects</span><span class="params">(String bucketName, List&lt;String&gt; objects)</span> &#123;</span><br><span class="line">        List&lt;DeleteObject&gt; dos = objects.stream().map(e -&gt; <span class="keyword">new</span> <span class="title class_">DeleteObject</span>(e)).collect(Collectors.toList());</span><br><span class="line">        Iterable&lt;Result&lt;DeleteError&gt;&gt; results = minioClient.removeObjects(RemoveObjectsArgs.builder().bucket(bucketName).objects(dos).build());</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MinioController"><a href="#MinioController" class="headerlink" title="MinioController"></a>MinioController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinIoUtil minIoUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/bucketExists/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">bucketExists</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> minIoUtil.bucketExists(name);</span><br><span class="line">        System.out.println(aBoolean);</span><br><span class="line">        <span class="keyword">return</span> aBoolean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file, <span class="meta">@RequestParam(value = &quot;bucketName&quot;)</span> String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(bucketName)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;存储bucket名称为空，无法上传&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;存储bucket名称为空，无法上传&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!minIoUtil.upload(file, bucketName)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件上传异常&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;文件上传异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;文件上传成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32之UART串口通信</title>
    <url>/63f0bb0c.html</url>
    <content><![CDATA[<h1 id="配置项目工程"><a href="#配置项目工程" class="headerlink" title="配置项目工程"></a>配置项目工程</h1><blockquote>
<p>在使用STM32CubeIDE的时候，首先要选择正在使用的芯片型号，再配置芯片的时钟，然后才去配置所需要用到的功能。</p>
</blockquote>
<h2 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h2><p><strong>1. 配置UART并使能中断：</strong></p>
<p><img src="/../../images/stm/uart/uart1.png" alt="配置UART并使能中断"></p>
<p><strong>2. 设置中断优先级</strong>（如果没开启其他中断，那就默认即可，直接跳过）</p>
<p><img src="/../../images/stm/uart/%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%AD%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="设置中断优先级"></p>
<p><strong>3. 保存并生产代码</strong></p>
<h2 id="函数说明"><a href="#函数说明" class="headerlink" title="函数说明"></a>函数说明</h2><h3 id="UART初始化（在usart-c中）"><a href="#UART初始化（在usart-c中）" class="headerlink" title="UART初始化（在usart.c中）"></a>UART初始化（在usart.c中）</h3><h3 id="UART中断处理函数（在stm32f1xx-it-c中）"><a href="#UART中断处理函数（在stm32f1xx-it-c中）" class="headerlink" title="UART中断处理函数（在stm32f1xx_it.c中）"></a>UART中断处理函数（在stm32f1xx_it.c中）</h3><blockquote>
<p>当USART1发生中断事件时，程序会进行该函数，所以我们会在这个函数编写好程序，来处理我们的中断事件。</p>
</blockquote>
<h3 id="HAL库函数HAL-UART-Transmit（在stm32f1xx-hal-uart-c中）"><a href="#HAL库函数HAL-UART-Transmit（在stm32f1xx-hal-uart-c中）" class="headerlink" title="HAL库函数HAL_UART_Transmit（在stm32f1xx_hal_uart.c中）"></a>HAL库函数HAL_UART_Transmit（在stm32f1xx_hal_uart.c中）</h3><blockquote>
<p>该函数能够通过huart串口发送Size位pData数据。</p>
<p><strong>参数说明：</strong></p>
<ul>
<li>huart  ：选择用来发送的UART串口</li>
<li>pData  ：指向将要发送的数据的指针</li>
<li>Size   ：发送数据的大小</li>
<li>Timeout：超时时间</li>
</ul>
</blockquote>
<h3 id="HAL库函数HAL-UART-Receive（在stm32f1xx-hal-uart-c中）"><a href="#HAL库函数HAL-UART-Receive（在stm32f1xx-hal-uart-c中）" class="headerlink" title="HAL库函数HAL_UART_Receive（在stm32f1xx_hal_uart.c中）"></a>HAL库函数HAL_UART_Receive（在stm32f1xx_hal_uart.c中）</h3><blockquote>
<p>该函数能够通过huart串口接收Size位pData数据。</p>
<p><strong>参数说明：</strong></p>
<ul>
<li><p>huart  ：选择用来接收的UART串口</p>
</li>
<li><p>pData  ：指向将要存放数据的指针</p>
</li>
<li><p>Size   ：接收数据的大小</p>
</li>
<li><p>Timeout：超时时间</p>
</li>
</ul>
</blockquote>
<h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="在HAL-UART-MspInit中使能中断接收"><a href="#在HAL-UART-MspInit中使能中断接收" class="headerlink" title="在HAL_UART_MspInit中使能中断接收"></a>在HAL_UART_MspInit中使能中断接收</h3><blockquote>
<p>代码位置：usart.c文件中的HAL_UART_MspInit函数</p>
</blockquote>
<p><strong>添加代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN USART1_MspInit 1 */</span></span><br><span class="line"><span class="comment">// 使能接收中断</span></span><br><span class="line">__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);</span><br><span class="line"><span class="comment">/* USER CODE END USART1_MspInit 1 */</span></span><br></pre></td></tr></table></figure>

<p><strong>HAL_UART_MspInit函数完整代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_MspInit</span><span class="params">(UART_HandleTypeDef *uartHandle)</span> &#123;</span><br><span class="line"></span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStruct = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">if</span> (uartHandle-&gt;Instance == USART1) &#123;</span><br><span class="line">		<span class="comment">/* USER CODE BEGIN USART1_MspInit 0 */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/* USER CODE END USART1_MspInit 0 */</span></span><br><span class="line">		<span class="comment">/* USART1 clock enable */</span></span><br><span class="line">		__HAL_RCC_USART1_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">		__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">		<span class="comment">/**USART1 GPIO Configuration</span></span><br><span class="line"><span class="comment">		 PA9     ------&gt; USART1_TX</span></span><br><span class="line"><span class="comment">		 PA10     ------&gt; USART1_RX</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		GPIO_InitStruct.Pin = GPIO_PIN_9;</span><br><span class="line">		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">		HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">		GPIO_InitStruct.Pin = GPIO_PIN_10;</span><br><span class="line">		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">		GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">		HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* USART1 interrupt Init */</span></span><br><span class="line">		HAL_NVIC_SetPriority(USART1_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		HAL_NVIC_EnableIRQ(USART1_IRQn);</span><br><span class="line">		<span class="comment">/* USER CODE BEGIN USART1_MspInit 1 */</span></span><br><span class="line">		<span class="comment">// 使能接收中断</span></span><br><span class="line">		__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);</span><br><span class="line">		<span class="comment">/* USER CODE END USART1_MspInit 1 */</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在USARTX-IRQHandler中接收数据"><a href="#在USARTX-IRQHandler中接收数据" class="headerlink" title="在USARTX_IRQHandler中接收数据"></a>在USARTX_IRQHandler中接收数据</h3><blockquote>
<p>代码位置：stm32f1xx_it.c文件中的USART1_IRQHandler函数</p>
</blockquote>
<p><strong>定义静态变量：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> uRx_Data[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;    <span class="comment">//存储数组</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> *pRx_Data = uRx_Data;    <span class="comment">//指向存储数组将要存储数据的位</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> uLength = <span class="number">0</span>;    <span class="comment">//接收数据长度</span></span><br></pre></td></tr></table></figure>

<p><strong>接收数据：</strong></p>
<blockquote>
<ul>
<li>判断接收结束条件，这个可以根据自己想要接收何种类型的数据而定。</li>
<li>数据处理，大家可以在这一步执行自己想要对数据做的一些操作，这里只是将接收到的数据重新发送出去而已。</li>
</ul>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* -1- 接收数据 */</span></span><br><span class="line">HAL_UART_Receive(&amp;huart1, pRx_Data, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -2- 判断数据结尾 */</span></span><br><span class="line"><span class="keyword">if</span> (*pRx_Data == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">/* -3- 将接收成功的数据通过串口发出去 */</span></span><br><span class="line">    HAL_UART_Transmit(&amp;huart1, uRx_Data, uLength, <span class="number">0xffff</span>);</span><br><span class="line">    <span class="comment">/* -4- 初始化指针和数据长度 */</span></span><br><span class="line">    pRx_Data = uRx_Data;   <span class="comment">//重新指向数组起始位置</span></span><br><span class="line">    uLength = <span class="number">0</span>;          <span class="comment">//长度清零</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -5- 若未结束，指针往下一位移动，长度自增一 */</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    pRx_Data++;</span><br><span class="line">    uLength++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>USART1_IRQHandler函数完整代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">USART1_IRQHandler</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">	<span class="comment">/* USER CODE BEGIN USART1_IRQn 0 */</span></span><br><span class="line">    </span><br><span class="line">	<span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> uRx_Data[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;    <span class="comment">//存储数组</span></span><br><span class="line">	<span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> *pRx_Data = uRx_Data;    <span class="comment">//指向存储数组将要存储数据的位</span></span><br><span class="line">	<span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> uLength = <span class="number">0</span>;    <span class="comment">//接收数据长度</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* -1- 接收数据 */</span></span><br><span class="line">	HAL_UART_Receive(&amp;huart1, pRx_Data, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* -2- 判断数据结尾 */</span></span><br><span class="line">	<span class="keyword">if</span> (*pRx_Data == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">/* -3- 将接收成功的数据通过串口发出去 */</span></span><br><span class="line">		HAL_UART_Transmit(&amp;huart1, uRx_Data, uLength, <span class="number">0xffff</span>);</span><br><span class="line">		<span class="comment">/* -4- 初始化指针和数据长度 */</span></span><br><span class="line">		pRx_Data = uRx_Data;   <span class="comment">//重新指向数组起始位置</span></span><br><span class="line">		uLength = <span class="number">0</span>;          <span class="comment">//长度清零</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* -5- 若未结束，指针往下一位移动，长度自增一 */</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		pRx_Data++;</span><br><span class="line">		uLength++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* USER CODE END USART1_IRQn 0 */</span></span><br><span class="line">	HAL_UART_IRQHandler(&amp;huart1);</span><br><span class="line">	<span class="comment">/* USER CODE BEGIN USART1_IRQn 1 */</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">/* USER CODE END USART1_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> uTx_Data[] = <span class="string">&quot;init hohu\r\n&quot;</span>;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, uTx_Data, <span class="keyword">sizeof</span>(uTx_Data), <span class="number">0xffff</span>);</span><br></pre></td></tr></table></figure>



<h3 id="使用printf发送数据"><a href="#使用printf发送数据" class="headerlink" title="使用printf发送数据"></a>使用<code>printf</code>发送数据</h3><blockquote>
<p>代码位置：usart.c文件中的最后添加；</p>
<ul>
<li>使用printf函数需要#include &lt;stdio.h&gt;</li>
</ul>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现printf函数发送数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __GNUC__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PUTCHAR_PROTOTYPE int __io_putchar(int ch)</span></span><br><span class="line">PUTCHAR_PROTOTYPE &#123;</span><br><span class="line">	HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span>*) &amp;ch, <span class="number">1</span>, HAL_MAX_DELAY);</span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/* USER CODE END 1 */</span></span><br></pre></td></tr></table></figure>



<p>参考：<a href="https://www.cnblogs.com/ChurF-Lin/p/10809000.html">https://www.cnblogs.com/ChurF-Lin/p/10809000.html</a></p>
]]></content>
      <categories>
        <category>stm32</category>
      </categories>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32新建项目工程</title>
    <url>/d0cca158.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>stm32</category>
      </categories>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>测试指令</title>
    <url>/1fd38c68.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;io2&quot;:37,&quot;let&quot;:23,&quot;dem&quot;:23,&quot;open&quot;:03&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#测试AT功能 </span><br><span class="line">AT</span><br><span class="line">#设置模组进入STA模式</span><br><span class="line">AT+CWMODE=1</span><br><span class="line">#连接wifi</span><br><span class="line">AT+CWJAP=&quot;TP-LINK_1502&quot;,&quot;jhsz10021502&quot;</span><br><span class="line">#连接TCP服务器</span><br><span class="line">AT+CIPSTART=&quot;TCP&quot;,&quot;tcp.leniot.com&quot;,31000</span><br><span class="line">AT+CIPSTART=&quot;TCP&quot;,&quot;192.168.0.110&quot;,31000</span><br><span class="line"></span><br><span class="line">#设置开机进入TCP透传模式，将配置参数写入flash中</span><br><span class="line">AT+SAVETRANSLINK=1,&quot;192.168.0.110&quot;,6000,&quot;TCP&quot;</span><br><span class="line"></span><br><span class="line">#设置设备进入透传模式</span><br><span class="line">AT+CIPMODE=1</span><br><span class="line"></span><br><span class="line">#在透传模式下传输数据，串口输入的数据均会发送到服务器中</span><br><span class="line">AT+CIPSEND</span><br><span class="line">#发送任意数据到服务器</span><br><span class="line">610255c3e4b04bc551b87634&amp;68763556</span><br><span class="line">&#123;&quot;t&quot;:37,&quot;2&quot;:23&#125;</span><br><span class="line"></span><br><span class="line">#退出透传模式 不能加换行符！！！</span><br><span class="line">+++</span><br><span class="line"></span><br><span class="line">#断开TCP连接，切换连接服务，需要断开连接</span><br><span class="line">AT+CIPCLOSE</span><br><span class="line">#复位</span><br><span class="line">AT+RST</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>stm32</category>
      </categories>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode常用插件</title>
    <url>/510fa095.html</url>
    <content><![CDATA[<h1 id="shell脚本插件"><a href="#shell脚本插件" class="headerlink" title="shell脚本插件"></a>shell脚本插件</h1><ol>
<li><p>shellman</p>
<p>智能提示和自动补全</p>
</li>
<li><p>shellcheck<br>语法错误检查</p>
</li>
<li><p>shell-format<br>格式化<br>快捷键：Alt+Shift+F</p>
</li>
<li><p>Code Runner<br>调试</p>
</li>
</ol>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32之GPIO</title>
    <url>/e2fc6371.html</url>
    <content><![CDATA[<h1 id="配置项目工程"><a href="#配置项目工程" class="headerlink" title="配置项目工程"></a>配置项目工程</h1><p><img src="/../../images/stm/gpio/img.png" alt="配置工程"></p>
]]></content>
      <categories>
        <category>stm32</category>
      </categories>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome截屏整个页面</title>
    <url>/5070ae61.html</url>
    <content><![CDATA[<h2 id="控制台截图"><a href="#控制台截图" class="headerlink" title="控制台截图"></a>控制台截图</h2><p>F12进入控制台，使用快捷方式<code>ctrl+shift+p</code>，打开一个命令行输入框。然后输入<code>screen</code>,我们选择【<code>Capture full size screenshot</code>】</p>
]]></content>
      <categories>
        <category>工具箱</category>
      </categories>
      <tags>
        <tag>工具箱</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora使用</title>
    <url>/36feb827.html</url>
    <content><![CDATA[<h1 id="无限试用15天"><a href="#无限试用15天" class="headerlink" title="无限试用15天"></a>无限试用15天</h1><ul>
<li>清除注册表HKEY_CURRENT_USER\Software\Typora </li>
<li>清除 \AppData\Roaming\Typora</li>
</ul>
]]></content>
      <categories>
        <category>工具箱</category>
      </categories>
      <tags>
        <tag>工具箱</tag>
      </tags>
  </entry>
  <entry>
    <title>postman汉化</title>
    <url>/4158faf6.html</url>
    <content><![CDATA[<p><a href="https://github.com/hlmd/Postman-cn">https://github.com/hlmd/Postman-cn</a></p>
]]></content>
      <categories>
        <category>工具箱</category>
      </categories>
      <tags>
        <tag>工具箱</tag>
      </tags>
  </entry>
  <entry>
    <title>开启网站代码复制脚本</title>
    <url>/b97d5e96.html</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">contentEditable</span>=<span class="string">&#x27;true&#x27;</span>;<span class="variable language_">document</span>.<span class="property">designMode</span>=<span class="string">&#x27;on&#x27;</span>; <span class="keyword">void</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>直接添加书签保存即可，然后打开页面时需要编辑的页面点击一下这个书签。</p>
]]></content>
      <categories>
        <category>工具箱</category>
      </categories>
      <tags>
        <tag>工具箱</tag>
      </tags>
  </entry>
  <entry>
    <title>解决cdn.jsdelivr.net无法访问的问题</title>
    <url>/54fe2097.html</url>
    <content><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>使用<a href="https://unpkg.com/%E4%BB%A3%E6%9B%BFcdn.jsdelivr.net">https://unpkg.com/代替cdn.jsdelivr.net</a></p>
<h1 id="一般项目修改方法"><a href="#一般项目修改方法" class="headerlink" title="一般项目修改方法"></a>一般项目修改方法</h1><p>将<code>cdn.jsdelivr.net/npm/</code>替换为<code>https://unpkg.com/</code></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">cdn.jsdelivr.net/npm/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unpkg.com/</span><br></pre></td></tr></table></figure>



<h1 id="Hexo修改方法"><a href="#Hexo修改方法" class="headerlink" title="Hexo修改方法"></a>Hexo修改方法</h1><p>修改<code>_config.next.yml</code>文件中的<code>vendors.plugins: unpkg</code></p>
]]></content>
      <categories>
        <category>工具箱</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>工具箱</tag>
      </tags>
  </entry>
</search>
