{"meta":{"title":"yumiot","subtitle":"","description":"","author":"Jack","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"配置中心ConfigMap","slug":"k8s/ConfigMap配置中心","date":"2021-05-11T09:18:00.000Z","updated":"2021-05-11T09:15:17.962Z","comments":true,"path":"k8s/ConfigMap配置中心/","link":"","permalink":"http://example.com/k8s/ConfigMap%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/","excerpt":"","text":"配置中心ConfigMap在生产环境中经常会遇到需要修改配置文件的情况，传统的修改方式不仅会影响到服务的正常运行，而且操作步骤也很繁琐。为了解决这个问题，kubernetes项目从1.2版本引入了ConfigMap功能，用于将应用的配置信息与程序的分离。这种方式不仅可以实现应用程序被的复用，而且还可以通过不同的配置实现更灵活的功能。在创建容器时，用户可以将应用程序打包为容器镜像后，通过环境变量或者外接挂载文件的方式进行配置注入","categories":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/categories/k8s/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"}]},{"title":"kubectl命令大全","slug":"k8s/kubectl 命令大全","date":"2021-05-11T09:18:00.000Z","updated":"2021-05-11T09:15:53.650Z","comments":true,"path":"k8s/kubectl 命令大全/","link":"","permalink":"http://example.com/k8s/kubectl%20%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/","excerpt":"","text":"kubectl 命令参考网址：https://jimmysong.io/kubernetes-handbook/guide/kubectl-cheatsheet.html 查看版本号1kubectl version 查看集群信息1kubectl cluster-info get 获取列出一个或多个资源的信息 列出所有运行的Pod信息。 1kubectl get nodes 列出Pod以及运行Pod节点信息。 1kubectl get pods -o wide 列出指定NAME的 replication controller信息。 1kubectl get replicationcontroller web describe 输出指定的一个/多个资源的详细信息1kubectl describe TYPE NAME_PREFIX 示例： 1234567891011121314151617# 描述一个node$ kubectl describe nodes kubernetes-minion-emt8.c.myproject.internal# 描述一个pod$ kubectl describe pods/nginx# 描述pod.json中的资源类型和名称指定的pod$ kubectl describe -f pod.json# 描述所有的pod$ kubectl describe pods# 描述所有包含label name=myLabel的pod$ kubectl describe po -l name=myLabel# 描述所有被replication controller “frontend”管理的pod（rc创建的pod都以rc的名字作为前缀）$ kubectl describe pods frontend 删除应用1kubectl delete pod 应用名称 (kubectl get pods) 1kubectl delete deployment 名称 (kubectl get deployment) 使用yaml文件删除 1kubectl delete -f xxx.yaml 命名空间查看： 123kubectl get nskubectl get namespace 配置中心123kubectl get cmkubectl get configmap","categories":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/categories/k8s/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"}]},{"title":"kubectl命令自动补全","slug":"k8s/kubectl命令自动补全","date":"2021-05-11T09:18:00.000Z","updated":"2021-05-11T09:15:53.631Z","comments":true,"path":"k8s/kubectl命令自动补全/","link":"","permalink":"http://example.com/k8s/kubectl%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/","excerpt":"","text":"kubectl 命令自动补全安装bash-completion（如果已经安装忽略即可）：1sudo apt install bash-completion 测试一下：12source /usr/share/bash-completion/bash_completionsource &lt;(kubectl completion bash) 测试没问题后，对 /root/.bashrc 加2行代码 ，方便以后每次登录自动生效：12source /usr/share/bash-completion/bash_completionsource &lt;(kubectl completion bash)","categories":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/categories/k8s/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"}]},{"title":"从私有仓库拉取镜像","slug":"k8s/从私有仓库拉取镜像","date":"2021-05-11T09:18:00.000Z","updated":"2021-05-11T09:15:53.644Z","comments":true,"path":"k8s/从私有仓库拉取镜像/","link":"","permalink":"http://example.com/k8s/%E4%BB%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F/","excerpt":"","text":"从私有仓库拉取镜像登录 Docker 镜像仓库在个人电脑上，要想拉取私有镜像必须在镜像仓库上进行身份验证。 1docker login 当提示时，输入 Docker 用户名和密码。 登录过程会创建或更新保存有授权令牌的 config.json 文件。 查看 config.json 文件： 1cat ~/.docker/config.json 输出结果包含类似于以下内容的部分： 1234567&#123; &quot;auths&quot;: &#123; &quot;https://index.docker.io/v1/&quot;: &#123; &quot;auth&quot;: &quot;c3R...zE2&quot; &#125; &#125;&#125; 说明： 如果使用 Docker 凭证仓库，则不会看到 auth 条目，看到的将是以仓库名称作为值的 credsStore 条目。 在集群中创建保存授权令牌的 SecretKubernetes 集群使用 docker-registry 类型的 Secret 来通过容器仓库的身份验证，进而提取私有映像。 创建 Secret，命名为 regcred： 1kubectl create secret docker-registry regcred --docker-server=&lt;your-registry-server&gt; --docker-username=&lt;your-name&gt; --docker-password=&lt;your-pword&gt; --docker-email=&lt;your-email&gt; 在这里： &lt;your-registry-server&gt; 是你的私有 Docker 仓库全限定域名（FQDN）。(参考 https://index.docker.io/v1/ 中关于 DockerHub 的部分) &lt;your-name&gt; 是你的 Docker 用户名。 &lt;your-pword&gt; 是你的 Docker 密码。 &lt;your-email&gt; 是你的 Docker 邮箱。 这样您就成功地将集群中的 Docker 凭据设置为名为 regcred 的 Secret。 检查 Secret regcred要了解你创建的 regcred Secret 的内容，可以用 YAML 格式进行查看： 1kubectl get secret regcred --output=yaml 输出和下面类似： 123456789apiVersion: v1data: .dockerconfigjson: eyJodHRwczovL2luZGV4L ... J0QUl6RTIifX0=kind: Secretmetadata: ... name: regcred ...type: kubernetes.io/dockerconfigjson .dockerconfigjson 字段的值是 Docker 凭据的 base64 表示。 要了解 dockerconfigjson 字段中的内容，请将 Secret 数据转换为可读格式： 1kubectl get secret regcred --output=&quot;jsonpath=&#123;.data.\\.dockerconfigjson&#125;&quot; | base64 --decode 输出和下面类似： 1&#123;&quot;auths&quot;:&#123;&quot;yourprivateregistry.com&quot;:&#123;&quot;username&quot;:&quot;janedoe&quot;,&quot;password&quot;:&quot;xxxxxxxxxxx&quot;,&quot;email&quot;:&quot;jdoe@example.com&quot;,&quot;auth&quot;:&quot;c3R...zE2&quot;&#125;&#125;&#125; 要了解 auth 字段中的内容，请将 base64 编码过的数据转换为可读格式： 1echo &quot;c3R...zE2&quot; | base64 --decode 输出结果中，用户名和密码用 : 链接，类似下面这样： 1janedoe:xxxxxxxxxxx 注意，Secret 数据包含与本地 ~/.docker/config.json 文件类似的授权令牌。 这样您就已经成功地将 Docker 凭据设置为集群中的名为 regcred 的 Secret。 创建一个使用您的 Secret 的 Pod下面是一个 Pod 配置文件，它需要访问 regcred 中的 Docker 凭据： pods/private-reg-pod.yaml 12345678910apiVersion: v1kind: Podmetadata: name: private-regspec: containers: - name: private-reg-container image: &lt;your-private-image&gt; imagePullSecrets: - name: regcred 下载上述文件： 1wget -O my-private-reg-pod.yaml https://k8s.io/examples/pods/private-reg-pod.yaml 在my-private-reg-pod.yaml 文件中，使用私有仓库的镜像路径替换 &lt;your-private-image&gt;，例如： 1janedoe/jdoe-private:v1 要从私有仓库拉取镜像，Kubernetes 需要凭证。 配置文件中的 imagePullSecrets 字段表明 Kubernetes 应该通过名为 regcred 的 Secret 获取凭证。 创建使用了你的 Secret 的 Pod，并检查它是否正常运行： 12kubectl create -f my-private-reg-pod.yamlkubectl get pod private-reg","categories":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/categories/k8s/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"}]},{"title":"Docker安装NGINX","slug":"docker/Docker安装NGINX","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:22.532Z","comments":true,"path":"docker/Docker安装NGINX/","link":"","permalink":"http://example.com/docker/Docker%E5%AE%89%E8%A3%85NGINX/","excerpt":"","text":"Docker安装NGINX拉取镜像1docker pull nginx 使用默认配置启动NGINX1docker run --name nginx -p 80:80 -d nginx 如果需要开机启动： 1docker run --name nginx -p 80:80 -d nginx --restart always 在浏览器中打开 127.0.0.1 测试是否安装成功。 1curl 127.0.0.1 NGINX使用主机目录配置新建配置目录1mkdir -p /home/nginx/www /home/nginx/logs /home/nginx/conf www: 目录将映射为 nginx 容器配置的虚拟目录。 logs: 目录将映射为 nginx 容器的日志目录。 conf: 目录里的配置文件将映射为 nginx 容器的配置文件。 复制默认配置12docker cp nginx:/etc/nginx/nginx.conf /home/jack/nginx/conf/docker cp nginx:/etc/nginx/conf.d /home/jack/nginx/ nginx：运行容器时的名称 部署新的NGINX容器12345docker run -p 8080:80 --name nginx-test-web \\ -v /home/nginx/www:/usr/share/nginx/html \\ -v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\ -v /home/nginx/logs:/var/log/nginx \\ -d nginx 123456docker run -p 80:80 --name nginx-gateway \\ -v /home/jack/nginx/www:/usr/share/nginx/html \\ -v /home/jack/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\ -v /home/jack/nginx/conf.d:/etc/nginx/conf.d \\ -v /home/jack/nginx/logs:/var/log/nginx \\ -d nginx 使用本地目录运行容器1docker run --name nginx -p 80:80 -v /usr/share/www/html:/usr/share/nginx/html:ro -d nginx -v 本地目录：docker容器目录:ro 1docker run --name apilab-web-nginx -p 8000:80 -v /home/apilab/www/html:/usr/share/nginx/html:ro -d nginx 配置NGINX1docker exec -it nginx-name /bin/bash 1vim etc/nginx/conf.d/default.conf","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"Docker安装Redis","slug":"docker/Docker安装Redis","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:22.566Z","comments":true,"path":"docker/Docker安装Redis/","link":"","permalink":"http://example.com/docker/Docker%E5%AE%89%E8%A3%85Redis/","excerpt":"","text":"拉取镜像1docker pull redis:latest 运行容器1docker run --name redis -p 6379:6379 -d redis","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"Docker搭建私有仓库","slug":"docker/Docker搭建私有仓库","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:22.571Z","comments":true,"path":"docker/Docker搭建私有仓库/","link":"","permalink":"http://example.com/docker/Docker%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/","excerpt":"","text":"docker搭建私有仓库k8s结合使用参考网址：https://www.cnblogs.com/FateHuli/p/11836968.html 拉取并运行容器：1docker run -d -p 5000:5000 --restart always --name registry registry:2 访问：http://localhost:5000/v2/ 验证是否安装成功 成功会显示{} 使用dockerfile构建镜像（有镜像可忽略）1docker build -t nginx:test . 标记本地镜像，将其归入私有仓库：推送到其他仓库时需要登录： 1docker login 标记本地镜像： 1docker tag nginx:latest localhost:5000/nginx:latest 将本地的镜像上传到镜像仓库：1docker push localhost:5000/nginx:latest 访问 http://localhost:5000/v2/_catalog 查看私有仓库目录，可以看到刚上传的镜像了： tag语法： 1docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG] 示例： 1docker tag ubuntu:15.10 runoob/ubuntu:v3 push语法： 1docker push [OPTIONS] NAME[:TAG] OPTIONS说明： **–disable-content-trust :**忽略镜像的校验,默认开启 实例 上传本地镜像myapache:v1到镜像仓库中。 1docker push myapache:v1 k8s使用私有仓库创建secret创建secret（初始安装账号密码在：.docker/config.json） 1kubectl create secret docker-registry registry-auth --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL DOCKER_REGISTRY_SERVER：docker私有服务器ip地址和端口号，也可以是域名 DOCKER_USER：用户名 DOCKER_PASSWORD：密码 DOCKER_EMAIL：邮箱地址，可选参数 查看secret 1kubectl get secret","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"Nginx","slug":"docker/Nginx","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.804Z","comments":true,"path":"docker/Nginx/","link":"","permalink":"http://example.com/docker/Nginx/","excerpt":"","text":"部署项目 1docker run --name apione-web -p 9001:80 -v /home/hanlon/api/html:/usr/share/nginx/html:ro -d nginx","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"docker修改国内镜像源","slug":"docker/docker 修改国内镜像源","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.901Z","comments":true,"path":"docker/docker 修改国内镜像源/","link":"","permalink":"http://example.com/docker/docker%20%E4%BF%AE%E6%94%B9%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/","excerpt":"","text":"国内镜像仓库 国内Docker镜像仓库名称 链接 Docker 官方中国区 https://registry.docker-cn.com 网易 http://hub-mirror.c.163.com 中国科学技术大学 https://docker.mirrors.ustc.edu.cn 阿里云 https://&lt;你的ID&gt;.mirror.aliyuncs.com 修改docker镜像仓库配置修改/etc/docker/daemon.json文件，如果没有先建一个即可 1sudo vim /etc/docker/daemon.json 编辑配置文件123&#123; &quot;registry-mirrors&quot;: [&quot;https://o4jtien3.mirror.aliyuncs.com&quot;]&#125; 使配置文件生效1sudo systemctl daemon-reload 重启Docker1sudo service docker restart 测试配置是否成功1docker search nginx","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"Docker安装MySQL","slug":"docker/docker安装MySQL","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.907Z","comments":true,"path":"docker/docker安装MySQL/","link":"","permalink":"http://example.com/docker/docker%E5%AE%89%E8%A3%85MySQL/","excerpt":"","text":"Docker安装MySQL正式环境中数据库不建议安装在docker中！！！ 拉取MySQL镜像1docker pull mysql:latest 运行本地容器1docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql 1docker run --name mysql -v /home/apilab/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=api@lab.cn -d mysql 命令说明： -name mysql：为容器指定名称 -p 3306:3306：将容器的3306端口映射到主机的3306端口 -e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码 -d 后台运行容器，并返回容器ID； -v 在主机系统上的适当卷上创建数据目录，例如/my/own/datadir 安装成功通过 docker ps 查看是否安装成功 1docker ps 进入容器1docker exec -it mysql bash 命令说明： -i：即使没有附加也保持STDIN 打开 -t：分配一个伪终端 登录MySQL1mysql -u root -p 修改密码1ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;; 添加远程登录用户创建一个新的用户（也可以使用root用户登录，正式环境不推荐）1CREATE USER &#x27;jack&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;; 添加远程登录用户1GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"https错误","slug":"docker/http server gave HTTP response to HTTPS client","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:49.416Z","comments":true,"path":"docker/http server gave HTTP response to HTTPS client/","link":"","permalink":"http://example.com/docker/http%20server%20gave%20HTTP%20response%20to%20HTTPS%20client/","excerpt":"","text":"http: server gave HTTP response to HTTPS client解决方案： 修改docker配置编辑daemon.json文件，添加以下内容： 1sudo vim /etc/docker/daemon.json 123&#123; &quot;insecure-registries&quot;: [&quot;ip:port&quot;]&#125; ip： docker私有参考ip地址 port：端口号 使配置生效： 1sudo systemctl daemon-reload 重启docker： 1sudo service docker restart 启动minikube的时，使用–insecure-registry启动1minikube start --insecure-registry &#x27;ip:port&#x27;","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"修改源并安装vim","slug":"docker/修改源并安装vim","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.809Z","comments":true,"path":"docker/修改源并安装vim/","link":"","permalink":"http://example.com/docker/%E4%BF%AE%E6%94%B9%E6%BA%90%E5%B9%B6%E5%AE%89%E8%A3%85vim/","excerpt":"","text":"1、登录容器 1docker exec -it gitlab bash 2、修改镜像源 123456cat &gt; /etc/apt/sources.list &lt;&lt; EOFdeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverseEOF 3、更新 1apt update 4、安装软件 5、tab自动补全 1apt install bash-completion 1source /etc/bash_completion","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"安装MongoDB","slug":"docker/安装MongoDB","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.843Z","comments":true,"path":"docker/安装MongoDB/","link":"","permalink":"http://example.com/docker/%E5%AE%89%E8%A3%85MongoDB/","excerpt":"","text":"拉取镜像1docker pull mongo:latest 运行容器1docker run --name mongo -p 27017:27017 -d mongo --auth -p 27017:27017 ：映射容器服务的 27017 端口到宿主机的 27017 端口。外部可以直接通过 宿主机 ip:27017 访问到 mongo 的服务。 –auth：需要密码才能访问容器服务。 创建用户密码12345docker exec -it mongo mongo admin# 创建一个名为 admin，密码为 123456 的用户。db.createUser(&#123; user:&#x27;admin&#x27;,pwd:&#x27;123456&#x27;,roles:[ &#123; role:&#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27;&#125;,&quot;readWriteAnyDatabase&quot;]&#125;);# 尝试使用上面创建的用户信息进行连接。db.auth(&#x27;admin&#x27;, &#x27;123456&#x27;)","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"安装gitea","slug":"docker/安装gitea","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.709Z","comments":true,"path":"docker/安装gitea/","link":"","permalink":"http://example.com/docker/%E5%AE%89%E8%A3%85gitea/","excerpt":"","text":"拉取镜像1docker pull gitea/gitea:latest 安装MySQL（有的可以省略）设置存储路径1sudo mkdir -p /var/lib/gitea 运行容器1docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data gitea/gitea:latest 配置gitea使用浏览器访问：http://localhost:10080/，配置数据库连接； 完成配置之后，创建第一个用户（默认为管理员），登录即可。","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"安装gitlab","slug":"docker/安装gitlab","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.855Z","comments":true,"path":"docker/安装gitlab/","link":"","permalink":"http://example.com/docker/%E5%AE%89%E8%A3%85gitlab/","excerpt":"","text":"Docker 安装Gitlab一、设置本地卷位置在设置其他所有内容之前，请配置一个新的环境变量$GITLAB_HOME ，该变量指向配置，日志和数据文件将驻留的目录。确保目录存在并且已授予适当的权限。 对于Linux用户，将路径设置为/srv/gitlab： 1export GITLAB_HOME=/srv/gitlab 对于macOS用户，请使用用户$HOME/gitlab目录： 1export GITLAB_HOME=$HOME/gitlab GitLab容器使用主机安装的卷来存储持久数据： 本地位置 docker位置 说明 $GITLAB_HOME/data /var/opt/gitlab 用于存储应用程序数据。 $GITLAB_HOME/logs /var/log/gitlab 用于存储日志。 $GITLAB_HOME/config /etc/gitlab 用于存储GitLab配置文件。 二、安装GitLab Docker镜像可以多种方式运行： 使用Docker引擎 使用Docker Compose 使用Docker群模式 使用Docker Engine安装GitLab您可以微调这些目录以满足您的要求。设置GITLAB_HOME变量后，即可运行图像： 参考：https://segmentfault.com/a/1190000019772866 123456789sudo docker run --detach \\ --hostname gitlab.example.com \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab \\ --restart always \\ --volume $GITLAB_HOME/config:/etc/gitlab \\ --volume $GITLAB_HOME/logs:/var/log/gitlab \\ --volume $GITLAB_HOME/data:/var/opt/gitlab \\ gitlab/gitlab-ee:latest 这将下载并启动一个GitLab容器，并发布访问SSH，HTTP和HTTPS所需的端口。所有的GitLab数据都将存储为的子目录 $GITLAB_HOME。restart系统重启后，容器将自动运行。 如果您使用的是SELinux，请改为运行以下命令： 123456789sudo docker run --detach \\ --hostname gitlab.example.com \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab \\ --restart always \\ --volume $GITLAB_HOME/config:/etc/gitlab:Z \\ --volume $GITLAB_HOME/logs:/var/log/gitlab:Z \\ --volume $GITLAB_HOME/data:/var/opt/gitlab:Z \\ gitlab/gitlab-ee:latest 这将确保Docker进程具有足够的权限来在已安装的卷中创建配置文件。 如果您使用的是Kerberos集成 ，还必须发布Kerberos端口（例如，--publish 8443:8443）。否则，将阻止使用Kerberos进行Git操作。 初始化过程可能需要很长时间。您可以使用以下方法跟踪此过程： 1sudo docker logs -f gitlab 启动容器后，您可以访问gitlab.example.com（或者 http://192.168.59.103如果您在macOS上使用了boot2docker）。Docker容器可能需要一段时间才能开始响应查询。首次访问GitLab时，将要求您设置管理员密码。更改后，可以使用用户名root和设置的密码登录。 使用Docker Compose安装GitLab使用Docker Compose，您可以轻松配置，安装和升级基于Docker的GitLab安装： 安装Docker Compose。 创建一个docker-compose.yml文件（或下载一个示例）： 12345678910111213141516web: image: &#x27;gitlab/gitlab-ee:latest&#x27; restart: always hostname: &#x27;gitlab.example.com&#x27; environment: GITLAB_OMNIBUS_CONFIG: | external_url &#x27;https://gitlab.example.com&#x27; # Add any other gitlab.rb configuration here, each on its own line ports: - &#x27;80:80&#x27; - &#x27;443:443&#x27; - &#x27;22:22&#x27; volumes: - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27; - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27; - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27; 确保您与以下目录位于同一目录中，docker-compose.yml然后启动GitLab： 1docker-compose up -d 提示： 阅读“预配置Docker容器”部分以查看GITLAB_OMNIBUS_CONFIG变量的工作方式。 下面是docker-compose.yml在自定义HTTP和SSH端口上运行GitLab的另一个示例。注意GITLAB_OMNIBUS_CONFIG变量如何匹配该 ports部分： 123456789101112131415web: image: &#x27;gitlab/gitlab-ee:latest&#x27; restart: always hostname: &#x27;gitlab.example.com&#x27; environment: GITLAB_OMNIBUS_CONFIG: | external_url &#x27;http://gitlab.example.com:8929&#x27; gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224 ports: - &#x27;8929:8929&#x27; - &#x27;2224:22&#x27; volumes: - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27; - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27; - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27; 这与使用相同--publish 8929:8929 --publish 2224:22。","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"安装harbor","slug":"docker/安装harbor","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.874Z","comments":true,"path":"docker/安装harbor/","link":"","permalink":"http://example.com/docker/%E5%AE%89%E8%A3%85harbor/","excerpt":"","text":"下载并解压安装程序 下载安装程序https://github.com/goharbor/harbor/releases；这里推荐下载离线版本：harbor-offline-installer-version.tgz。version是版本号！ 解压： 1tar xvf harbor-offline-installer-version.tgz 配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）生成证书颁发机构证书在生产环境中，您应该从CA获得证书。在测试或开发环境中，您可以生成自己的CA。要生成CA证书，请运行以下命令。 生成CA证书私钥。 1openssl genrsa -out ca.key 4096 生成CA证书。 调整-subj选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为通用名称（CN）属性。 1234openssl req -x509 -new -nodes -sha512 -days 3650 \\ -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=domain.com&quot; \\ -key ca.key \\ -out ca.crt 生成服务器证书证书通常包含一个.crt文件和一个.key文件，例如domain.com.crt和domain.com.key。 生成私钥。 1openssl genrsa -out domain.com.key 4096 生成证书签名请求（CSR）。 调整-subj选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为公用名（CN）属性，并在密钥和CSR文件名中使用它。 1234openssl req -sha512 -new \\ -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=domain.com&quot; \\ -key domain.com.key \\ -out domain.com.csr 生成一个x509 v3扩展文件。 无论您使用FQDN还是IP地址连接到Harbor主机，都必须创建此文件，以便可以为您的Harbor主机生成符合主题备用名称（SAN）和x509 v3的证书扩展要求。替换DNS条目以反映您的域。 123456789101112cat &gt; v3.ext &lt;&lt;-EOFauthorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentextendedKeyUsage = serverAuthsubjectAltName = @alt_names[alt_names]DNS.1=domain.comDNS.2=domainDNS.3=hostnameEOF 使用该v3.ext文件为您的Harbor主机生成证书。 将domain.comCRS和CRT文件名中的替换为Harbor主机名。 12345openssl x509 -req -sha512 -days 3650 \\ -extfile v3.ext \\ -CA ca.crt -CAkey ca.key -CAcreateserial \\ -in domain.com.csr \\ -out domain.com.crt 提供证书给Harbor和Docker生成后ca.crt，domain.com.crt和domain.com.key文件，必须将它们提供给Harbor和docker，和重新配置Harbor使用它们。 将服务器证书和密钥复制到Harbor主机上的certficates文件夹中。 12cp domain.com.crt /data/cert/cp domain.com.key /data/cert/ 转换domain.com.crt为domain.com.cert，供Docker使用。 Docker守护程序将.crt文件解释为CA证书，并将.cert文件解释为客户端证书。 1openssl x509 -inform PEM -in domain.com.crt -out domain.com.cert 将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。您必须首先创建适当的文件夹。 123sudo cp domain.com.cert /etc/docker/certs.d/domain.com/sudo cp domain.com.key /etc/docker/certs.d/domain.com/sudo cp ca.crt /etc/docker/certs.d/domain.com/ 如果将默认nginx端口443 映射到其他端口，请创建文件夹/etc/docker/certs.d/domain.com:port或/etc/docker/certs.d/harbor_IP:port。 重新启动Docker。 1systemctl restart docker 您可能还需要在操作系统级别信任证书。有关更多信息，请参见 对Harbour安装进行故障排除。 以下示例说明了使用自定义证书的配置。 12345/etc/docker/certs.d/ └── domain.com:port ├── domain.com.cert &lt;-- Server certificate signed by CA ├── domain.com.key &lt;-- Server key signed by CA └── ca.crt &lt;-- Certificate authority that signed the registry certificate 部署或重新配置港口（第一次部署，跳过这一步）如果尚未部署Harbor，请参阅 配置Harbor YML文件，以获取有关如何通过在中指定hostname和https属性来配置Harbor以使用证书的信息harbor.yml。 如果您已经使用HTTP部署了Harbor，并希望将其重新配置为使用HTTPS，请执行以下步骤。 运行prepare脚本以启用HTTPS。(此方法如果不行，则先停止harbor，再执行这一步；调整后的顺序是：2、1、3) Harbor将nginx实例用作所有服务的反向代理。您可以使用prepare脚本来配置nginx为使用HTTPS。该prepare在港的安装包，在同级别的install.sh脚本。 1sudo ./prepare 如果Harbor正在运行，请停止并删除现有实例。 您的图像数据保留在文件系统中，因此不会丢失任何数据。 1sudo docker-compose down -v 重启港口： 1sudo docker-compose up -d 配置YAML文件 复制 harbor.yml.tmpl 为 harbor.yml 1cp harbor.yml.tmpl harbor.yml 编辑harbor.yml文件 123hostname: domain.com # 修改为你的域名或者ip，不能使用localhost和127.0.0.1harbor_admin_password: 123456 # admin用户的密码data_volume: /data # 存储位置 如果你不需要开启https，注释下面这段配置： 1234https: port: 443 certificate: /your/certificate/path private_key: /your/private/key/path 安装1sudo ./install.sh 安装完成后，访问yaml中配置的地址：reg.mydomain.com，输入账号密码即可！ 加点料： 如果没有使用https的话需要配置docker，没有daemon.json文件直接新建一个就行：1sudo vim /etc/docker/daemon.json 根据配置的yaml文件，添加以下内容： 123&#123; &quot;insecure-registries&quot; : [&quot;domain.com:5000&quot;, &quot;0.0.0.0&quot;]&#125; 重启docker： 1sudo service docker restart 停止Harbor： 1sudo docker-compose down -v 启动Harbor： 1sudo docker-compose up -d 重启系统或者重启docker和harbor重启docker： 1sudo service docker restart 停止Harbor： 1sudo docker-compose down -v 启动Harbor： 1sudo docker-compose up -d","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"安装kafka","slug":"docker/安装kafka","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.889Z","comments":true,"path":"docker/安装kafka/","link":"","permalink":"http://example.com/docker/%E5%AE%89%E8%A3%85kafka/","excerpt":"","text":"docker安装kafka一、拉取镜像12docker pull wurstmeister/zookeeperdocker pull wurstmeister/kafka 二、编写 docker-compose.yml 1234567891011121314151617version: &#x27;3&#x27;services: zookeeper: image: wurstmeister/zookeeper ports: - &quot;2181:2181&quot; kafka: image: wurstmeister/kafka depends_on: [ zookeeper ] ports: - &quot;9092:9092&quot; environment: KAFKA_ADVERTISED_HOST_NAME: 192.168.220.150 KAFKA_CREATE_TOPICS: &quot;test:1:1&quot; KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 volumes: - /data/product/zj_bigdata/data/kafka/docker.sock:/var/run/docker.sock https://www.jianshu.com/p/0edcc3addf3f","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"安装rabbitmq","slug":"docker/安装rabbitmq","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.881Z","comments":true,"path":"docker/安装rabbitmq/","link":"","permalink":"http://example.com/docker/%E5%AE%89%E8%A3%85rabbitmq/","excerpt":"","text":"拉取镜像1docker pull rabbitmq 运行1docker run -d --name rabbit -p 15672:15672 -p 5672:5672 -p 1883:1883 -p 15675:15675 rabbitmq:3-management 1docker run -d --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq:3-management 默认账号密码：guest 开启mqtt进入终端 1docker -it rabbit bash 开启mqtt 1rabbitmq-plugins enable rabbitmq_mqtt rabbitmq常用命令：https://blog.csdn.net/shaoyunzhe/article/details/96461703","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"常用命令","slug":"docker/常用命令","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.837Z","comments":true,"path":"docker/常用命令/","link":"","permalink":"http://example.com/docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"列出所有容器ID1docker ps -aq 停止所有容器1docker stop $(docker ps -aq) 删除所有的容器1docekr rm $(docker ps -aq) 删除所有镜像1docker rmi $(docker images -q)","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"常见错误排除","slug":"docker/常见错误排除","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.714Z","comments":true,"path":"docker/常见错误排除/","link":"","permalink":"http://example.com/docker/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%8E%92%E9%99%A4/","excerpt":"","text":"错误：Job for docker.service failed because the control process exited with error code.See “systemctl status docker.service” and “journalctl -xe” for details.这个一般是由于/etc/docker/daemon.json里面配置有误 正确配置例子： 1cat /etc/docker/daemon.json 1234&#123; &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;], &quot;insecure-registries&quot;:[&quot;127.0.0.1&quot;]&#125; 错误：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?使配置文件生效： 1sudo systemctl daemon-reload 重启docker： 1sudo service docker restart","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"使用docker部署springboot项目","slug":"docker/部署springboot项目","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:31:03.864Z","comments":true,"path":"docker/部署springboot项目/","link":"","permalink":"http://example.com/docker/%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"使用docker部署springboot项目打包jar使用idea一键打包 编写Dockerfile文件12345678910111213141516171819202122232425# 定制的镜像都是基于 FROM 的镜像，这里的 java 就是定制需要的基础镜像。后续的操作都是基于 java。FROM openjdk:11# 指明镜像维护着及其联系方式(一般是邮箱地址)MAINTAINER jack &lt;171756268@qq.com&gt;# 设置上海时间ENV TZ=Asia/ShanghaiRUN ln -sf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone# 新建一个文件，作为工作目录使用RUN mkdir -p /app# 为RUN、CMD、ENTRYPOINT以及COPY和AND设置工作目录WORKDIR /app# 声明容器运行暴露的服务端口EXPOSE 8080#拷贝文件或目录到镜像中，并重命名为demo.jarADD demo-test-0.0.2-SNAPSHOT.jar demo.jar# 启动容器时执行的Shell命令，同CMD类似，只是由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，# 而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;] 制作镜像1docker build -t demo-java . -t 指定此镜像的tag名 注意tag名后面有一个点.，指的是 build context 为当前目录 也可以通过 -f 参数指定 Dockerfile 的位置 启动容器1docker run --name demo-jave -p 8080:8080 -d demo-java","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"部署springboot项目","slug":"k8s/部署springboot项目","date":"2021-05-11T08:18:49.000Z","updated":"2021-05-11T08:20:05.841Z","comments":true,"path":"k8s/部署springboot项目/","link":"","permalink":"http://example.com/k8s/%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"Docker安装MySQL正式环境中数据库不建议安装在docker中！！！ 拉取MySQL镜像1docker pull mysql:latest 运行本地容器1docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql 1docker run --name mysql -v /home/apilab/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=api@lab.cn -d mysql 命令说明： -name mysql：为容器指定名称 -p 3306:3306：将容器的3306端口映射到主机的3306端口 -e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码 -d 后台运行容器，并返回容器ID； -v 在主机系统上的适当卷上创建数据目录，例如/my/own/datadir 安装成功通过 docker ps 查看是否安装成功 1docker ps 进入容器1docker exec -it mysql bash 命令说明： -i：即使没有附加也保持STDIN 打开 -t：分配一个伪终端 登录MySQL1mysql -u root -p 修改密码1ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;; 添加远程登录用户创建一个新的用户（也可以使用root用户登录，正式环境不推荐）1CREATE USER &#x27;jack&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;; 添加远程登录用户1GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;","categories":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/categories/k8s/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"}]},{"title":"docker安装gitlab","slug":"安装gitlab","date":"2021-05-11T07:50:00.000Z","updated":"2021-05-11T07:51:18.136Z","comments":true,"path":"安装gitlab/","link":"","permalink":"http://example.com/%E5%AE%89%E8%A3%85gitlab/","excerpt":"","text":"Docker 安装Gitlab一、设置本地卷位置在设置其他所有内容之前，请配置一个新的环境变量$GITLAB_HOME ，该变量指向配置，日志和数据文件将驻留的目录。确保目录存在并且已授予适当的权限。 对于Linux用户，将路径设置为/srv/gitlab： 1export GITLAB_HOME=/srv/gitlab 对于macOS用户，请使用用户$HOME/gitlab目录： 1export GITLAB_HOME=$HOME/gitlab GitLab容器使用主机安装的卷来存储持久数据： 本地位置 docker位置 说明 $GITLAB_HOME/data /var/opt/gitlab 用于存储应用程序数据。 $GITLAB_HOME/logs /var/log/gitlab 用于存储日志。 $GITLAB_HOME/config /etc/gitlab 用于存储GitLab配置文件。 二、安装GitLab Docker镜像可以多种方式运行： 使用Docker引擎 使用Docker Compose 使用Docker群模式 使用Docker Engine安装GitLab您可以微调这些目录以满足您的要求。设置GITLAB_HOME变量后，即可运行图像： 参考：https://segmentfault.com/a/1190000019772866 123456789sudo docker run --detach \\ --hostname gitlab.example.com \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab \\ --restart always \\ --volume $GITLAB_HOME/config:/etc/gitlab \\ --volume $GITLAB_HOME/logs:/var/log/gitlab \\ --volume $GITLAB_HOME/data:/var/opt/gitlab \\ gitlab/gitlab-ee:latest 这将下载并启动一个GitLab容器，并发布访问SSH，HTTP和HTTPS所需的端口。所有的GitLab数据都将存储为的子目录 $GITLAB_HOME。restart系统重启后，容器将自动运行。 如果您使用的是SELinux，请改为运行以下命令： 123456789sudo docker run --detach \\ --hostname gitlab.example.com \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab \\ --restart always \\ --volume $GITLAB_HOME/config:/etc/gitlab:Z \\ --volume $GITLAB_HOME/logs:/var/log/gitlab:Z \\ --volume $GITLAB_HOME/data:/var/opt/gitlab:Z \\ gitlab/gitlab-ee:latest 这将确保Docker进程具有足够的权限来在已安装的卷中创建配置文件。 如果您使用的是Kerberos集成 ，还必须发布Kerberos端口（例如，--publish 8443:8443）。否则，将阻止使用Kerberos进行Git操作。 初始化过程可能需要很长时间。您可以使用以下方法跟踪此过程： 1sudo docker logs -f gitlab 启动容器后，您可以访问gitlab.example.com（或者 http://192.168.59.103如果您在macOS上使用了boot2docker）。Docker容器可能需要一段时间才能开始响应查询。首次访问GitLab时，将要求您设置管理员密码。更改后，可以使用用户名root和设置的密码登录。 使用Docker Compose安装GitLab使用Docker Compose，您可以轻松配置，安装和升级基于Docker的GitLab安装： 安装Docker Compose。 创建一个docker-compose.yml文件（或下载一个示例）： 12345678910111213141516web: image: &#x27;gitlab/gitlab-ee:latest&#x27; restart: always hostname: &#x27;gitlab.example.com&#x27; environment: GITLAB_OMNIBUS_CONFIG: | external_url &#x27;https://gitlab.example.com&#x27; # Add any other gitlab.rb configuration here, each on its own line ports: - &#x27;80:80&#x27; - &#x27;443:443&#x27; - &#x27;22:22&#x27; volumes: - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27; - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27; - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27; 确保您与以下目录位于同一目录中，docker-compose.yml然后启动GitLab： 1docker-compose up -d 提示： 阅读“预配置Docker容器”部分以查看GITLAB_OMNIBUS_CONFIG变量的工作方式。 下面是docker-compose.yml在自定义HTTP和SSH端口上运行GitLab的另一个示例。注意GITLAB_OMNIBUS_CONFIG变量如何匹配该 ports部分： 123456789101112131415web: image: &#x27;gitlab/gitlab-ee:latest&#x27; restart: always hostname: &#x27;gitlab.example.com&#x27; environment: GITLAB_OMNIBUS_CONFIG: | external_url &#x27;http://gitlab.example.com:8929&#x27; gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224 ports: - &#x27;8929:8929&#x27; - &#x27;2224:22&#x27; volumes: - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27; - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27; - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27; 这与使用相同--publish 8929:8929 --publish 2224:22。","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"docker安装MySQL","slug":"docker安装MySQL","date":"2021-05-11T07:48:00.000Z","updated":"2021-05-11T08:23:17.514Z","comments":true,"path":"docker安装MySQL/","link":"","permalink":"http://example.com/docker%E5%AE%89%E8%A3%85MySQL/","excerpt":"","text":"Docker安装MySQL正式环境中数据库不建议安装在docker中！！！ 拉取MySQL镜像1docker pull mysql:latest 运行本地容器1docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql 1docker run --name mysql -v /home/apilab/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=api@lab.cn -d mysql 命令说明： -name mysql：为容器指定名称 -p 3306:3306：将容器的3306端口映射到主机的3306端口 -e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码 -d 后台运行容器，并返回容器ID； -v 在主机系统上的适当卷上创建数据目录，例如/my/own/datadir 安装成功通过 docker ps 查看是否安装成功 1docker ps 进入容器1docker exec -it mysql bash 命令说明： -i：即使没有附加也保持STDIN 打开 -t：分配一个伪终端 登录MySQL1mysql -u root -p 修改密码1ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;; 添加远程登录用户创建一个新的用户（也可以使用root用户登录，正式环境不推荐）1CREATE USER &#x27;jack&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;; 添加远程登录用户1GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]}],"categories":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/categories/k8s/"},{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://example.com/tags/k8s/"},{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]}