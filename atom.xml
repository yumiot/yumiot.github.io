<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yumiot</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-11T08:31:22.532Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jack</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker安装NGINX</title>
    <link href="http://example.com/docker/Docker%E5%AE%89%E8%A3%85NGINX/"/>
    <id>http://example.com/docker/Docker%E5%AE%89%E8%A3%85NGINX/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:22.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker安装NGINX"><a href="#Docker安装NGINX" class="headerlink" title="Docker安装NGINX"></a>Docker安装NGINX</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h3 id="使用默认配置启动NGINX"><a href="#使用默认配置启动NGINX" class="headerlink" title="使用默认配置启动NGINX"></a>使用默认配置启动NGINX</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><p>如果需要开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -d nginx --restart always</span><br></pre></td></tr></table></figure><blockquote><p>在浏览器中打开  127.0.0.1 测试是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1</span><br></pre></td></tr></table></figure></blockquote><h2 id="NGINX使用主机目录配置"><a href="#NGINX使用主机目录配置" class="headerlink" title="NGINX使用主机目录配置"></a>NGINX使用主机目录配置</h2><h3 id="新建配置目录"><a href="#新建配置目录" class="headerlink" title="新建配置目录"></a>新建配置目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/nginx/www /home/nginx/logs /home/nginx/conf</span><br></pre></td></tr></table></figure><blockquote><p>   www: 目录将映射为 nginx 容器配置的虚拟目录。</p><p>   logs: 目录将映射为 nginx 容器的日志目录。</p><p>   conf: 目录里的配置文件将映射为 nginx 容器的配置文件。</p></blockquote><h3 id="复制默认配置"><a href="#复制默认配置" class="headerlink" title="复制默认配置"></a>复制默认配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp nginx:/etc/nginx/nginx.conf /home/jack/nginx/conf/</span><br><span class="line">docker cp nginx:/etc/nginx/conf.d /home/jack/nginx/</span><br></pre></td></tr></table></figure><blockquote><p>nginx：运行容器时的名称</p></blockquote><h3 id="部署新的NGINX容器"><a href="#部署新的NGINX容器" class="headerlink" title="部署新的NGINX容器"></a>部署新的NGINX容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:80 --name nginx-test-web \</span><br><span class="line">  -v /home/nginx/www:/usr/share/nginx/html \</span><br><span class="line">  -v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  -v /home/nginx/logs:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">  -d nginx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx-gateway \</span><br><span class="line">  -v /home/jack/nginx/www:/usr/share/nginx/html \</span><br><span class="line">  -v /home/jack/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  -v /home/jack/nginx/conf.d:/etc/nginx/conf.d \</span><br><span class="line">  -v /home/jack/nginx/logs:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">  -d nginx</span><br></pre></td></tr></table></figure><h2 id="使用本地目录"><a href="#使用本地目录" class="headerlink" title="使用本地目录"></a>使用本地目录</h2><h5 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -v /usr/share/www/html:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>-v 本地目录：docker容器目录:ro</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name apilab-web-nginx -p 8000:80 -v /home/apilab/www/html:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></table></figure><h5 id="配置NGINX"><a href="#配置NGINX" class="headerlink" title="配置NGINX"></a>配置NGINX</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx-name /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker安装NGINX&quot;&gt;&lt;a href=&quot;#Docker安装NGINX&quot; class=&quot;headerlink&quot; title=&quot;Docker安装NGINX&quot;&gt;&lt;/a&gt;Docker安装NGINX&lt;/h2&gt;&lt;h3 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot;</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Redis</title>
    <link href="http://example.com/docker/Docker%E5%AE%89%E8%A3%85Redis/"/>
    <id>http://example.com/docker/Docker%E5%AE%89%E8%A3%85Redis/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:22.566Z</updated>
    
    <content type="html"><![CDATA[<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建私有仓库</title>
    <link href="http://example.com/docker/Docker%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://example.com/docker/Docker%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:22.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker搭建私有仓库"><a href="#docker搭建私有仓库" class="headerlink" title="docker搭建私有仓库"></a>docker搭建私有仓库</h1><p>k8s结合使用参考网址：<a href="https://www.cnblogs.com/FateHuli/p/11836968.html">https://www.cnblogs.com/FateHuli/p/11836968.html</a></p><h4 id="拉取并运行容器："><a href="#拉取并运行容器：" class="headerlink" title="拉取并运行容器："></a>拉取并运行容器：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart always --name registry registry:2</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:5000/v2/">http://localhost:5000/v2/</a> 验证是否安装成功</p><blockquote><p>成功会显示{}</p></blockquote><h4 id="使用dockerfile构建镜像（有镜像可忽略）"><a href="#使用dockerfile构建镜像（有镜像可忽略）" class="headerlink" title="使用dockerfile构建镜像（有镜像可忽略）"></a>使用dockerfile构建镜像（有镜像可忽略）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nginx:test .</span><br></pre></td></tr></table></figure><h4 id="标记本地镜像，将其归入私有仓库："><a href="#标记本地镜像，将其归入私有仓库：" class="headerlink" title="标记本地镜像，将其归入私有仓库："></a>标记本地镜像，将其归入私有仓库：</h4><p>推送到其他仓库时需要登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><p>标记本地镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest localhost:5000/nginx:latest</span><br></pre></td></tr></table></figure><h4 id="将本地的镜像上传到镜像仓库："><a href="#将本地的镜像上传到镜像仓库：" class="headerlink" title="将本地的镜像上传到镜像仓库："></a>将本地的镜像上传到镜像仓库：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push localhost:5000/nginx:latest</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:5000/v2/_catalog">http://localhost:5000/v2/_catalog</a> 查看私有仓库目录，可以看到刚上传的镜像了：</p><blockquote><p>tag语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag ubuntu:15.10 runoob/ubuntu:v3</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>push语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push [OPTIONS] NAME[:TAG]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>**–disable-content-trust :**忽略镜像的校验,默认开启</li></ul><p>实例</p><p>上传本地镜像myapache:v1到镜像仓库中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push myapache:v1</span><br></pre></td></tr></table></figure></blockquote><h2 id="k8s使用私有仓库"><a href="#k8s使用私有仓库" class="headerlink" title="k8s使用私有仓库"></a>k8s使用私有仓库</h2><h4 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h4><p>创建secret（初始安装账号密码在：.docker/config.json）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret docker-registry registry-auth --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL</span><br></pre></td></tr></table></figure><blockquote><p>DOCKER_REGISTRY_SERVER：docker私有服务器ip地址和端口号，也可以是域名</p><p>DOCKER_USER：用户名</p><p>DOCKER_PASSWORD：密码</p><p>DOCKER_EMAIL：邮箱地址，可选参数</p></blockquote><p>查看secret</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191113195758125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdtaWFveWFu,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker搭建私有仓库&quot;&gt;&lt;a href=&quot;#docker搭建私有仓库&quot; class=&quot;headerlink&quot; title=&quot;docker搭建私有仓库&quot;&gt;&lt;/a&gt;docker搭建私有仓库&lt;/h1&gt;&lt;p&gt;k8s结合使用参考网址：&lt;a href=&quot;https://w</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://example.com/docker/Nginx/"/>
    <id>http://example.com/docker/Nginx/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.804Z</updated>
    
    <content type="html"><![CDATA[<p>部署项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name apione-web -p 9001:80 -v /home/hanlon/api/html:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;部署项目&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装MySQL</title>
    <link href="http://example.com/docker/docker%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://example.com/docker/docker%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h1><p>正式环境中数据库不建议安装在docker中！！！</p><h1 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure><h1 id="运行本地容器"><a href="#运行本地容器" class="headerlink" title="运行本地容器"></a>运行本地容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -v /home/apilab/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=api@lab.cn -d mysql</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><p>-name mysql：为容器指定名称</p></li><li><p>-p 3306:3306：将容器的3306端口映射到主机的3306端口</p></li><li><p>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码</p></li><li><p>-d 后台运行容器，并返回容器ID；</p></li><li><p>-v 在主机系统上的适当卷上创建数据目录，例如<code>/my/own/datadir</code></p></li></ul><h1 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h1><p>通过 docker ps 查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-i：即使没有附加也保持STDIN 打开</li><li>-t：分配一个伪终端</li></ul><h1 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h1 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h1><h5 id="创建一个新的用户（也可以使用root用户登录，正式环境不推荐）"><a href="#创建一个新的用户（也可以使用root用户登录，正式环境不推荐）" class="headerlink" title="创建一个新的用户（也可以使用root用户登录，正式环境不推荐）"></a>创建一个新的用户（也可以使用root用户登录，正式环境不推荐）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;jack&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h5 id="添加远程登录用户-1"><a href="#添加远程登录用户-1" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker安装MySQL&quot;&gt;&lt;a href=&quot;#Docker安装MySQL&quot; class=&quot;headerlink&quot; title=&quot;Docker安装MySQL&quot;&gt;&lt;/a&gt;Docker安装MySQL&lt;/h1&gt;&lt;p&gt;正式环境中数据库不建议安装在docker中！！！&lt;/</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker修改国内镜像源</title>
    <link href="http://example.com/docker/docker%20%E4%BF%AE%E6%94%B9%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <id>http://example.com/docker/docker%20%E4%BF%AE%E6%94%B9%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="国内镜像仓库"><a href="#国内镜像仓库" class="headerlink" title="国内镜像仓库"></a>国内镜像仓库</h1><table><thead><tr><th>国内Docker镜像仓库名称</th><th>链接</th></tr></thead><tbody><tr><td>Docker 官方中国区</td><td><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></td></tr><tr><td>网易</td><td><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></td></tr><tr><td>中国科学技术大学</td><td><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></td></tr><tr><td>阿里云</td><td>https://&lt;你的ID&gt;.mirror.aliyuncs.com</td></tr></tbody></table><h1 id="修改docker镜像仓库配置"><a href="#修改docker镜像仓库配置" class="headerlink" title="修改docker镜像仓库配置"></a>修改docker镜像仓库配置</h1><p>修改/etc/docker/daemon.json文件，如果没有先建一个即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><h1 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://o4jtien3.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使配置文件生效"><a href="#使配置文件生效" class="headerlink" title="使配置文件生效"></a>使配置文件生效</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h1 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><h1 id="测试配置是否成功"><a href="#测试配置是否成功" class="headerlink" title="测试配置是否成功"></a>测试配置是否成功</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;国内镜像仓库&quot;&gt;&lt;a href=&quot;#国内镜像仓库&quot; class=&quot;headerlink&quot; title=&quot;国内镜像仓库&quot;&gt;&lt;/a&gt;国内镜像仓库&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;国内Docker镜像仓库名称&lt;/th&gt;
&lt;th&gt;链接&lt;/th&gt;
</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>https错误</title>
    <link href="http://example.com/docker/http%20server%20gave%20HTTP%20response%20to%20HTTPS%20client/"/>
    <id>http://example.com/docker/http%20server%20gave%20HTTP%20response%20to%20HTTPS%20client/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:49.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http-server-gave-HTTP-response-to-HTTPS-client解决方案："><a href="#http-server-gave-HTTP-response-to-HTTPS-client解决方案：" class="headerlink" title="http: server gave HTTP response to HTTPS client解决方案："></a>http: server gave HTTP response to HTTPS client解决方案：</h2><ol><li><h4 id="修改docker配置"><a href="#修改docker配置" class="headerlink" title="修改docker配置"></a>修改docker配置</h4><p>编辑daemon.json文件，添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;ip:port&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ip： docker私有参考ip地址</p><p>port：端口号</p></blockquote><p>使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure></li><li><h4 id="启动minikube的时，使用–insecure-registry启动"><a href="#启动minikube的时，使用–insecure-registry启动" class="headerlink" title="启动minikube的时，使用–insecure-registry启动"></a>启动minikube的时，使用–insecure-registry启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --insecure-registry <span class="string">&#x27;ip:port&#x27;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;http-server-gave-HTTP-response-to-HTTPS-client解决方案：&quot;&gt;&lt;a href=&quot;#http-server-gave-HTTP-response-to-HTTPS-client解决方案：&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>修改源并安装vim</title>
    <link href="http://example.com/docker/%E4%BF%AE%E6%94%B9%E6%BA%90%E5%B9%B6%E5%AE%89%E8%A3%85vim/"/>
    <id>http://example.com/docker/%E4%BF%AE%E6%94%B9%E6%BA%90%E5%B9%B6%E5%AE%89%E8%A3%85vim/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.809Z</updated>
    
    <content type="html"><![CDATA[<p>1、登录容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab bash </span><br></pre></td></tr></table></figure><p>2、修改镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/apt/sources.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>3、更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><p>4、安装软件</p><p>5、tab自动补全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install bash-completion</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/bash_completion</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、登录容器&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装MongoDB</title>
    <link href="http://example.com/docker/%E5%AE%89%E8%A3%85MongoDB/"/>
    <id>http://example.com/docker/%E5%AE%89%E8%A3%85MongoDB/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.843Z</updated>
    
    <content type="html"><![CDATA[<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo:latest</span><br></pre></td></tr></table></figure><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -d mongo --auth</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>-p 27017:27017</strong> ：映射容器服务的 27017 端口到宿主机的 27017 端口。外部可以直接通过 宿主机 ip:27017 访问到 mongo 的服务。</li><li><strong>–auth</strong>：需要密码才能访问容器服务。</li></ul></blockquote><h4 id="创建用户密码"><a href="#创建用户密码" class="headerlink" title="创建用户密码"></a>创建用户密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mongo mongo admin</span><br><span class="line"><span class="comment"># 创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class="line">db.createUser(&#123; user:<span class="string">&#x27;admin&#x27;</span>,<span class="built_in">pwd</span>:<span class="string">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class="string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span>&#125;,<span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br><span class="line"><span class="comment"># 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line">db.auth(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装gitea</title>
    <link href="http://example.com/docker/%E5%AE%89%E8%A3%85gitea/"/>
    <id>http://example.com/docker/%E5%AE%89%E8%A3%85gitea/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.709Z</updated>
    
    <content type="html"><![CDATA[<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitea/gitea:latest</span><br></pre></td></tr></table></figure><h4 id="安装MySQL（有的可以省略）"><a href="#安装MySQL（有的可以省略）" class="headerlink" title="安装MySQL（有的可以省略）"></a>安装MySQL（有的可以省略）</h4><h4 id="设置存储路径"><a href="#设置存储路径" class="headerlink" title="设置存储路径"></a>设置存储路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/lib/gitea</span><br></pre></td></tr></table></figure><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data gitea/gitea:latest</span><br></pre></td></tr></table></figure><h4 id="配置gitea"><a href="#配置gitea" class="headerlink" title="配置gitea"></a>配置gitea</h4><p>使用浏览器访问：<a href="http://localhost:10080/%EF%BC%8C%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%9B">http://localhost:10080/，配置数据库连接；</a></p><p>完成配置之后，创建第一个用户（默认为管理员），登录即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装gitlab</title>
    <link href="http://example.com/docker/%E5%AE%89%E8%A3%85gitlab/"/>
    <id>http://example.com/docker/%E5%AE%89%E8%A3%85gitlab/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-安装Gitlab"><a href="#Docker-安装Gitlab" class="headerlink" title="Docker 安装Gitlab"></a>Docker 安装Gitlab</h1><h3 id="一、设置本地卷位置"><a href="#一、设置本地卷位置" class="headerlink" title="一、设置本地卷位置"></a>一、设置本地卷位置</h3><p>在设置其他所有内容之前，请配置一个新的环境变量<code>$GITLAB_HOME</code> ，该变量指向配置，日志和数据文件将驻留的目录。确保目录存在并且已授予适当的权限。</p><p>对于Linux用户，将路径设置为<code>/srv/gitlab</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GITLAB_HOME=/srv/gitlab</span><br></pre></td></tr></table></figure><p>对于macOS用户，请使用用户<code>$HOME/gitlab</code>目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span>/gitlab</span><br></pre></td></tr></table></figure><p>GitLab容器使用主机安装的卷来存储持久数据：</p><table><thead><tr><th align="left">本地位置</th><th align="left">docker位置</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>$GITLAB_HOME/data</code></td><td align="left"><code>/var/opt/gitlab</code></td><td align="left">用于存储应用程序数据。</td></tr><tr><td align="left"><code>$GITLAB_HOME/logs</code></td><td align="left"><code>/var/log/gitlab</code></td><td align="left">用于存储日志。</td></tr><tr><td align="left"><code>$GITLAB_HOME/config</code></td><td align="left"><code>/etc/gitlab</code></td><td align="left">用于存储GitLab配置文件。</td></tr></tbody></table><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>GitLab Docker镜像可以多种方式运行：</p><ul><li>使用Docker引擎</li><li>使用Docker Compose</li><li>使用Docker群模式</li></ul><h4 id="使用Docker-Engine安装GitLab"><a href="#使用Docker-Engine安装GitLab" class="headerlink" title="使用Docker Engine安装GitLab"></a>使用Docker Engine安装GitLab</h4><p>您可以微调这些目录以满足您的要求。设置<code>GITLAB_HOME</code>变量后，即可运行图像：</p><p>参考：<a href="https://segmentfault.com/a/1190000019772866">https://segmentfault.com/a/1190000019772866</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure><p>这将下载并启动一个GitLab容器，并发布访问SSH，HTTP和HTTPS所需的端口。所有的GitLab数据都将存储为的子目录 <code>$GITLAB_HOME</code>。<code>restart</code>系统重启后，容器将自动运行。</p><p>如果您使用的是SELinux，请改为运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/<span class="built_in">log</span>/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab:Z \</span><br><span class="line">  gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure><p>这将确保Docker进程具有足够的权限来在已安装的卷中创建配置文件。</p><p>如果您使用的是<a href="https://docs.gitlab.com/ee/integration/kerberos.html">Kerberos集成</a> ，还必须发布Kerberos端口（例如，<code>--publish 8443:8443</code>）。否则，将阻止使用Kerberos进行Git操作。</p><p>初始化过程可能需要很长时间。您可以使用以下方法跟踪此过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs -f gitlab</span><br></pre></td></tr></table></figure><p>启动容器后，您可以访问<code>gitlab.example.com</code>（或者 <code>http://192.168.59.103</code>如果您在macOS上使用了boot2docker）。Docker容器可能需要一段时间才能开始响应查询。首次访问GitLab时，将要求您设置管理员密码。更改后，可以使用用户名<code>root</code>和设置的密码登录。</p><h3 id="使用Docker-Compose安装GitLab"><a href="#使用Docker-Compose安装GitLab" class="headerlink" title="使用Docker Compose安装GitLab"></a>使用Docker Compose安装GitLab</h3><p>使用<a href="https://docs.docker.com/compose/">Docker Compose，</a>您可以轻松配置，安装和升级基于Docker的GitLab安装：</p><ol><li><p><a href="https://docs.docker.com/compose/install/">安装Docker Compose</a>。</p></li><li><p>创建一个<code>docker-compose.yml</code>文件（或<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/raw/master/docker/docker-compose.yml">下载一个示例</a>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: &#x27;gitlab/gitlab-ee:latest&#x27;</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: &#x27;gitlab.example.com&#x27;</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url &#x27;https://gitlab.example.com&#x27;</span><br><span class="line">      # Add any other gitlab.rb configuration here, each on its own line</span><br><span class="line">  ports:</span><br><span class="line">    - &#x27;80:80&#x27;</span><br><span class="line">    - &#x27;443:443&#x27;</span><br><span class="line">    - &#x27;22:22&#x27;</span><br><span class="line">  volumes:</span><br><span class="line">    - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span><br></pre></td></tr></table></figure></li><li><p>确保您与以下目录位于同一目录中，<code>docker-compose.yml</code>然后启动GitLab：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li></ol><p><strong>提示：</strong> 阅读<a href="https://docs.gitlab.com/omnibus/docker/#pre-configure-docker-container">“预配置Docker容器”</a>部分以查看<code>GITLAB_OMNIBUS_CONFIG</code>变量的工作方式。</p><p>下面是<code>docker-compose.yml</code>在自定义HTTP和SSH端口上运行GitLab的另一个示例。注意<code>GITLAB_OMNIBUS_CONFIG</code>变量如何匹配该 <code>ports</code>部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: &#x27;gitlab/gitlab-ee:latest&#x27;</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: &#x27;gitlab.example.com&#x27;</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url &#x27;http://gitlab.example.com:8929&#x27;</span><br><span class="line">      gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224</span><br><span class="line">  ports:</span><br><span class="line">    - &#x27;8929:8929&#x27;</span><br><span class="line">    - &#x27;2224:22&#x27;</span><br><span class="line">  volumes:</span><br><span class="line">    - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span><br></pre></td></tr></table></figure><p>这与使用相同<code>--publish 8929:8929 --publish 2224:22</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-安装Gitlab&quot;&gt;&lt;a href=&quot;#Docker-安装Gitlab&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装Gitlab&quot;&gt;&lt;/a&gt;Docker 安装Gitlab&lt;/h1&gt;&lt;h3 id=&quot;一、设置本地卷位置&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装harbor</title>
    <link href="http://example.com/docker/%E5%AE%89%E8%A3%85harbor/"/>
    <id>http://example.com/docker/%E5%AE%89%E8%A3%85harbor/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载并解压安装程序"><a href="#下载并解压安装程序" class="headerlink" title="下载并解压安装程序"></a>下载并解压安装程序</h2><ol><li><p>下载安装程序<a href="https://github.com/goharbor/harbor/releases%EF%BC%9B%E8%BF%99%E9%87%8C%E6%8E%A8%E8%8D%90%E4%B8%8B%E8%BD%BD%E7%A6%BB%E7%BA%BF%E7%89%88%E6%9C%AC%EF%BC%9Aharbor-offline-installer-version.tgz%E3%80%82version%E6%98%AF%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%81">https://github.com/goharbor/harbor/releases；这里推荐下载离线版本：harbor-offline-installer-version.tgz。version是版本号！</a></p></li><li><p>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf harbor-offline-installer-version.tgz</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）"><a href="#配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）" class="headerlink" title="配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）"></a>配置HTTPS（如果你不配置HTTPS则跳过这一步，直接配置yaml文件，k8s开发使用IP）</h2><h4 id="生成证书颁发机构证书"><a href="#生成证书颁发机构证书" class="headerlink" title="生成证书颁发机构证书"></a>生成证书颁发机构证书</h4><p>在生产环境中，您应该从CA获得证书。在测试或开发环境中，您可以生成自己的CA。要生成CA证书，请运行以下命令。</p><ol><li><p>生成CA证书私钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out ca.key 4096</span><br></pre></td></tr></table></figure></li><li><p>生成CA证书。</p><p>调整<code>-subj</code>选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为通用名称（<code>CN</code>）属性。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line"> -subj <span class="string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=domain.com&quot;</span> \</span><br><span class="line"> -key ca.key \</span><br><span class="line"> -out ca.crt</span><br></pre></td></tr></table></figure></li></ol><h4 id="生成服务器证书"><a href="#生成服务器证书" class="headerlink" title="生成服务器证书"></a>生成服务器证书</h4><p>证书通常包含一个<code>.crt</code>文件和一个<code>.key</code>文件，例如<code>domain.com.crt</code>和<code>domain.com.key</code>。</p><ol><li><p>生成私钥。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out domain.com.key 4096</span><br></pre></td></tr></table></figure></li><li><p>生成证书签名请求（CSR）。</p><p>调整<code>-subj</code>选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为公用名（<code>CN</code>）属性，并在密钥和CSR文件名中使用它。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl req -sha512 -new \</span><br><span class="line">    -subj <span class="string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=domain.com&quot;</span> \</span><br><span class="line">    -key domain.com.key \</span><br><span class="line">    -out domain.com.csr</span><br></pre></td></tr></table></figure></li><li><p>生成一个x509 v3扩展文件。</p><p>无论您使用FQDN还是IP地址连接到Harbor主机，都必须创建此文件，以便可以为您的Harbor主机生成符合主题备用名称（SAN）和x509 v3的证书扩展要求。替换<code>DNS</code>条目以反映您的域。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; v3.ext &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">authorityKeyIdentifier=keyid,issuer</span></span><br><span class="line"><span class="string">basicConstraints=CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">DNS.1=domain.com</span></span><br><span class="line"><span class="string">DNS.2=domain</span></span><br><span class="line"><span class="string">DNS.3=hostname</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>使用该<code>v3.ext</code>文件为您的Harbor主机生成证书。</p><p>将<code>domain.com</code>CRS和CRT文件名中的替换为Harbor主机名。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -sha512 -days 3650 \</span><br><span class="line">    -extfile v3.ext \</span><br><span class="line">    -CA ca.crt -CAkey ca.key -CAcreateserial \</span><br><span class="line">    -<span class="keyword">in</span> domain.com.csr \</span><br><span class="line">    -out domain.com.crt</span><br></pre></td></tr></table></figure></li></ol><h4 id="提供证书给Harbor和Docker"><a href="#提供证书给Harbor和Docker" class="headerlink" title="提供证书给Harbor和Docker"></a>提供证书给Harbor和Docker</h4><p>生成后<code>ca.crt</code>，<code>domain.com.crt</code>和<code>domain.com.key</code>文件，必须将它们提供给Harbor和docker，和重新配置Harbor使用它们。</p><ol><li><p>将服务器证书和密钥复制到Harbor主机上的certficates文件夹中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp domain.com.crt /data/cert/</span><br><span class="line">cp domain.com.key /data/cert/</span><br></pre></td></tr></table></figure></li><li><p>转换<code>domain.com.crt</code>为<code>domain.com.cert</code>，供Docker使用。</p><p>Docker守护程序将<code>.crt</code>文件解释为CA证书，并将<code>.cert</code>文件解释为客户端证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform PEM -<span class="keyword">in</span> domain.com.crt -out domain.com.cert</span><br></pre></td></tr></table></figure></li><li><p>将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。您必须首先创建适当的文件夹。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp domain.com.cert /etc/docker/certs.d/domain.com/</span><br><span class="line">sudo cp domain.com.key /etc/docker/certs.d/domain.com/</span><br><span class="line">sudo cp ca.crt /etc/docker/certs.d/domain.com/</span><br></pre></td></tr></table></figure><p>如果将默认<code>nginx</code>端口443 映射到其他端口，请创建文件夹<code>/etc/docker/certs.d/domain.com:port</code>或<code>/etc/docker/certs.d/harbor_IP:port</code>。</p></li><li><p>重新启动Docker。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><p>您可能还需要在操作系统级别信任证书。有关更多信息，请参见 <a href="https://goharbor.io/docs/2.0.0/install-config/troubleshoot-installation/#https">对Harbour安装</a>进行<a href="https://goharbor.io/docs/2.0.0/install-config/troubleshoot-installation/#https">故障排除</a>。</p><p>以下示例说明了使用自定义证书的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/certs.d/</span><br><span class="line">    └── domain.com:port</span><br><span class="line">       ├── domain.com.cert  &lt;-- Server certificate signed by CA</span><br><span class="line">       ├── domain.com.key   &lt;-- Server key signed by CA</span><br><span class="line">       └── ca.crt               &lt;-- Certificate authority that signed the registry certificate</span><br></pre></td></tr></table></figure><h4 id="部署或重新配置港口（第一次部署，跳过这一步）"><a href="#部署或重新配置港口（第一次部署，跳过这一步）" class="headerlink" title="部署或重新配置港口（第一次部署，跳过这一步）"></a>部署或重新配置港口（第一次部署，跳过这一步）</h4><p>如果尚未部署Harbor，请参阅 <a href="https://goharbor.io/docs/2.0.0/install-config/configure-yml-file/">配置Harbor YML文件，</a>以获取有关如何通过在中指定<code>hostname</code>和<code>https</code>属性来配置Harbor以使用证书的信息<code>harbor.yml</code>。</p><p>如果您已经使用HTTP部署了Harbor，并希望将其重新配置为使用HTTPS，请执行以下步骤。</p><ol><li><p>运行<code>prepare</code>脚本以启用HTTPS。(此方法如果不行，则先停止harbor，再执行这一步；调整后的顺序是：2、1、3)</p><p>Harbor将<code>nginx</code>实例用作所有服务的反向代理。您可以使用<code>prepare</code>脚本来配置<code>nginx</code>为使用HTTPS。该<code>prepare</code>在港的安装包，在同级别的<code>install.sh</code>脚本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./prepare</span><br></pre></td></tr></table></figure></li><li><p>如果Harbor正在运行，请停止并删除现有实例。</p><p>您的图像数据保留在文件系统中，因此不会丢失任何数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose down -v</span><br></pre></td></tr></table></figure></li><li><p>重启港口：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置YAML文件"><a href="#配置YAML文件" class="headerlink" title="配置YAML文件"></a>配置YAML文件</h2><ol><li><p>复制 harbor.yml.tmpl 为 harbor.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp harbor.yml.tmpl harbor.yml</span><br></pre></td></tr></table></figure></li><li><p>编辑harbor.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hostname:</span> <span class="string">domain.com</span><span class="comment"># 修改为你的域名或者ip，不能使用localhost和127.0.0.1</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="number">123456</span><span class="comment"># admin用户的密码</span></span><br><span class="line"><span class="attr">data_volume:</span> <span class="string">/data</span><span class="comment"># 存储位置</span></span><br></pre></td></tr></table></figure><p>如果你不需要开启https，注释下面这段配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">  <span class="attr">certificate:</span> <span class="string">/your/certificate/path</span></span><br><span class="line">  <span class="attr">private_key:</span> <span class="string">/your/private/key/path</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure><p>安装完成后，访问yaml中配置的地址：reg.mydomain.com，输入账号密码即可！</p><h4 id="加点料："><a href="#加点料：" class="headerlink" title="加点料："></a>加点料：</h4><ol><li><h5 id="如果没有使用https的话需要配置docker，没有daemon-json文件直接新建一个就行："><a href="#如果没有使用https的话需要配置docker，没有daemon-json文件直接新建一个就行：" class="headerlink" title="如果没有使用https的话需要配置docker，没有daemon.json文件直接新建一个就行："></a>如果没有使用https的话需要配置docker，没有daemon.json文件直接新建一个就行：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>根据配置的yaml文件，添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;insecure-registries&quot;</span> : [<span class="string">&quot;domain.com:5000&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>停止Harbor：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose down -v</span><br></pre></td></tr></table></figure><p>启动Harbor：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><h5 id="重启系统或者重启docker和harbor"><a href="#重启系统或者重启docker和harbor" class="headerlink" title="重启系统或者重启docker和harbor"></a>重启系统或者重启docker和harbor</h5><p>重启docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p>停止Harbor：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose down -v</span><br></pre></td></tr></table></figure><p>启动Harbor：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载并解压安装程序&quot;&gt;&lt;a href=&quot;#下载并解压安装程序&quot; class=&quot;headerlink&quot; title=&quot;下载并解压安装程序&quot;&gt;&lt;/a&gt;下载并解压安装程序&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载安装程序&lt;a href=&quot;https://github.com</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装kafka</title>
    <link href="http://example.com/docker/%E5%AE%89%E8%A3%85kafka/"/>
    <id>http://example.com/docker/%E5%AE%89%E8%A3%85kafka/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker安装kafka"><a href="#docker安装kafka" class="headerlink" title="docker安装kafka"></a>docker安装kafka</h1><h3 id="一、拉取镜像"><a href="#一、拉取镜像" class="headerlink" title="一、拉取镜像"></a>一、拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull wurstmeister/zookeeper</span><br><span class="line">docker pull wurstmeister/kafka</span><br></pre></td></tr></table></figure><p>二、编写 docker-compose.yml</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  zookeeper:</span><br><span class="line">    image: wurstmeister/zookeeper</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">  kafka:</span><br><span class="line">    image: wurstmeister/kafka</span><br><span class="line">    depends_on: [ zookeeper ]</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      KAFKA_ADVERTISED_HOST_NAME: <span class="number">192.168</span>.<span class="number">220.150</span></span><br><span class="line">      KAFKA_CREATE_TOPICS: <span class="string">&quot;test:1:1&quot;</span></span><br><span class="line">      KAFKA_ZOOKEEPER_CONNECT: zookeeper:<span class="number">2181</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /data/product/zj_bigdata/data/kafka/docker.sock:/var/<span class="keyword">run</span><span class="bash">/docker.sock</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/0edcc3addf3f">https://www.jianshu.com/p/0edcc3addf3f</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker安装kafka&quot;&gt;&lt;a href=&quot;#docker安装kafka&quot; class=&quot;headerlink&quot; title=&quot;docker安装kafka&quot;&gt;&lt;/a&gt;docker安装kafka&lt;/h1&gt;&lt;h3 id=&quot;一、拉取镜像&quot;&gt;&lt;a href=&quot;#一、拉</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装rabbitmq</title>
    <link href="http://example.com/docker/%E5%AE%89%E8%A3%85rabbitmq/"/>
    <id>http://example.com/docker/%E5%AE%89%E8%A3%85rabbitmq/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq</span><br></pre></td></tr></table></figure><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbit -p 15672:15672 -p 5672:5672 -p 1883:1883 -p 15675:15675 rabbitmq:3-management</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq:3-management</span><br></pre></td></tr></table></figure><blockquote><p>默认账号密码：guest</p></blockquote><h1 id="开启mqtt"><a href="#开启mqtt" class="headerlink" title="开启mqtt"></a>开启mqtt</h1><p>进入终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -it rabbit bash</span><br></pre></td></tr></table></figure><p>开启mqtt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_mqtt</span><br></pre></td></tr></table></figure><p>rabbitmq常用命令：<a href="https://blog.csdn.net/shaoyunzhe/article/details/96461703">https://blog.csdn.net/shaoyunzhe/article/details/96461703</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>常用命令</title>
    <link href="http://example.com/docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.837Z</updated>
    
    <content type="html"><![CDATA[<h4 id="列出所有容器ID"><a href="#列出所有容器ID" class="headerlink" title="列出所有容器ID"></a>列出所有容器ID</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h4 id="停止所有容器"><a href="#停止所有容器" class="headerlink" title="停止所有容器"></a>停止所有容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><h4 id="删除所有的容器"><a href="#删除所有的容器" class="headerlink" title="删除所有的容器"></a>删除所有的容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docekr rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h4 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;列出所有容器ID&quot;&gt;&lt;a href=&quot;#列出所有容器ID&quot; class=&quot;headerlink&quot; title=&quot;列出所有容器ID&quot;&gt;&lt;/a&gt;列出所有容器ID&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>常见错误排除</title>
    <link href="http://example.com/docker/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%8E%92%E9%99%A4/"/>
    <id>http://example.com/docker/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%8E%92%E9%99%A4/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.714Z</updated>
    
    <content type="html"><![CDATA[<h4 id="错误：Job-for-docker-service-failed-because-the-control-process-exited-with-error-code"><a href="#错误：Job-for-docker-service-failed-because-the-control-process-exited-with-error-code" class="headerlink" title="错误：Job for docker.service failed because the control process exited with error code."></a>错误：Job for docker.service failed because the control process exited with error code.</h4><h4 id="See-“systemctl-status-docker-service”-and-“journalctl-xe”-for-details"><a href="#See-“systemctl-status-docker-service”-and-“journalctl-xe”-for-details" class="headerlink" title="See “systemctl status docker.service” and “journalctl -xe” for details."></a>See “systemctl status docker.service” and “journalctl -xe” for details.</h4><p>这个一般是由于/etc/docker/daemon.json里面配置有误</p><p>正确配置例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;:[&quot;127.0.0.1&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误：Cannot-connect-to-the-Docker-daemon-at-unix-var-run-docker-sock-Is-the-docker-daemon-running"><a href="#错误：Cannot-connect-to-the-Docker-daemon-at-unix-var-run-docker-sock-Is-the-docker-daemon-running" class="headerlink" title="错误：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?"></a>错误：Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</h4><p>使配置文件生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>重启docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;错误：Job-for-docker-service-failed-because-the-control-process-exited-with-error-code&quot;&gt;&lt;a href=&quot;#错误：Job-for-docker-service-failed-beca</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用docker部署springboot项目</title>
    <link href="http://example.com/docker/%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/docker/%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:31:03.864Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用docker部署springboot项目"><a href="#使用docker部署springboot项目" class="headerlink" title="使用docker部署springboot项目"></a>使用docker部署springboot项目</h3><h3 id="打包jar"><a href="#打包jar" class="headerlink" title="打包jar"></a>打包jar</h3><p>使用idea一键打包</p><h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定制的镜像都是基于 FROM 的镜像，这里的 java 就是定制需要的基础镜像。后续的操作都是基于 java。</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指明镜像维护着及其联系方式(一般是邮箱地址)</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> jack &lt;<span class="number">171756268</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上海时间</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -sf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个文件，作为工作目录使用</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为RUN、CMD、ENTRYPOINT以及COPY和AND设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明容器运行暴露的服务端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝文件或目录到镜像中，并重命名为demo.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> demo-test-0.0.2-SNAPSHOT.jar demo.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器时执行的Shell命令，同CMD类似，只是由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，</span></span><br><span class="line"><span class="comment"># 而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t demo-java . </span><br></pre></td></tr></table></figure><blockquote><p>-t  指定此镜像的tag名</p><p>注意tag名后面有一个点.，指的是 build context 为当前目录</p><p>也可以通过 -f 参数指定 Dockerfile 的位置</p></blockquote><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name demo-jave -p 8080:8080 -d demo-java</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用docker部署springboot项目&quot;&gt;&lt;a href=&quot;#使用docker部署springboot项目&quot; class=&quot;headerlink&quot; title=&quot;使用docker部署springboot项目&quot;&gt;&lt;/a&gt;使用docker部署springboot</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>部署springboot项目</title>
    <link href="http://example.com/k8s/%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/k8s/%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-05-11T08:18:49.000Z</published>
    <updated>2021-05-11T08:20:05.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h1><p>正式环境中数据库不建议安装在docker中！！！</p><h1 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure><h1 id="运行本地容器"><a href="#运行本地容器" class="headerlink" title="运行本地容器"></a>运行本地容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -v /home/apilab/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=api@lab.cn -d mysql</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><p>-name mysql：为容器指定名称</p></li><li><p>-p 3306:3306：将容器的3306端口映射到主机的3306端口</p></li><li><p>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码</p></li><li><p>-d 后台运行容器，并返回容器ID；</p></li><li><p>-v 在主机系统上的适当卷上创建数据目录，例如<code>/my/own/datadir</code></p></li></ul><h1 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h1><p>通过 docker ps 查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-i：即使没有附加也保持STDIN 打开</li><li>-t：分配一个伪终端</li></ul><h1 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h1 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h1><h5 id="创建一个新的用户（也可以使用root用户登录，正式环境不推荐）"><a href="#创建一个新的用户（也可以使用root用户登录，正式环境不推荐）" class="headerlink" title="创建一个新的用户（也可以使用root用户登录，正式环境不推荐）"></a>创建一个新的用户（也可以使用root用户登录，正式环境不推荐）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;jack&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h5 id="添加远程登录用户-1"><a href="#添加远程登录用户-1" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker安装MySQL&quot;&gt;&lt;a href=&quot;#Docker安装MySQL&quot; class=&quot;headerlink&quot; title=&quot;Docker安装MySQL&quot;&gt;&lt;/a&gt;Docker安装MySQL&lt;/h1&gt;&lt;p&gt;正式环境中数据库不建议安装在docker中！！！&lt;/</summary>
      
    
    
    
    <category term="k8s" scheme="http://example.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://example.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>docker安装gitlab</title>
    <link href="http://example.com/%E5%AE%89%E8%A3%85gitlab/"/>
    <id>http://example.com/%E5%AE%89%E8%A3%85gitlab/</id>
    <published>2021-05-11T07:50:00.000Z</published>
    <updated>2021-05-11T07:51:18.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-安装Gitlab"><a href="#Docker-安装Gitlab" class="headerlink" title="Docker 安装Gitlab"></a>Docker 安装Gitlab</h1><h3 id="一、设置本地卷位置"><a href="#一、设置本地卷位置" class="headerlink" title="一、设置本地卷位置"></a>一、设置本地卷位置</h3><p>在设置其他所有内容之前，请配置一个新的环境变量<code>$GITLAB_HOME</code> ，该变量指向配置，日志和数据文件将驻留的目录。确保目录存在并且已授予适当的权限。</p><p>对于Linux用户，将路径设置为<code>/srv/gitlab</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GITLAB_HOME=/srv/gitlab</span><br></pre></td></tr></table></figure><p>对于macOS用户，请使用用户<code>$HOME/gitlab</code>目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span>/gitlab</span><br></pre></td></tr></table></figure><p>GitLab容器使用主机安装的卷来存储持久数据：</p><table><thead><tr><th align="left">本地位置</th><th align="left">docker位置</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>$GITLAB_HOME/data</code></td><td align="left"><code>/var/opt/gitlab</code></td><td align="left">用于存储应用程序数据。</td></tr><tr><td align="left"><code>$GITLAB_HOME/logs</code></td><td align="left"><code>/var/log/gitlab</code></td><td align="left">用于存储日志。</td></tr><tr><td align="left"><code>$GITLAB_HOME/config</code></td><td align="left"><code>/etc/gitlab</code></td><td align="left">用于存储GitLab配置文件。</td></tr></tbody></table><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>GitLab Docker镜像可以多种方式运行：</p><ul><li>使用Docker引擎</li><li>使用Docker Compose</li><li>使用Docker群模式</li></ul><h4 id="使用Docker-Engine安装GitLab"><a href="#使用Docker-Engine安装GitLab" class="headerlink" title="使用Docker Engine安装GitLab"></a>使用Docker Engine安装GitLab</h4><p>您可以微调这些目录以满足您的要求。设置<code>GITLAB_HOME</code>变量后，即可运行图像：</p><p>参考：<a href="https://segmentfault.com/a/1190000019772866">https://segmentfault.com/a/1190000019772866</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure><p>这将下载并启动一个GitLab容器，并发布访问SSH，HTTP和HTTPS所需的端口。所有的GitLab数据都将存储为的子目录 <code>$GITLAB_HOME</code>。<code>restart</code>系统重启后，容器将自动运行。</p><p>如果您使用的是SELinux，请改为运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/<span class="built_in">log</span>/gitlab:Z \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab:Z \</span><br><span class="line">  gitlab/gitlab-ee:latest</span><br></pre></td></tr></table></figure><p>这将确保Docker进程具有足够的权限来在已安装的卷中创建配置文件。</p><p>如果您使用的是<a href="https://docs.gitlab.com/ee/integration/kerberos.html">Kerberos集成</a> ，还必须发布Kerberos端口（例如，<code>--publish 8443:8443</code>）。否则，将阻止使用Kerberos进行Git操作。</p><p>初始化过程可能需要很长时间。您可以使用以下方法跟踪此过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs -f gitlab</span><br></pre></td></tr></table></figure><p>启动容器后，您可以访问<code>gitlab.example.com</code>（或者 <code>http://192.168.59.103</code>如果您在macOS上使用了boot2docker）。Docker容器可能需要一段时间才能开始响应查询。首次访问GitLab时，将要求您设置管理员密码。更改后，可以使用用户名<code>root</code>和设置的密码登录。</p><h3 id="使用Docker-Compose安装GitLab"><a href="#使用Docker-Compose安装GitLab" class="headerlink" title="使用Docker Compose安装GitLab"></a>使用Docker Compose安装GitLab</h3><p>使用<a href="https://docs.docker.com/compose/">Docker Compose，</a>您可以轻松配置，安装和升级基于Docker的GitLab安装：</p><ol><li><p><a href="https://docs.docker.com/compose/install/">安装Docker Compose</a>。</p></li><li><p>创建一个<code>docker-compose.yml</code>文件（或<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/raw/master/docker/docker-compose.yml">下载一个示例</a>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: &#x27;gitlab/gitlab-ee:latest&#x27;</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: &#x27;gitlab.example.com&#x27;</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url &#x27;https://gitlab.example.com&#x27;</span><br><span class="line">      # Add any other gitlab.rb configuration here, each on its own line</span><br><span class="line">  ports:</span><br><span class="line">    - &#x27;80:80&#x27;</span><br><span class="line">    - &#x27;443:443&#x27;</span><br><span class="line">    - &#x27;22:22&#x27;</span><br><span class="line">  volumes:</span><br><span class="line">    - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span><br></pre></td></tr></table></figure></li><li><p>确保您与以下目录位于同一目录中，<code>docker-compose.yml</code>然后启动GitLab：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li></ol><p><strong>提示：</strong> 阅读<a href="https://docs.gitlab.com/omnibus/docker/#pre-configure-docker-container">“预配置Docker容器”</a>部分以查看<code>GITLAB_OMNIBUS_CONFIG</code>变量的工作方式。</p><p>下面是<code>docker-compose.yml</code>在自定义HTTP和SSH端口上运行GitLab的另一个示例。注意<code>GITLAB_OMNIBUS_CONFIG</code>变量如何匹配该 <code>ports</code>部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: &#x27;gitlab/gitlab-ee:latest&#x27;</span><br><span class="line">  restart: always</span><br><span class="line">  hostname: &#x27;gitlab.example.com&#x27;</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url &#x27;http://gitlab.example.com:8929&#x27;</span><br><span class="line">      gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224</span><br><span class="line">  ports:</span><br><span class="line">    - &#x27;8929:8929&#x27;</span><br><span class="line">    - &#x27;2224:22&#x27;</span><br><span class="line">  volumes:</span><br><span class="line">    - &#x27;$GITLAB_HOME/config:/etc/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/logs:/var/log/gitlab&#x27;</span><br><span class="line">    - &#x27;$GITLAB_HOME/data:/var/opt/gitlab&#x27;</span><br></pre></td></tr></table></figure><p>这与使用相同<code>--publish 8929:8929 --publish 2224:22</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-安装Gitlab&quot;&gt;&lt;a href=&quot;#Docker-安装Gitlab&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装Gitlab&quot;&gt;&lt;/a&gt;Docker 安装Gitlab&lt;/h1&gt;&lt;h3 id=&quot;一、设置本地卷位置&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker安装MySQL</title>
    <link href="http://example.com/docker%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://example.com/docker%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2021-05-11T07:48:00.000Z</published>
    <updated>2021-05-11T08:23:17.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h1><p>正式环境中数据库不建议安装在docker中！！！</p><h1 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure><h1 id="运行本地容器"><a href="#运行本地容器" class="headerlink" title="运行本地容器"></a>运行本地容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -v /home/apilab/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=api@lab.cn -d mysql</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><p>-name mysql：为容器指定名称</p></li><li><p>-p 3306:3306：将容器的3306端口映射到主机的3306端口</p></li><li><p>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码</p></li><li><p>-d 后台运行容器，并返回容器ID；</p></li><li><p>-v 在主机系统上的适当卷上创建数据目录，例如<code>/my/own/datadir</code></p></li></ul><h1 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h1><p>通过 docker ps 查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li>-i：即使没有附加也保持STDIN 打开</li><li>-t：分配一个伪终端</li></ul><h1 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h1 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h1><h5 id="创建一个新的用户（也可以使用root用户登录，正式环境不推荐）"><a href="#创建一个新的用户（也可以使用root用户登录，正式环境不推荐）" class="headerlink" title="创建一个新的用户（也可以使用root用户登录，正式环境不推荐）"></a>创建一个新的用户（也可以使用root用户登录，正式环境不推荐）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;jack&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h5 id="添加远程登录用户-1"><a href="#添加远程登录用户-1" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker安装MySQL&quot;&gt;&lt;a href=&quot;#Docker安装MySQL&quot; class=&quot;headerlink&quot; title=&quot;Docker安装MySQL&quot;&gt;&lt;/a&gt;Docker安装MySQL&lt;/h1&gt;&lt;p&gt;正式环境中数据库不建议安装在docker中！！！&lt;/</summary>
      
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
</feed>
